   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"fonctions.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.global	ARR_Freq
  22              		.thumb
  23              		.thumb_func
  24              		.type	ARR_Freq, %function
  25              	ARR_Freq:
  26              	.LFB392:
  27              		.file 1 "src/fonctions.c"
   1:src/fonctions.c **** #include <stdint.h>
   2:src/fonctions.c **** #include "sys/cm4.h"
   3:src/fonctions.c **** #include "sys/devices.h"
   4:src/fonctions.c **** #include "sys/init.h"
   5:src/fonctions.c **** #include "sys/clock.h"
   6:src/fonctions.c **** #include "sys/serial_io.h"
   7:src/fonctions.c **** #include "adc.h"
   8:src/fonctions.c **** #include "led.h"
   9:src/fonctions.c **** #include "notes.c"
  10:src/fonctions.c **** 
  11:src/fonctions.c **** extern uint16_t berceuse[2][55];
  12:src/fonctions.c **** extern uint16_t colas[2][39];
  13:src/fonctions.c **** extern uint16_t clair[2][46];
  14:src/fonctions.c **** extern uint16_t salv[2][31];
  15:src/fonctions.c **** extern uint16_t noel[2][77];
  16:src/fonctions.c **** extern uint16_t marionette[2][27];
  17:src/fonctions.c **** extern uint16_t dodo[2][27];
  18:src/fonctions.c **** extern uint16_t jacques[2][34];
  19:src/fonctions.c **** 
  20:src/fonctions.c **** /*Pointeur selection de musique*/
  21:src/fonctions.c **** uint16_t *ptN_melodie;	/*pointeur sur les notes de la melodie*/
  22:src/fonctions.c **** uint16_t *ptD_melodie;	/*pointeur sur les durees de la melodie*/
  23:src/fonctions.c **** 
  24:src/fonctions.c **** /*Frequence du timer voulue, 100 kHz*/
  25:src/fonctions.c **** uint32_t divclk = 100000;
  26:src/fonctions.c **** 
  27:src/fonctions.c **** uint8_t modeS;
  28:src/fonctions.c **** 
  29:src/fonctions.c **** /*Calcul de la valeur de ARR en fonctions de la frequence de la note*/
  30:src/fonctions.c **** uint32_t ARR_Freq(uint16_t f)
  31:src/fonctions.c **** {
  28              		.loc 1 31 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  32:src/fonctions.c **** 	return divclk/f;
  34              		.loc 1 32 0
  35 0000 024B     		ldr	r3, .L2
  36 0002 1B68     		ldr	r3, [r3]
  33:src/fonctions.c **** }
  37              		.loc 1 33 0
  38 0004 B3FBF0F0 		udiv	r0, r3, r0
  39              	.LVL1:
  40 0008 7047     		bx	lr
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE392:
  47              		.size	ARR_Freq, .-ARR_Freq
  48              		.align	1
  49              		.global	init_timer
  50              		.thumb
  51              		.thumb_func
  52              		.type	init_timer, %function
  53              	init_timer:
  54              	.LFB393:
  34:src/fonctions.c **** 
  35:src/fonctions.c **** /*Initialisation des registres du timer 2*/
  36:src/fonctions.c **** void init_timer()
  37:src/fonctions.c **** {	
  55              		.loc 1 37 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  38:src/fonctions.c **** 	GPIOB.MODER &= ~(3<<18);
  59              		.loc 1 38 0
  60 0010 1B4B     		ldr	r3, .L5
  61 0012 1A68     		ldr	r2, [r3]
  62 0014 22F44022 		bic	r2, r2, #786432
  37:src/fonctions.c **** 	GPIOB.MODER &= ~(3<<18);
  63              		.loc 1 37 0
  64 0018 10B5     		push	{r4, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 4, -8
  67              		.cfi_offset 14, -4
  68              		.loc 1 38 0
  69 001a 1A60     		str	r2, [r3]
  39:src/fonctions.c **** 	GPIOB.MODER |= (1<<19);	/*BUZZER EN SORTIE AF*/
  70              		.loc 1 39 0
  71 001c 1A68     		ldr	r2, [r3]
  72 001e 42F40022 		orr	r2, r2, #524288
  73 0022 1A60     		str	r2, [r3]
  40:src/fonctions.c **** 	GPIOB.AFRH &= ~ 0xF0;	/*AF1 dans AFRH9*/
  74              		.loc 1 40 0
  75 0024 5A6A     		ldr	r2, [r3, #36]
  76 0026 22F0F002 		bic	r2, r2, #240
  77 002a 5A62     		str	r2, [r3, #36]
  41:src/fonctions.c **** 	GPIOB.AFRH |= 1<<4;
  78              		.loc 1 41 0
  79 002c 5A6A     		ldr	r2, [r3, #36]
  80 002e 42F01002 		orr	r2, r2, #16
  81 0032 5A62     		str	r2, [r3, #36]
  82              	.LBB16:
  83              	.LBB17:
  84              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 677:src/sys/devices.h **** __declare_device_control(SPI4,APB2,13)
 678:src/sys/devices.h **** __declare_device_control(SPI1,APB2,12)
 679:src/sys/devices.h **** __declare_device_control(SDMMC,APB2,11)
 680:src/sys/devices.h **** __declare_device_control(ADC3,APB2,8)
 681:src/sys/devices.h **** __declare_device_control(ADC2,APB2,8)
 682:src/sys/devices.h **** __declare_device_control(ADC1,APB2,8)
 683:src/sys/devices.h **** __declare_device_control(USART6,APB2,5)
 684:src/sys/devices.h **** __declare_device_control(USART1,APB2,4)
 685:src/sys/devices.h **** __declare_device_control(TIM8,APB2,1)
 686:src/sys/devices.h **** __declare_device_control(TIM1,APB2,0)
 687:src/sys/devices.h **** 
 688:src/sys/devices.h **** __declare_device_control(DAC,APB1,29)
 689:src/sys/devices.h **** __declare_device_control(PWR,APB1,28)
 690:src/sys/devices.h **** __declare_device_control(HDMI_CEC,APB1,27)
 691:src/sys/devices.h **** __declare_device_control(CAN2,APB1,26)
 692:src/sys/devices.h **** __declare_device_control(CAN1,APB1,25)
 693:src/sys/devices.h **** __declare_device_control(FMPI2C1,APB1,24)
 694:src/sys/devices.h **** __declare_device_control(I2C3,APB1,23)
 695:src/sys/devices.h **** __declare_device_control(I2C2,APB1,22)
 696:src/sys/devices.h **** __declare_device_control(I2C1,APB1,21)
 697:src/sys/devices.h **** __declare_device_control(UART5,APB1,20)
 698:src/sys/devices.h **** __declare_device_control(UART4,APB1,19)
 699:src/sys/devices.h **** __declare_device_control(USART3,APB1,18)
 700:src/sys/devices.h **** __declare_device_control(USART2,APB1,17)
 701:src/sys/devices.h **** __declare_device_control(SPDIF_RX,APB1,16)
 702:src/sys/devices.h **** __declare_device_control(SPI3_I2S3,APB1,15)
 703:src/sys/devices.h **** __declare_device_control(SPI2_I2S2,APB1,14)
 704:src/sys/devices.h **** __declare_device_control(WWDG,APB1,11)
 705:src/sys/devices.h **** __declare_device_control(TIM14,APB1,8)
 706:src/sys/devices.h **** __declare_device_control(TIM13,APB1,7)
 707:src/sys/devices.h **** __declare_device_control(TIM12,APB1,6)
 708:src/sys/devices.h **** __declare_device_control(TIM7,APB1,5)
 709:src/sys/devices.h **** __declare_device_control(TIM6,APB1,4)
 710:src/sys/devices.h **** __declare_device_control(TIM5,APB1,3)
 711:src/sys/devices.h **** __declare_device_control(TIM4,APB1,2)
 712:src/sys/devices.h **** __declare_device_control(TIM3,APB1,1)
 713:src/sys/devices.h **** __declare_device_control(TIM2,APB1,0)
  85              		.loc 2 713 0
  86 0034 134A     		ldr	r2, .L5+4
  87 0036 136C     		ldr	r3, [r2, #64]
  88 0038 43F00103 		orr	r3, r3, #1
  89 003c 1364     		str	r3, [r2, #64]
  90              	.LBB18:
  91              	.LBB19:
  92              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  93              		.loc 3 428 0
  94              	@ 428 "src/sys/cmsis_gcc.h" 1
  95 003e BFF34F8F 		dsb 0xF
  96              	@ 0 "" 2
  97              		.thumb
  98              	.LBE19:
  99              	.LBE18:
 100              	.LBE17:
 101              	.LBE16:
  42:src/fonctions.c **** 	
  43:src/fonctions.c **** 	enable_TIM2();
  44:src/fonctions.c **** 	/* Init Timer 2 registre CR1*/
  45:src/fonctions.c **** 	TIM2.CR1|=0x81;
 102              		.loc 1 45 0
 103 0042 114C     		ldr	r4, .L5+8
 104 0044 2368     		ldr	r3, [r4]
 105 0046 43F08103 		orr	r3, r3, #129
 106 004a 2360     		str	r3, [r4]
  46:src/fonctions.c **** 	
  47:src/fonctions.c **** 	/* Init Timer 2 registre PSC (prescaler) pour avoir 100kHz */
  48:src/fonctions.c **** 	TIM2.PSC=get_APB1TIMCLK() / divclk;
 107              		.loc 1 48 0
 108 004c FFF7FEFF 		bl	get_APB1TIMCLK
 109              	.LVL2:
 110 0050 0E4B     		ldr	r3, .L5+12
 111 0052 1B68     		ldr	r3, [r3]
 112 0054 B0FBF3F0 		udiv	r0, r0, r3
 113 0058 A062     		str	r0, [r4, #40]
 114              	.LVL3:
  49:src/fonctions.c **** 	
  50:src/fonctions.c **** 	/*Periode PWM, ARR_freq(freq_note)*/
  51:src/fonctions.c **** 	TIM2.ARR=ARR_Freq(1);
 115              		.loc 1 51 0
 116 005a E362     		str	r3, [r4, #44]
  52:src/fonctions.c **** 	
  53:src/fonctions.c **** 	/*Rapport cyclique*/
  54:src/fonctions.c **** 	/*TIM2.CCR2=4;*/
  55:src/fonctions.c **** 	
  56:src/fonctions.c **** 	/*PWM mode 1*/	
  57:src/fonctions.c **** 	TIM2.CCMR1 &= ~(1<<12);	
 117              		.loc 1 57 0
 118 005c A369     		ldr	r3, [r4, #24]
 119 005e 23F48053 		bic	r3, r3, #4096
 120 0062 A361     		str	r3, [r4, #24]
  58:src/fonctions.c **** 	TIM2.CCMR1 |= (13<<11);
 121              		.loc 1 58 0
 122 0064 A369     		ldr	r3, [r4, #24]
 123 0066 43F4D043 		orr	r3, r3, #26624
 124 006a A361     		str	r3, [r4, #24]
  59:src/fonctions.c **** 	
  60:src/fonctions.c **** 	/*CC2E output*/
  61:src/fonctions.c **** 	TIM2.CCER |= 0x10;
 125              		.loc 1 61 0
 126 006c 236A     		ldr	r3, [r4, #32]
 127 006e 43F01003 		orr	r3, r3, #16
 128 0072 2362     		str	r3, [r4, #32]
  62:src/fonctions.c **** 	
  63:src/fonctions.c **** 	/*Demarrage du timer*/
  64:src/fonctions.c **** 	TIM2.EGR |= 1;
 129              		.loc 1 64 0
 130 0074 6369     		ldr	r3, [r4, #20]
 131 0076 43F00103 		orr	r3, r3, #1
 132 007a 6361     		str	r3, [r4, #20]
 133 007c 10BD     		pop	{r4, pc}
 134              	.L6:
 135 007e 00BF     		.align	2
 136              	.L5:
 137 0080 00000000 		.word	GPIOB
 138 0084 00000000 		.word	RCC
 139 0088 00000000 		.word	TIM2
 140 008c 00000000 		.word	.LANCHOR0
 141              		.cfi_endproc
 142              	.LFE393:
 143              		.size	init_timer, .-init_timer
 144              		.align	1
 145              		.global	configuration_potentiometre
 146              		.thumb
 147              		.thumb_func
 148              		.type	configuration_potentiometre, %function
 149              	configuration_potentiometre:
 150              	.LFB394:
  65:src/fonctions.c **** }
  66:src/fonctions.c **** 
  67:src/fonctions.c **** /*Reglage du potentiometre en entree et du convertisseur*/
  68:src/fonctions.c **** void configuration_potentiometre()
  69:src/fonctions.c **** {
 151              		.loc 1 69 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
  70:src/fonctions.c **** 	GPIOB.MODER &=0x0;
 155              		.loc 1 70 0
 156 0090 0F4B     		ldr	r3, .L8
 157 0092 1A68     		ldr	r2, [r3]
 158 0094 0022     		movs	r2, #0
  69:src/fonctions.c **** 	GPIOB.MODER &=0x0;
 159              		.loc 1 69 0
 160 0096 10B5     		push	{r4, lr}
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
 164              		.loc 1 70 0
 165 0098 1A60     		str	r2, [r3]
  71:src/fonctions.c **** 	GPIOB.MODER |=0x3;
 166              		.loc 1 71 0
 167 009a 1A68     		ldr	r2, [r3]
 168 009c 42F00302 		orr	r2, r2, #3
 169 00a0 1A60     		str	r2, [r3]
 170              	.LBB20:
 171              	.LBB21:
 682:src/sys/devices.h **** __declare_device_control(USART6,APB2,5)
 172              		.loc 2 682 0
 173 00a2 0C4A     		ldr	r2, .L8+4
 174 00a4 536C     		ldr	r3, [r2, #68]
 175 00a6 43F48073 		orr	r3, r3, #256
 176 00aa 5364     		str	r3, [r2, #68]
 177              	.LBB22:
 178              	.LBB23:
 179              		.loc 3 428 0
 180              	@ 428 "src/sys/cmsis_gcc.h" 1
 181 00ac BFF34F8F 		dsb 0xF
 182              	@ 0 "" 2
 183              		.thumb
 184              	.LBE23:
 185              	.LBE22:
 186              	.LBE21:
 187              	.LBE20:
  72:src/fonctions.c **** 	enable_ADC1();
  73:src/fonctions.c **** 	ADC_set_prediv(1);
  74:src/fonctions.c **** 	ADC_set_sampling_time(&ADC1,8,7);
 188              		.loc 1 74 0
 189 00b0 094C     		ldr	r4, .L8+8
  73:src/fonctions.c **** 	ADC_set_sampling_time(&ADC1,8,7);
 190              		.loc 1 73 0
 191 00b2 0120     		movs	r0, #1
 192 00b4 FFF7FEFF 		bl	ADC_set_prediv
 193              	.LVL4:
 194              		.loc 1 74 0
 195 00b8 2046     		mov	r0, r4
 196 00ba 0821     		movs	r1, #8
 197 00bc 0722     		movs	r2, #7
 198 00be FFF7FEFF 		bl	ADC_set_sampling_time
 199              	.LVL5:
  75:src/fonctions.c **** 	ADC_init_single_channel(&ADC1,8);
 200              		.loc 1 75 0
 201 00c2 2046     		mov	r0, r4
 202 00c4 0821     		movs	r1, #8
  76:src/fonctions.c **** }
 203              		.loc 1 76 0
 204 00c6 BDE81040 		pop	{r4, lr}
 205              		.cfi_restore 14
 206              		.cfi_restore 4
 207              		.cfi_def_cfa_offset 0
  75:src/fonctions.c **** 	ADC_init_single_channel(&ADC1,8);
 208              		.loc 1 75 0
 209 00ca FFF7FEBF 		b	ADC_init_single_channel
 210              	.LVL6:
 211              	.L9:
 212 00ce 00BF     		.align	2
 213              	.L8:
 214 00d0 00000000 		.word	GPIOB
 215 00d4 00000000 		.word	RCC
 216 00d8 00000000 		.word	ADC1
 217              		.cfi_endproc
 218              	.LFE394:
 219              		.size	configuration_potentiometre, .-configuration_potentiometre
 220              		.align	1
 221              		.global	mesure_potentiometre
 222              		.thumb
 223              		.thumb_func
 224              		.type	mesure_potentiometre, %function
 225              	mesure_potentiometre:
 226              	.LFB395:
  77:src/fonctions.c **** 
  78:src/fonctions.c **** /*Conversion de la valeur du potentiometre*/
  79:src/fonctions.c **** uint32_t mesure_potentiometre()
  80:src/fonctions.c **** {
 227              		.loc 1 80 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
  81:src/fonctions.c **** 	return ADC_convert_single_channel(&ADC1);
 232              		.loc 1 81 0
 233 00dc 0148     		ldr	r0, .L11
 234 00de FFF7FEBF 		b	ADC_convert_single_channel
 235              	.LVL7:
 236              	.L12:
 237 00e2 00BF     		.align	2
 238              	.L11:
 239 00e4 00000000 		.word	ADC1
 240              		.cfi_endproc
 241              	.LFE395:
 242              		.size	mesure_potentiometre, .-mesure_potentiometre
 243              		.align	1
 244              		.global	init_switchs
 245              		.thumb
 246              		.thumb_func
 247              		.type	init_switchs, %function
 248              	init_switchs:
 249              	.LFB396:
  82:src/fonctions.c **** }
  83:src/fonctions.c **** 
  84:src/fonctions.c **** /*Initialisation de la barre de 4 switchs - PB3,4,5,6*/
  85:src/fonctions.c **** void init_switchs(){
 250              		.loc 1 85 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
  86:src/fonctions.c **** 	GPIOB.MODER &= ~ 0x03fc0;	/*input*/
 255              		.loc 1 86 0
 256 00e8 044B     		ldr	r3, .L14
 257 00ea 1A68     		ldr	r2, [r3]
 258 00ec 22F47F52 		bic	r2, r2, #16320
 259 00f0 1A60     		str	r2, [r3]
  87:src/fonctions.c **** 	GPIOB.PUPDR &= ~ 0x03fc0;	/*No pull up/down*/
 260              		.loc 1 87 0
 261 00f2 DA68     		ldr	r2, [r3, #12]
 262 00f4 22F47F52 		bic	r2, r2, #16320
 263 00f8 DA60     		str	r2, [r3, #12]
 264 00fa 7047     		bx	lr
 265              	.L15:
 266              		.align	2
 267              	.L14:
 268 00fc 00000000 		.word	GPIOB
 269              		.cfi_endproc
 270              	.LFE396:
 271              		.size	init_switchs, .-init_switchs
 272              		.align	1
 273              		.global	select_melodie
 274              		.thumb
 275              		.thumb_func
 276              		.type	select_melodie, %function
 277              	select_melodie:
 278              	.LFB397:
  88:src/fonctions.c **** }
  89:src/fonctions.c **** 
  90:src/fonctions.c **** /*Selection de la melodie à jouer*/
  91:src/fonctions.c **** /*16 cas possible, de 0 à 15*/
  92:src/fonctions.c **** void select_melodie(){
 279              		.loc 1 92 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
  93:src/fonctions.c **** 	uint8_t val;
  94:src/fonctions.c **** 	val = (GPIOB.IDR & 0x038) >> 3;	/*lecture de l'etat des 3 switchs de selection*/
 284              		.loc 1 94 0
 285 0100 194B     		ldr	r3, .L30
  95:src/fonctions.c **** 	modeS = (GPIOB.IDR & 0x040) >> 6;	/*lecture du switch 0 :mode infini / 1 : sommeil*/
 286              		.loc 1 95 0
 287 0102 1A4A     		ldr	r2, .L30+4
  94:src/fonctions.c **** 	modeS = (GPIOB.IDR & 0x040) >> 6;	/*lecture du switch 0 :mode infini / 1 : sommeil*/
 288              		.loc 1 94 0
 289 0104 1969     		ldr	r1, [r3, #16]
 290              	.LVL8:
 291              		.loc 1 95 0
 292 0106 1B69     		ldr	r3, [r3, #16]
  94:src/fonctions.c **** 	modeS = (GPIOB.IDR & 0x040) >> 6;	/*lecture du switch 0 :mode infini / 1 : sommeil*/
 293              		.loc 1 94 0
 294 0108 C1F3C201 		ubfx	r1, r1, #3, #3
 295              	.LVL9:
 296              		.loc 1 95 0
 297 010c C3F38013 		ubfx	r3, r3, #6, #1
  96:src/fonctions.c **** 	switch(val){
 298              		.loc 1 96 0
 299 0110 0139     		subs	r1, r1, #1
  95:src/fonctions.c **** 	modeS = (GPIOB.IDR & 0x040) >> 6;	/*lecture du switch 0 :mode infini / 1 : sommeil*/
 300              		.loc 1 95 0
 301 0112 1370     		strb	r3, [r2]
 302 0114 164A     		ldr	r2, .L30+8
 303 0116 174B     		ldr	r3, .L30+12
 304              		.loc 1 96 0
 305 0118 0629     		cmp	r1, #6
 306 011a 05D8     		bhi	.L17
 307 011c DFE801F0 		tbb	[pc, r1]
 308              	.L19:
 309 0120 08       		.byte	(.L18-.L19)/2
 310 0121 0C       		.byte	(.L20-.L19)/2
 311 0122 10       		.byte	(.L21-.L19)/2
 312 0123 14       		.byte	(.L22-.L19)/2
 313 0124 18       		.byte	(.L23-.L19)/2
 314 0125 1A       		.byte	(.L24-.L19)/2
 315 0126 1E       		.byte	(.L25-.L19)/2
 316 0127 00       		.p2align 1
 317              	.L17:
  97:src/fonctions.c **** 		case 0 :
  98:src/fonctions.c **** 			ptN_melodie = &clair[0][0];
 318              		.loc 1 98 0
 319 0128 1349     		ldr	r1, .L30+16
 320 012a 1160     		str	r1, [r2]
  99:src/fonctions.c **** 			ptD_melodie = &clair[1][0];
 321              		.loc 1 99 0
 322 012c 5C31     		adds	r1, r1, #92
 323 012e 18E0     		b	.L27
 324              	.L18:
 100:src/fonctions.c **** 			break;
 101:src/fonctions.c **** 		case 1 :
 102:src/fonctions.c **** 			ptN_melodie = &berceuse[0][0];
 325              		.loc 1 102 0
 326 0130 1249     		ldr	r1, .L30+20
 327 0132 1160     		str	r1, [r2]
 103:src/fonctions.c **** 			ptD_melodie = &berceuse[1][0];
 328              		.loc 1 103 0
 329 0134 6E31     		adds	r1, r1, #110
 330 0136 14E0     		b	.L27
 331              	.L20:
 104:src/fonctions.c **** 			break;
 105:src/fonctions.c **** 		case 2:
 106:src/fonctions.c **** 			ptN_melodie = &colas[0][0];
 332              		.loc 1 106 0
 333 0138 1149     		ldr	r1, .L30+24
 334 013a 1160     		str	r1, [r2]
 107:src/fonctions.c **** 			ptD_melodie = &colas[1][0];
 335              		.loc 1 107 0
 336 013c 4E31     		adds	r1, r1, #78
 337 013e 10E0     		b	.L27
 338              	.L21:
 108:src/fonctions.c **** 			break;
 109:src/fonctions.c **** 		case 3:
 110:src/fonctions.c **** 			ptN_melodie = &noel[0][0];
 339              		.loc 1 110 0
 340 0140 1049     		ldr	r1, .L30+28
 341 0142 1160     		str	r1, [r2]
 111:src/fonctions.c **** 			ptD_melodie = &noel[1][0];
 342              		.loc 1 111 0
 343 0144 9A31     		adds	r1, r1, #154
 344 0146 0CE0     		b	.L27
 345              	.L22:
 112:src/fonctions.c **** 			break;
 113:src/fonctions.c **** 		case 4:
 114:src/fonctions.c **** 			ptN_melodie = &salv[0][0];
 346              		.loc 1 114 0
 347 0148 0F49     		ldr	r1, .L30+32
 348 014a 1160     		str	r1, [r2]
 115:src/fonctions.c **** 			ptD_melodie = &salv[1][0];
 349              		.loc 1 115 0
 350 014c 3E31     		adds	r1, r1, #62
 351 014e 08E0     		b	.L27
 352              	.L23:
 116:src/fonctions.c **** 			break;
 117:src/fonctions.c **** 		case 5:
 118:src/fonctions.c **** 			ptN_melodie = &marionette[0][0];
 353              		.loc 1 118 0
 354 0150 0E49     		ldr	r1, .L30+36
 355 0152 00E0     		b	.L28
 356              	.L24:
 119:src/fonctions.c **** 			ptD_melodie = &marionette[1][0];
 120:src/fonctions.c **** 			break;
 121:src/fonctions.c **** 		case 6:
 122:src/fonctions.c **** 			ptN_melodie = &dodo[0][0];
 357              		.loc 1 122 0
 358 0154 0E49     		ldr	r1, .L30+40
 359              	.L28:
 360 0156 1160     		str	r1, [r2]
 123:src/fonctions.c **** 			ptD_melodie = &dodo[1][0];
 361              		.loc 1 123 0
 362 0158 3631     		adds	r1, r1, #54
 363 015a 02E0     		b	.L27
 364              	.L25:
 124:src/fonctions.c **** 			break;
 125:src/fonctions.c **** 		case 7:
 126:src/fonctions.c **** 			ptN_melodie = &jacques[0][0];
 365              		.loc 1 126 0
 366 015c 0D49     		ldr	r1, .L30+44
 367 015e 1160     		str	r1, [r2]
 127:src/fonctions.c **** 			ptD_melodie = &jacques[1][0];
 368              		.loc 1 127 0
 369 0160 4431     		adds	r1, r1, #68
 370              	.L27:
 371 0162 1960     		str	r1, [r3]
 372 0164 7047     		bx	lr
 373              	.L31:
 374 0166 00BF     		.align	2
 375              	.L30:
 376 0168 00000000 		.word	GPIOB
 377 016c 00000000 		.word	modeS
 378 0170 00000000 		.word	ptN_melodie
 379 0174 00000000 		.word	ptD_melodie
 380 0178 00000000 		.word	clair
 381 017c 00000000 		.word	berceuse
 382 0180 00000000 		.word	colas
 383 0184 00000000 		.word	noel
 384 0188 00000000 		.word	salv
 385 018c 00000000 		.word	marionette
 386 0190 00000000 		.word	dodo
 387 0194 00000000 		.word	jacques
 388              		.cfi_endproc
 389              	.LFE397:
 390              		.size	select_melodie, .-select_melodie
 391              		.align	1
 392              		.global	volume
 393              		.thumb
 394              		.thumb_func
 395              		.type	volume, %function
 396              	volume:
 397              	.LFB398:
 128:src/fonctions.c **** 			break;
 129:src/fonctions.c **** 			
 130:src/fonctions.c **** 		default :
 131:src/fonctions.c **** 			ptN_melodie = &clair[0][0];
 132:src/fonctions.c **** 			ptD_melodie = &clair[1][0];
 133:src/fonctions.c **** 			break;
 134:src/fonctions.c **** 	}
 135:src/fonctions.c **** }
 136:src/fonctions.c **** 
 137:src/fonctions.c **** /*Reglage du volume et affichage sur le carré de LED*/
 138:src/fonctions.c **** void volume(){
 398              		.loc 1 138 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0198 08B5     		push	{r3, lr}
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 3, -8
 405              		.cfi_offset 14, -4
 139:src/fonctions.c **** 	uint32_t res;
 140:src/fonctions.c **** 	res=mesure_potentiometre();		/*mesure de la position du potentiometre [0,4096]*/
 406              		.loc 1 140 0
 407 019a FFF7FEFF 		bl	mesure_potentiometre
 408              	.LVL10:
 141:src/fonctions.c **** 	res=(res/210)%20;	/*div res par 210 pour avoir au max 4096/210 = 19 / Rapport cyclique de 0 à 20%
 409              		.loc 1 141 0
 410 019e 1422     		movs	r2, #20
 411 01a0 D223     		movs	r3, #210
 412 01a2 B0FBF3F0 		udiv	r0, r0, r3
 413              	.LVL11:
 414 01a6 B0FBF2F3 		udiv	r3, r0, r2
 415 01aa 02FB1300 		mls	r0, r2, r3, r0
 416              	.LVL12:
 142:src/fonctions.c **** 	TIM2.CCR2=res;
 417              		.loc 1 142 0
 418 01ae 1E4B     		ldr	r3, .L41
 419 01b0 9863     		str	r0, [r3, #56]
 143:src/fonctions.c **** 	
 144:src/fonctions.c **** 	/* carré de LED */
 145:src/fonctions.c **** 	switch(res)
 420              		.loc 1 145 0
 421 01b2 0138     		subs	r0, r0, #1
 422              	.LVL13:
 423 01b4 1D4B     		ldr	r3, .L41+4
 424              	.LVL14:
 425 01b6 1328     		cmp	r0, #19
 426 01b8 0BD8     		bhi	.L33
 427 01ba DFE800F0 		tbb	[pc, r0]
 428              	.L35:
 429 01be 0F       		.byte	(.L34-.L35)/2
 430 01bf 0F       		.byte	(.L34-.L35)/2
 431 01c0 0F       		.byte	(.L34-.L35)/2
 432 01c1 0F       		.byte	(.L34-.L35)/2
 433 01c2 0F       		.byte	(.L34-.L35)/2
 434 01c3 18       		.byte	(.L36-.L35)/2
 435 01c4 18       		.byte	(.L36-.L35)/2
 436 01c5 18       		.byte	(.L36-.L35)/2
 437 01c6 18       		.byte	(.L36-.L35)/2
 438 01c7 18       		.byte	(.L36-.L35)/2
 439 01c8 21       		.byte	(.L37-.L35)/2
 440 01c9 21       		.byte	(.L37-.L35)/2
 441 01ca 21       		.byte	(.L37-.L35)/2
 442 01cb 21       		.byte	(.L37-.L35)/2
 443 01cc 21       		.byte	(.L37-.L35)/2
 444 01cd 2A       		.byte	(.L38-.L35)/2
 445 01ce 2A       		.byte	(.L38-.L35)/2
 446 01cf 2A       		.byte	(.L38-.L35)/2
 447 01d0 2A       		.byte	(.L38-.L35)/2
 448 01d1 2A       		.byte	(.L38-.L35)/2
 449              		.p2align 1
 450              	.L33:
 146:src/fonctions.c **** 		{
 147:src/fonctions.c **** 		case 0:											/*4 LEDs OFF*/
 148:src/fonctions.c **** 			GPIOA.ODR&=0xFF0F;
 451              		.loc 1 148 0
 452 01d2 5969     		ldr	r1, [r3, #20]
 453 01d4 4FF60F72 		movw	r2, #65295
 454 01d8 0A40     		ands	r2, r2, r1
 455 01da 22E0     		b	.L40
 456              	.L34:
 149:src/fonctions.c **** 			break;
 150:src/fonctions.c **** 		case 1: case 2: case 3: case 4: case 5:			/*[1,5] 1 LED ON*/
 151:src/fonctions.c **** 			GPIOA.ODR&=0xFF0F;
 457              		.loc 1 151 0
 458 01dc 5969     		ldr	r1, [r3, #20]
 459 01de 4FF60F72 		movw	r2, #65295
 460 01e2 0A40     		ands	r2, r2, r1
 461 01e4 5A61     		str	r2, [r3, #20]
 462              	.LVL15:
 152:src/fonctions.c **** 			GPIOA.ODR|=0x0010;
 463              		.loc 1 152 0
 464 01e6 5A69     		ldr	r2, [r3, #20]
 465 01e8 42F01002 		orr	r2, r2, #16
 466 01ec 19E0     		b	.L40
 467              	.LVL16:
 468              	.L36:
 153:src/fonctions.c **** 			break;
 154:src/fonctions.c **** 		case 6: case 7: case 8: case 9: case 10:		/*[6,10] 2 LEDs ON*/
 155:src/fonctions.c **** 			GPIOA.ODR&=0xFF0F;
 469              		.loc 1 155 0
 470 01ee 5969     		ldr	r1, [r3, #20]
 471 01f0 4FF60F72 		movw	r2, #65295
 472 01f4 0A40     		ands	r2, r2, r1
 473 01f6 5A61     		str	r2, [r3, #20]
 474              	.LVL17:
 156:src/fonctions.c **** 			GPIOA.ODR|=0x0030;
 475              		.loc 1 156 0
 476 01f8 5A69     		ldr	r2, [r3, #20]
 477 01fa 42F03002 		orr	r2, r2, #48
 478 01fe 10E0     		b	.L40
 479              	.LVL18:
 480              	.L37:
 157:src/fonctions.c **** 			break;
 158:src/fonctions.c ****  		case 11: case 12: case 13: case 14: case 15:	/*[11,15] 3 LEDs ON*/
 159:src/fonctions.c **** 			GPIOA.ODR&=0xFF0F;
 481              		.loc 1 159 0
 482 0200 5969     		ldr	r1, [r3, #20]
 483 0202 4FF60F72 		movw	r2, #65295
 484 0206 0A40     		ands	r2, r2, r1
 485 0208 5A61     		str	r2, [r3, #20]
 486              	.LVL19:
 160:src/fonctions.c **** 			GPIOA.ODR|=0x0070;
 487              		.loc 1 160 0
 488 020a 5A69     		ldr	r2, [r3, #20]
 489 020c 42F07002 		orr	r2, r2, #112
 490 0210 07E0     		b	.L40
 491              	.LVL20:
 492              	.L38:
 161:src/fonctions.c **** 			break;
 162:src/fonctions.c ****  		case 16: case 17: case 18: case 19: case 20:	/*[15,20] 4 LEDs ON*/
 163:src/fonctions.c **** 			GPIOA.ODR&=0xFF0F;
 493              		.loc 1 163 0
 494 0212 5969     		ldr	r1, [r3, #20]
 495 0214 4FF60F72 		movw	r2, #65295
 496 0218 0A40     		ands	r2, r2, r1
 497 021a 5A61     		str	r2, [r3, #20]
 498              	.LVL21:
 164:src/fonctions.c **** 			GPIOA.ODR|=0x00F0;
 499              		.loc 1 164 0
 500 021c 5A69     		ldr	r2, [r3, #20]
 501 021e 42F0F002 		orr	r2, r2, #240
 502              	.L40:
 503 0222 5A61     		str	r2, [r3, #20]
 504 0224 08BD     		pop	{r3, pc}
 505              	.L42:
 506 0226 00BF     		.align	2
 507              	.L41:
 508 0228 00000000 		.word	TIM2
 509 022c 00000000 		.word	GPIOA
 510              		.cfi_endproc
 511              	.LFE398:
 512              		.size	volume, .-volume
 513              		.comm	modeS,1,1
 514              		.global	divclk
 515              		.comm	ptD_melodie,4,4
 516              		.comm	ptN_melodie,4,4
 517              		.data
 518              		.align	2
 519              		.set	.LANCHOR0,. + 0
 520              		.type	divclk, %object
 521              		.size	divclk, 4
 522              	divclk:
 523 0000 A0860100 		.word	100000
 524              		.text
 525              	.Letext0:
 526              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 527              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 528              		.file 6 "src/sys/clock.h"
 529              		.file 7 "src/adc.h"
 530              		.section	.debug_info,"",%progbits
 531              	.Ldebug_info0:
 532 0000 BB080000 		.4byte	0x8bb
 533 0004 0400     		.2byte	0x4
 534 0006 00000000 		.4byte	.Ldebug_abbrev0
 535 000a 04       		.byte	0x4
 536 000b 01       		.uleb128 0x1
 537 000c B3040000 		.4byte	.LASF115
 538 0010 01       		.byte	0x1
 539 0011 5A020000 		.4byte	.LASF116
 540 0015 DA030000 		.4byte	.LASF117
 541 0019 00000000 		.4byte	.Ltext0
 542 001d 30020000 		.4byte	.Letext0-.Ltext0
 543 0021 00000000 		.4byte	.Ldebug_line0
 544 0025 02       		.uleb128 0x2
 545 0026 01       		.byte	0x1
 546 0027 06       		.byte	0x6
 547 0028 3F040000 		.4byte	.LASF0
 548 002c 03       		.uleb128 0x3
 549 002d 40030000 		.4byte	.LASF3
 550 0031 04       		.byte	0x4
 551 0032 1D       		.byte	0x1d
 552 0033 37000000 		.4byte	0x37
 553 0037 02       		.uleb128 0x2
 554 0038 01       		.byte	0x1
 555 0039 08       		.byte	0x8
 556 003a BC030000 		.4byte	.LASF1
 557 003e 02       		.uleb128 0x2
 558 003f 02       		.byte	0x2
 559 0040 05       		.byte	0x5
 560 0041 E3020000 		.4byte	.LASF2
 561 0045 03       		.uleb128 0x3
 562 0046 20010000 		.4byte	.LASF4
 563 004a 04       		.byte	0x4
 564 004b 2B       		.byte	0x2b
 565 004c 50000000 		.4byte	0x50
 566 0050 02       		.uleb128 0x2
 567 0051 02       		.byte	0x2
 568 0052 07       		.byte	0x7
 569 0053 5A040000 		.4byte	.LASF5
 570 0057 02       		.uleb128 0x2
 571 0058 04       		.byte	0x4
 572 0059 05       		.byte	0x5
 573 005a ED020000 		.4byte	.LASF6
 574 005e 03       		.uleb128 0x3
 575 005f CA030000 		.4byte	.LASF7
 576 0063 04       		.byte	0x4
 577 0064 41       		.byte	0x41
 578 0065 69000000 		.4byte	0x69
 579 0069 02       		.uleb128 0x2
 580 006a 04       		.byte	0x4
 581 006b 07       		.byte	0x7
 582 006c 74030000 		.4byte	.LASF8
 583 0070 02       		.uleb128 0x2
 584 0071 08       		.byte	0x8
 585 0072 05       		.byte	0x5
 586 0073 ED010000 		.4byte	.LASF9
 587 0077 02       		.uleb128 0x2
 588 0078 08       		.byte	0x8
 589 0079 07       		.byte	0x7
 590 007a 09010000 		.4byte	.LASF10
 591 007e 04       		.uleb128 0x4
 592 007f 04       		.byte	0x4
 593 0080 05       		.byte	0x5
 594 0081 696E7400 		.ascii	"int\000"
 595 0085 02       		.uleb128 0x2
 596 0086 04       		.byte	0x4
 597 0087 07       		.byte	0x7
 598 0088 55000000 		.4byte	.LASF11
 599 008c 03       		.uleb128 0x3
 600 008d CC010000 		.4byte	.LASF12
 601 0091 05       		.byte	0x5
 602 0092 14       		.byte	0x14
 603 0093 2C000000 		.4byte	0x2c
 604 0097 03       		.uleb128 0x3
 605 0098 93020000 		.4byte	.LASF13
 606 009c 05       		.byte	0x5
 607 009d 1A       		.byte	0x1a
 608 009e 45000000 		.4byte	0x45
 609 00a2 03       		.uleb128 0x3
 610 00a3 9E000000 		.4byte	.LASF14
 611 00a7 05       		.byte	0x5
 612 00a8 20       		.byte	0x20
 613 00a9 5E000000 		.4byte	0x5e
 614 00ad 02       		.uleb128 0x2
 615 00ae 04       		.byte	0x4
 616 00af 07       		.byte	0x7
 617 00b0 6B030000 		.4byte	.LASF15
 618 00b4 05       		.uleb128 0x5
 619 00b5 B3000000 		.4byte	.LASF51
 620 00b9 98       		.byte	0x98
 621 00ba 02       		.byte	0x2
 622 00bb 68       		.byte	0x68
 623 00bc 88020000 		.4byte	0x288
 624 00c0 06       		.uleb128 0x6
 625 00c1 435200   		.ascii	"CR\000"
 626 00c4 02       		.byte	0x2
 627 00c5 69       		.byte	0x69
 628 00c6 A2000000 		.4byte	0xa2
 629 00ca 00       		.byte	0
 630 00cb 07       		.uleb128 0x7
 631 00cc 59030000 		.4byte	.LASF16
 632 00d0 02       		.byte	0x2
 633 00d1 6A       		.byte	0x6a
 634 00d2 A2000000 		.4byte	0xa2
 635 00d6 04       		.byte	0x4
 636 00d7 07       		.uleb128 0x7
 637 00d8 2F030000 		.4byte	.LASF17
 638 00dc 02       		.byte	0x2
 639 00dd 6B       		.byte	0x6b
 640 00de A2000000 		.4byte	0xa2
 641 00e2 08       		.byte	0x8
 642 00e3 06       		.uleb128 0x6
 643 00e4 43495200 		.ascii	"CIR\000"
 644 00e8 02       		.byte	0x2
 645 00e9 6C       		.byte	0x6c
 646 00ea A2000000 		.4byte	0xa2
 647 00ee 0C       		.byte	0xc
 648 00ef 07       		.uleb128 0x7
 649 00f0 48050000 		.4byte	.LASF18
 650 00f4 02       		.byte	0x2
 651 00f5 6D       		.byte	0x6d
 652 00f6 A2000000 		.4byte	0xa2
 653 00fa 10       		.byte	0x10
 654 00fb 07       		.uleb128 0x7
 655 00fc 9C020000 		.4byte	.LASF19
 656 0100 02       		.byte	0x2
 657 0101 6E       		.byte	0x6e
 658 0102 A2000000 		.4byte	0xa2
 659 0106 14       		.byte	0x14
 660 0107 07       		.uleb128 0x7
 661 0108 57010000 		.4byte	.LASF20
 662 010c 02       		.byte	0x2
 663 010d 6F       		.byte	0x6f
 664 010e A2000000 		.4byte	0xa2
 665 0112 18       		.byte	0x18
 666 0113 07       		.uleb128 0x7
 667 0114 6D010000 		.4byte	.LASF21
 668 0118 02       		.byte	0x2
 669 0119 70       		.byte	0x70
 670 011a A2000000 		.4byte	0xa2
 671 011e 1C       		.byte	0x1c
 672 011f 07       		.uleb128 0x7
 673 0120 AA010000 		.4byte	.LASF22
 674 0124 02       		.byte	0x2
 675 0125 71       		.byte	0x71
 676 0126 A2000000 		.4byte	0xa2
 677 012a 20       		.byte	0x20
 678 012b 07       		.uleb128 0x7
 679 012c 4C000000 		.4byte	.LASF23
 680 0130 02       		.byte	0x2
 681 0131 72       		.byte	0x72
 682 0132 A2000000 		.4byte	0xa2
 683 0136 24       		.byte	0x24
 684 0137 07       		.uleb128 0x7
 685 0138 8F010000 		.4byte	.LASF24
 686 013c 02       		.byte	0x2
 687 013d 73       		.byte	0x73
 688 013e A2000000 		.4byte	0xa2
 689 0142 28       		.byte	0x28
 690 0143 07       		.uleb128 0x7
 691 0144 BD010000 		.4byte	.LASF25
 692 0148 02       		.byte	0x2
 693 0149 74       		.byte	0x74
 694 014a A2000000 		.4byte	0xa2
 695 014e 2C       		.byte	0x2c
 696 014f 07       		.uleb128 0x7
 697 0150 C1000000 		.4byte	.LASF26
 698 0154 02       		.byte	0x2
 699 0155 75       		.byte	0x75
 700 0156 A2000000 		.4byte	0xa2
 701 015a 30       		.byte	0x30
 702 015b 07       		.uleb128 0x7
 703 015c 8B030000 		.4byte	.LASF27
 704 0160 02       		.byte	0x2
 705 0161 76       		.byte	0x76
 706 0162 A2000000 		.4byte	0xa2
 707 0166 34       		.byte	0x34
 708 0167 07       		.uleb128 0x7
 709 0168 87010000 		.4byte	.LASF28
 710 016c 02       		.byte	0x2
 711 016d 77       		.byte	0x77
 712 016e A2000000 		.4byte	0xa2
 713 0172 38       		.byte	0x38
 714 0173 07       		.uleb128 0x7
 715 0174 DE010000 		.4byte	.LASF29
 716 0178 02       		.byte	0x2
 717 0179 78       		.byte	0x78
 718 017a A2000000 		.4byte	0xa2
 719 017e 3C       		.byte	0x3c
 720 017f 07       		.uleb128 0x7
 721 0180 29000000 		.4byte	.LASF30
 722 0184 02       		.byte	0x2
 723 0185 79       		.byte	0x79
 724 0186 A2000000 		.4byte	0xa2
 725 018a 40       		.byte	0x40
 726 018b 07       		.uleb128 0x7
 727 018c 49020000 		.4byte	.LASF31
 728 0190 02       		.byte	0x2
 729 0191 7A       		.byte	0x7a
 730 0192 A2000000 		.4byte	0xa2
 731 0196 44       		.byte	0x44
 732 0197 07       		.uleb128 0x7
 733 0198 0B020000 		.4byte	.LASF32
 734 019c 02       		.byte	0x2
 735 019d 7B       		.byte	0x7b
 736 019e A2000000 		.4byte	0xa2
 737 01a2 48       		.byte	0x48
 738 01a3 07       		.uleb128 0x7
 739 01a4 29020000 		.4byte	.LASF33
 740 01a8 02       		.byte	0x2
 741 01a9 7C       		.byte	0x7c
 742 01aa A2000000 		.4byte	0xa2
 743 01ae 4C       		.byte	0x4c
 744 01af 07       		.uleb128 0x7
 745 01b0 35040000 		.4byte	.LASF34
 746 01b4 02       		.byte	0x2
 747 01b5 7D       		.byte	0x7d
 748 01b6 A2000000 		.4byte	0xa2
 749 01ba 50       		.byte	0x50
 750 01bb 07       		.uleb128 0x7
 751 01bc 7D000000 		.4byte	.LASF35
 752 01c0 02       		.byte	0x2
 753 01c1 7E       		.byte	0x7e
 754 01c2 A2000000 		.4byte	0xa2
 755 01c6 54       		.byte	0x54
 756 01c7 07       		.uleb128 0x7
 757 01c8 61030000 		.4byte	.LASF36
 758 01cc 02       		.byte	0x2
 759 01cd 7F       		.byte	0x7f
 760 01ce A2000000 		.4byte	0xa2
 761 01d2 58       		.byte	0x58
 762 01d3 07       		.uleb128 0x7
 763 01d4 78020000 		.4byte	.LASF37
 764 01d8 02       		.byte	0x2
 765 01d9 80       		.byte	0x80
 766 01da A2000000 		.4byte	0xa2
 767 01de 5C       		.byte	0x5c
 768 01df 07       		.uleb128 0x7
 769 01e0 01020000 		.4byte	.LASF38
 770 01e4 02       		.byte	0x2
 771 01e5 81       		.byte	0x81
 772 01e6 A2000000 		.4byte	0xa2
 773 01ea 60       		.byte	0x60
 774 01eb 07       		.uleb128 0x7
 775 01ec 42000000 		.4byte	.LASF39
 776 01f0 02       		.byte	0x2
 777 01f1 82       		.byte	0x82
 778 01f2 A2000000 		.4byte	0xa2
 779 01f6 64       		.byte	0x64
 780 01f7 07       		.uleb128 0x7
 781 01f8 A5020000 		.4byte	.LASF40
 782 01fc 02       		.byte	0x2
 783 01fd 83       		.byte	0x83
 784 01fe A2000000 		.4byte	0xa2
 785 0202 68       		.byte	0x68
 786 0203 07       		.uleb128 0x7
 787 0204 F6020000 		.4byte	.LASF41
 788 0208 02       		.byte	0x2
 789 0209 84       		.byte	0x84
 790 020a A2000000 		.4byte	0xa2
 791 020e 6C       		.byte	0x6c
 792 020f 07       		.uleb128 0x7
 793 0210 67000000 		.4byte	.LASF42
 794 0214 02       		.byte	0x2
 795 0215 85       		.byte	0x85
 796 0216 A2000000 		.4byte	0xa2
 797 021a 70       		.byte	0x70
 798 021b 06       		.uleb128 0x6
 799 021c 43535200 		.ascii	"CSR\000"
 800 0220 02       		.byte	0x2
 801 0221 86       		.byte	0x86
 802 0222 A2000000 		.4byte	0xa2
 803 0226 74       		.byte	0x74
 804 0227 07       		.uleb128 0x7
 805 0228 19030000 		.4byte	.LASF43
 806 022c 02       		.byte	0x2
 807 022d 87       		.byte	0x87
 808 022e A2000000 		.4byte	0xa2
 809 0232 78       		.byte	0x78
 810 0233 07       		.uleb128 0x7
 811 0234 4A030000 		.4byte	.LASF44
 812 0238 02       		.byte	0x2
 813 0239 88       		.byte	0x88
 814 023a A2000000 		.4byte	0xa2
 815 023e 7C       		.byte	0x7c
 816 023f 07       		.uleb128 0x7
 817 0240 D7000000 		.4byte	.LASF45
 818 0244 02       		.byte	0x2
 819 0245 89       		.byte	0x89
 820 0246 A2000000 		.4byte	0xa2
 821 024a 80       		.byte	0x80
 822 024b 07       		.uleb128 0x7
 823 024c B1030000 		.4byte	.LASF46
 824 0250 02       		.byte	0x2
 825 0251 8A       		.byte	0x8a
 826 0252 A2000000 		.4byte	0xa2
 827 0256 84       		.byte	0x84
 828 0257 07       		.uleb128 0x7
 829 0258 00000000 		.4byte	.LASF47
 830 025c 02       		.byte	0x2
 831 025d 8B       		.byte	0x8b
 832 025e A2000000 		.4byte	0xa2
 833 0262 88       		.byte	0x88
 834 0263 07       		.uleb128 0x7
 835 0264 1A000000 		.4byte	.LASF48
 836 0268 02       		.byte	0x2
 837 0269 8C       		.byte	0x8c
 838 026a A2000000 		.4byte	0xa2
 839 026e 8C       		.byte	0x8c
 840 026f 07       		.uleb128 0x7
 841 0270 56050000 		.4byte	.LASF49
 842 0274 02       		.byte	0x2
 843 0275 8D       		.byte	0x8d
 844 0276 A2000000 		.4byte	0xa2
 845 027a 90       		.byte	0x90
 846 027b 07       		.uleb128 0x7
 847 027c 51020000 		.4byte	.LASF50
 848 0280 02       		.byte	0x2
 849 0281 8E       		.byte	0x8e
 850 0282 A2000000 		.4byte	0xa2
 851 0286 94       		.byte	0x94
 852 0287 00       		.byte	0
 853 0288 05       		.uleb128 0x5
 854 0289 9A040000 		.4byte	.LASF52
 855 028d 28       		.byte	0x28
 856 028e 02       		.byte	0x2
 857 028f 92       		.byte	0x92
 858 0290 0D030000 		.4byte	0x30d
 859 0294 07       		.uleb128 0x7
 860 0295 2B010000 		.4byte	.LASF53
 861 0299 02       		.byte	0x2
 862 029a 93       		.byte	0x93
 863 029b A2000000 		.4byte	0xa2
 864 029f 00       		.byte	0
 865 02a0 07       		.uleb128 0x7
 866 02a1 28030000 		.4byte	.LASF54
 867 02a5 02       		.byte	0x2
 868 02a6 94       		.byte	0x94
 869 02a7 A2000000 		.4byte	0xa2
 870 02ab 04       		.byte	0x4
 871 02ac 07       		.uleb128 0x7
 872 02ad 70020000 		.4byte	.LASF55
 873 02b1 02       		.byte	0x2
 874 02b2 95       		.byte	0x95
 875 02b3 A2000000 		.4byte	0xa2
 876 02b7 08       		.byte	0x8
 877 02b8 07       		.uleb128 0x7
 878 02b9 A4010000 		.4byte	.LASF56
 879 02bd 02       		.byte	0x2
 880 02be 96       		.byte	0x96
 881 02bf A2000000 		.4byte	0xa2
 882 02c3 0C       		.byte	0xc
 883 02c4 06       		.uleb128 0x6
 884 02c5 49445200 		.ascii	"IDR\000"
 885 02c9 02       		.byte	0x2
 886 02ca 97       		.byte	0x97
 887 02cb A2000000 		.4byte	0xa2
 888 02cf 10       		.byte	0x10
 889 02d0 06       		.uleb128 0x6
 890 02d1 4F445200 		.ascii	"ODR\000"
 891 02d5 02       		.byte	0x2
 892 02d6 98       		.byte	0x98
 893 02d7 A2000000 		.4byte	0xa2
 894 02db 14       		.byte	0x14
 895 02dc 07       		.uleb128 0x7
 896 02dd 3D000000 		.4byte	.LASF57
 897 02e1 02       		.byte	0x2
 898 02e2 99       		.byte	0x99
 899 02e3 A2000000 		.4byte	0xa2
 900 02e7 18       		.byte	0x18
 901 02e8 07       		.uleb128 0x7
 902 02e9 51050000 		.4byte	.LASF58
 903 02ed 02       		.byte	0x2
 904 02ee 9A       		.byte	0x9a
 905 02ef A2000000 		.4byte	0xa2
 906 02f3 1C       		.byte	0x1c
 907 02f4 07       		.uleb128 0x7
 908 02f5 52010000 		.4byte	.LASF59
 909 02f9 02       		.byte	0x2
 910 02fa 9B       		.byte	0x9b
 911 02fb A2000000 		.4byte	0xa2
 912 02ff 20       		.byte	0x20
 913 0300 07       		.uleb128 0x7
 914 0301 4D010000 		.4byte	.LASF60
 915 0305 02       		.byte	0x2
 916 0306 9C       		.byte	0x9c
 917 0307 A2000000 		.4byte	0xa2
 918 030b 24       		.byte	0x24
 919 030c 00       		.byte	0
 920 030d 05       		.uleb128 0x5
 921 030e 17040000 		.4byte	.LASF61
 922 0312 50       		.byte	0x50
 923 0313 02       		.byte	0x2
 924 0314 F8       		.byte	0xf8
 925 0315 15040000 		.4byte	0x415
 926 0319 06       		.uleb128 0x6
 927 031a 535200   		.ascii	"SR\000"
 928 031d 02       		.byte	0x2
 929 031e F9       		.byte	0xf9
 930 031f A2000000 		.4byte	0xa2
 931 0323 00       		.byte	0
 932 0324 06       		.uleb128 0x6
 933 0325 43523100 		.ascii	"CR1\000"
 934 0329 02       		.byte	0x2
 935 032a FA       		.byte	0xfa
 936 032b A2000000 		.4byte	0xa2
 937 032f 04       		.byte	0x4
 938 0330 06       		.uleb128 0x6
 939 0331 43523200 		.ascii	"CR2\000"
 940 0335 02       		.byte	0x2
 941 0336 FB       		.byte	0xfb
 942 0337 A2000000 		.4byte	0xa2
 943 033b 08       		.byte	0x8
 944 033c 07       		.uleb128 0x7
 945 033d 9E010000 		.4byte	.LASF62
 946 0341 02       		.byte	0x2
 947 0342 FC       		.byte	0xfc
 948 0343 A2000000 		.4byte	0xa2
 949 0347 0C       		.byte	0xc
 950 0348 07       		.uleb128 0x7
 951 0349 6A020000 		.4byte	.LASF63
 952 034d 02       		.byte	0x2
 953 034e FD       		.byte	0xfd
 954 034f A2000000 		.4byte	0xa2
 955 0353 10       		.byte	0x10
 956 0354 07       		.uleb128 0x7
 957 0355 82040000 		.4byte	.LASF64
 958 0359 02       		.byte	0x2
 959 035a FE       		.byte	0xfe
 960 035b A2000000 		.4byte	0xa2
 961 035f 14       		.byte	0x14
 962 0360 07       		.uleb128 0x7
 963 0361 88040000 		.4byte	.LASF65
 964 0365 02       		.byte	0x2
 965 0366 FF       		.byte	0xff
 966 0367 A2000000 		.4byte	0xa2
 967 036b 18       		.byte	0x18
 968 036c 08       		.uleb128 0x8
 969 036d 8E040000 		.4byte	.LASF66
 970 0371 02       		.byte	0x2
 971 0372 0001     		.2byte	0x100
 972 0374 A2000000 		.4byte	0xa2
 973 0378 1C       		.byte	0x1c
 974 0379 08       		.uleb128 0x8
 975 037a 94040000 		.4byte	.LASF67
 976 037e 02       		.byte	0x2
 977 037f 0101     		.2byte	0x101
 978 0381 A2000000 		.4byte	0xa2
 979 0385 20       		.byte	0x20
 980 0386 09       		.uleb128 0x9
 981 0387 48545200 		.ascii	"HTR\000"
 982 038b 02       		.byte	0x2
 983 038c 0201     		.2byte	0x102
 984 038e A2000000 		.4byte	0xa2
 985 0392 24       		.byte	0x24
 986 0393 09       		.uleb128 0x9
 987 0394 4C545200 		.ascii	"LTR\000"
 988 0398 02       		.byte	0x2
 989 0399 0301     		.2byte	0x103
 990 039b A2000000 		.4byte	0xa2
 991 039f 28       		.byte	0x28
 992 03a0 08       		.uleb128 0x8
 993 03a1 0B000000 		.4byte	.LASF68
 994 03a5 02       		.byte	0x2
 995 03a6 0401     		.2byte	0x104
 996 03a8 A2000000 		.4byte	0xa2
 997 03ac 2C       		.byte	0x2c
 998 03ad 08       		.uleb128 0x8
 999 03ae 10000000 		.4byte	.LASF69
 1000 03b2 02       		.byte	0x2
 1001 03b3 0501     		.2byte	0x105
 1002 03b5 A2000000 		.4byte	0xa2
 1003 03b9 30       		.byte	0x30
 1004 03ba 08       		.uleb128 0x8
 1005 03bb 15000000 		.4byte	.LASF70
 1006 03bf 02       		.byte	0x2
 1007 03c0 0601     		.2byte	0x106
 1008 03c2 A2000000 		.4byte	0xa2
 1009 03c6 34       		.byte	0x34
 1010 03c7 08       		.uleb128 0x8
 1011 03c8 44020000 		.4byte	.LASF71
 1012 03cc 02       		.byte	0x2
 1013 03cd 0701     		.2byte	0x107
 1014 03cf A2000000 		.4byte	0xa2
 1015 03d3 38       		.byte	0x38
 1016 03d4 08       		.uleb128 0x8
 1017 03d5 CF020000 		.4byte	.LASF72
 1018 03d9 02       		.byte	0x2
 1019 03da 0801     		.2byte	0x108
 1020 03dc A2000000 		.4byte	0xa2
 1021 03e0 3C       		.byte	0x3c
 1022 03e1 08       		.uleb128 0x8
 1023 03e2 D4020000 		.4byte	.LASF73
 1024 03e6 02       		.byte	0x2
 1025 03e7 0901     		.2byte	0x109
 1026 03e9 A2000000 		.4byte	0xa2
 1027 03ed 40       		.byte	0x40
 1028 03ee 08       		.uleb128 0x8
 1029 03ef D9020000 		.4byte	.LASF74
 1030 03f3 02       		.byte	0x2
 1031 03f4 0A01     		.2byte	0x10a
 1032 03f6 A2000000 		.4byte	0xa2
 1033 03fa 44       		.byte	0x44
 1034 03fb 08       		.uleb128 0x8
 1035 03fc DE020000 		.4byte	.LASF75
 1036 0400 02       		.byte	0x2
 1037 0401 0B01     		.2byte	0x10b
 1038 0403 A2000000 		.4byte	0xa2
 1039 0407 48       		.byte	0x48
 1040 0408 09       		.uleb128 0x9
 1041 0409 445200   		.ascii	"DR\000"
 1042 040c 02       		.byte	0x2
 1043 040d 0C01     		.2byte	0x10c
 1044 040f A2000000 		.4byte	0xa2
 1045 0413 4C       		.byte	0x4c
 1046 0414 00       		.byte	0
 1047 0415 0A       		.uleb128 0xa
 1048 0416 1A020000 		.4byte	.LASF76
 1049 041a 54       		.byte	0x54
 1050 041b 02       		.byte	0x2
 1051 041c 3C01     		.2byte	0x13c
 1052 041e 32050000 		.4byte	0x532
 1053 0422 09       		.uleb128 0x9
 1054 0423 43523100 		.ascii	"CR1\000"
 1055 0427 02       		.byte	0x2
 1056 0428 3D01     		.2byte	0x13d
 1057 042a A2000000 		.4byte	0xa2
 1058 042e 00       		.byte	0
 1059 042f 09       		.uleb128 0x9
 1060 0430 43523200 		.ascii	"CR2\000"
 1061 0434 02       		.byte	0x2
 1062 0435 3E01     		.2byte	0x13e
 1063 0437 A2000000 		.4byte	0xa2
 1064 043b 04       		.byte	0x4
 1065 043c 08       		.uleb128 0x8
 1066 043d D4010000 		.4byte	.LASF77
 1067 0441 02       		.byte	0x2
 1068 0442 3F01     		.2byte	0x13f
 1069 0444 A2000000 		.4byte	0xa2
 1070 0448 08       		.byte	0x8
 1071 0449 08       		.uleb128 0x8
 1072 044a 7C010000 		.4byte	.LASF78
 1073 044e 02       		.byte	0x2
 1074 044f 4001     		.2byte	0x140
 1075 0451 A2000000 		.4byte	0xa2
 1076 0455 0C       		.byte	0xc
 1077 0456 09       		.uleb128 0x9
 1078 0457 535200   		.ascii	"SR\000"
 1079 045a 02       		.byte	0x2
 1080 045b 4101     		.2byte	0x141
 1081 045d A2000000 		.4byte	0xa2
 1082 0461 10       		.byte	0x10
 1083 0462 09       		.uleb128 0x9
 1084 0463 45475200 		.ascii	"EGR\000"
 1085 0467 02       		.byte	0x2
 1086 0468 4201     		.2byte	0x142
 1087 046a A2000000 		.4byte	0xa2
 1088 046e 14       		.byte	0x14
 1089 046f 08       		.uleb128 0x8
 1090 0470 E7000000 		.4byte	.LASF79
 1091 0474 02       		.byte	0x2
 1092 0475 4301     		.2byte	0x143
 1093 0477 A2000000 		.4byte	0xa2
 1094 047b 18       		.byte	0x18
 1095 047c 08       		.uleb128 0x8
 1096 047d ED000000 		.4byte	.LASF80
 1097 0481 02       		.byte	0x2
 1098 0482 4401     		.2byte	0x144
 1099 0484 A2000000 		.4byte	0xa2
 1100 0488 1C       		.byte	0x1c
 1101 0489 08       		.uleb128 0x8
 1102 048a B3010000 		.4byte	.LASF81
 1103 048e 02       		.byte	0x2
 1104 048f 4501     		.2byte	0x145
 1105 0491 A2000000 		.4byte	0xa2
 1106 0495 20       		.byte	0x20
 1107 0496 09       		.uleb128 0x9
 1108 0497 434E5400 		.ascii	"CNT\000"
 1109 049b 02       		.byte	0x2
 1110 049c 4601     		.2byte	0x146
 1111 049e A2000000 		.4byte	0xa2
 1112 04a2 24       		.byte	0x24
 1113 04a3 09       		.uleb128 0x9
 1114 04a4 50534300 		.ascii	"PSC\000"
 1115 04a8 02       		.byte	0x2
 1116 04a9 4701     		.2byte	0x147
 1117 04ab A2000000 		.4byte	0xa2
 1118 04af 28       		.byte	0x28
 1119 04b0 09       		.uleb128 0x9
 1120 04b1 41525200 		.ascii	"ARR\000"
 1121 04b5 02       		.byte	0x2
 1122 04b6 4801     		.2byte	0x148
 1123 04b8 A2000000 		.4byte	0xa2
 1124 04bc 2C       		.byte	0x2c
 1125 04bd 09       		.uleb128 0x9
 1126 04be 52435200 		.ascii	"RCR\000"
 1127 04c2 02       		.byte	0x2
 1128 04c3 4901     		.2byte	0x149
 1129 04c5 A2000000 		.4byte	0xa2
 1130 04c9 30       		.byte	0x30
 1131 04ca 08       		.uleb128 0x8
 1132 04cb D2000000 		.4byte	.LASF82
 1133 04cf 02       		.byte	0x2
 1134 04d0 4A01     		.2byte	0x14a
 1135 04d2 A2000000 		.4byte	0xa2
 1136 04d6 34       		.byte	0x34
 1137 04d7 08       		.uleb128 0x8
 1138 04d8 D5030000 		.4byte	.LASF83
 1139 04dc 02       		.byte	0x2
 1140 04dd 4B01     		.2byte	0x14b
 1141 04df A2000000 		.4byte	0xa2
 1142 04e3 38       		.byte	0x38
 1143 04e4 08       		.uleb128 0x8
 1144 04e5 DD000000 		.4byte	.LASF84
 1145 04e9 02       		.byte	0x2
 1146 04ea 4C01     		.2byte	0x14c
 1147 04ec A2000000 		.4byte	0xa2
 1148 04f0 3C       		.byte	0x3c
 1149 04f1 08       		.uleb128 0x8
 1150 04f2 E2000000 		.4byte	.LASF85
 1151 04f6 02       		.byte	0x2
 1152 04f7 4D01     		.2byte	0x14d
 1153 04f9 A2000000 		.4byte	0xa2
 1154 04fd 40       		.byte	0x40
 1155 04fe 08       		.uleb128 0x8
 1156 04ff A7000000 		.4byte	.LASF86
 1157 0503 02       		.byte	0x2
 1158 0504 4E01     		.2byte	0x14e
 1159 0506 A2000000 		.4byte	0xa2
 1160 050a 44       		.byte	0x44
 1161 050b 09       		.uleb128 0x9
 1162 050c 44435200 		.ascii	"DCR\000"
 1163 0510 02       		.byte	0x2
 1164 0511 4F01     		.2byte	0x14f
 1165 0513 A2000000 		.4byte	0xa2
 1166 0517 48       		.byte	0x48
 1167 0518 08       		.uleb128 0x8
 1168 0519 B8010000 		.4byte	.LASF87
 1169 051d 02       		.byte	0x2
 1170 051e 5001     		.2byte	0x150
 1171 0520 A2000000 		.4byte	0xa2
 1172 0524 4C       		.byte	0x4c
 1173 0525 09       		.uleb128 0x9
 1174 0526 4F5200   		.ascii	"OR\000"
 1175 0529 02       		.byte	0x2
 1176 052a 5101     		.2byte	0x151
 1177 052c A2000000 		.4byte	0xa2
 1178 0530 50       		.byte	0x50
 1179 0531 00       		.byte	0
 1180 0532 0B       		.uleb128 0xb
 1181 0533 77000000 		.4byte	.LASF118
 1182 0537 03       		.byte	0x3
 1183 0538 AA01     		.2byte	0x1aa
 1184 053a 03       		.byte	0x3
 1185 053b 0C       		.uleb128 0xc
 1186 053c 87020000 		.4byte	.LASF88
 1187 0540 02       		.byte	0x2
 1188 0541 C902     		.2byte	0x2c9
 1189 0543 03       		.byte	0x3
 1190 0544 0D       		.uleb128 0xd
 1191 0545 10030000 		.4byte	.LASF119
 1192 0549 01       		.byte	0x1
 1193 054a 1E       		.byte	0x1e
 1194 054b A2000000 		.4byte	0xa2
 1195 054f 01       		.byte	0x1
 1196 0550 5E050000 		.4byte	0x55e
 1197 0554 0E       		.uleb128 0xe
 1198 0555 6600     		.ascii	"f\000"
 1199 0557 01       		.byte	0x1
 1200 0558 1E       		.byte	0x1e
 1201 0559 97000000 		.4byte	0x97
 1202 055d 00       		.byte	0
 1203 055e 0C       		.uleb128 0xc
 1204 055f 31000000 		.4byte	.LASF89
 1205 0563 02       		.byte	0x2
 1206 0564 AA02     		.2byte	0x2aa
 1207 0566 03       		.byte	0x3
 1208 0567 0F       		.uleb128 0xf
 1209 0568 44050000 		.4byte	0x544
 1210 056c 00000000 		.4byte	.LFB392
 1211 0570 10000000 		.4byte	.LFE392-.LFB392
 1212 0574 01       		.uleb128 0x1
 1213 0575 9C       		.byte	0x9c
 1214 0576 84050000 		.4byte	0x584
 1215 057a 10       		.uleb128 0x10
 1216 057b 54050000 		.4byte	0x554
 1217 057f 00000000 		.4byte	.LLST0
 1218 0583 00       		.byte	0
 1219 0584 11       		.uleb128 0x11
 1220 0585 6C000000 		.4byte	.LASF90
 1221 0589 01       		.byte	0x1
 1222 058a 24       		.byte	0x24
 1223 058b 10000000 		.4byte	.LFB393
 1224 058f 80000000 		.4byte	.LFE393-.LFB393
 1225 0593 01       		.uleb128 0x1
 1226 0594 9C       		.byte	0x9c
 1227 0595 C7050000 		.4byte	0x5c7
 1228 0599 12       		.uleb128 0x12
 1229 059a 3B050000 		.4byte	0x53b
 1230 059e 34000000 		.4byte	.LBB16
 1231 05a2 0E000000 		.4byte	.LBE16-.LBB16
 1232 05a6 01       		.byte	0x1
 1233 05a7 2B       		.byte	0x2b
 1234 05a8 BD050000 		.4byte	0x5bd
 1235 05ac 13       		.uleb128 0x13
 1236 05ad 32050000 		.4byte	0x532
 1237 05b1 3E000000 		.4byte	.LBB18
 1238 05b5 04000000 		.4byte	.LBE18-.LBB18
 1239 05b9 02       		.byte	0x2
 1240 05ba C902     		.2byte	0x2c9
 1241 05bc 00       		.byte	0
 1242 05bd 14       		.uleb128 0x14
 1243 05be 50000000 		.4byte	.LVL2
 1244 05c2 54080000 		.4byte	0x854
 1245 05c6 00       		.byte	0
 1246 05c7 11       		.uleb128 0x11
 1247 05c8 31010000 		.4byte	.LASF91
 1248 05cc 01       		.byte	0x1
 1249 05cd 44       		.byte	0x44
 1250 05ce 90000000 		.4byte	.LFB394
 1251 05d2 4C000000 		.4byte	.LFE394-.LFB394
 1252 05d6 01       		.uleb128 0x1
 1253 05d7 9C       		.byte	0x9c
 1254 05d8 41060000 		.4byte	0x641
 1255 05dc 12       		.uleb128 0x12
 1256 05dd 5E050000 		.4byte	0x55e
 1257 05e1 A2000000 		.4byte	.LBB20
 1258 05e5 0E000000 		.4byte	.LBE20-.LBB20
 1259 05e9 01       		.byte	0x1
 1260 05ea 48       		.byte	0x48
 1261 05eb 00060000 		.4byte	0x600
 1262 05ef 13       		.uleb128 0x13
 1263 05f0 32050000 		.4byte	0x532
 1264 05f4 AC000000 		.4byte	.LBB22
 1265 05f8 04000000 		.4byte	.LBE22-.LBB22
 1266 05fc 02       		.byte	0x2
 1267 05fd AA02     		.2byte	0x2aa
 1268 05ff 00       		.byte	0
 1269 0600 15       		.uleb128 0x15
 1270 0601 B8000000 		.4byte	.LVL4
 1271 0605 65080000 		.4byte	0x865
 1272 0609 13060000 		.4byte	0x613
 1273 060d 16       		.uleb128 0x16
 1274 060e 01       		.uleb128 0x1
 1275 060f 50       		.byte	0x50
 1276 0610 01       		.uleb128 0x1
 1277 0611 31       		.byte	0x31
 1278 0612 00       		.byte	0
 1279 0613 15       		.uleb128 0x15
 1280 0614 C2000000 		.4byte	.LVL5
 1281 0618 76080000 		.4byte	0x876
 1282 061c 31060000 		.4byte	0x631
 1283 0620 16       		.uleb128 0x16
 1284 0621 01       		.uleb128 0x1
 1285 0622 52       		.byte	0x52
 1286 0623 01       		.uleb128 0x1
 1287 0624 37       		.byte	0x37
 1288 0625 16       		.uleb128 0x16
 1289 0626 01       		.uleb128 0x1
 1290 0627 51       		.byte	0x51
 1291 0628 01       		.uleb128 0x1
 1292 0629 38       		.byte	0x38
 1293 062a 16       		.uleb128 0x16
 1294 062b 01       		.uleb128 0x1
 1295 062c 50       		.byte	0x50
 1296 062d 02       		.uleb128 0x2
 1297 062e 74       		.byte	0x74
 1298 062f 00       		.sleb128 0
 1299 0630 00       		.byte	0
 1300 0631 17       		.uleb128 0x17
 1301 0632 CE000000 		.4byte	.LVL6
 1302 0636 97080000 		.4byte	0x897
 1303 063a 16       		.uleb128 0x16
 1304 063b 01       		.uleb128 0x1
 1305 063c 51       		.byte	0x51
 1306 063d 01       		.uleb128 0x1
 1307 063e 38       		.byte	0x38
 1308 063f 00       		.byte	0
 1309 0640 00       		.byte	0
 1310 0641 18       		.uleb128 0x18
 1311 0642 6D040000 		.4byte	.LASF120
 1312 0646 01       		.byte	0x1
 1313 0647 4F       		.byte	0x4f
 1314 0648 A2000000 		.4byte	0xa2
 1315 064c DC000000 		.4byte	.LFB395
 1316 0650 0C000000 		.4byte	.LFE395-.LFB395
 1317 0654 01       		.uleb128 0x1
 1318 0655 9C       		.byte	0x9c
 1319 0656 64060000 		.4byte	0x664
 1320 065a 19       		.uleb128 0x19
 1321 065b E2000000 		.4byte	.LVL7
 1322 065f AD080000 		.4byte	0x8ad
 1323 0663 00       		.byte	0
 1324 0664 1A       		.uleb128 0x1a
 1325 0665 60010000 		.4byte	.LASF121
 1326 0669 01       		.byte	0x1
 1327 066a 55       		.byte	0x55
 1328 066b E8000000 		.4byte	.LFB396
 1329 066f 18000000 		.4byte	.LFE396-.LFB396
 1330 0673 01       		.uleb128 0x1
 1331 0674 9C       		.byte	0x9c
 1332 0675 11       		.uleb128 0x11
 1333 0676 26040000 		.4byte	.LASF92
 1334 067a 01       		.byte	0x1
 1335 067b 5C       		.byte	0x5c
 1336 067c 00010000 		.4byte	.LFB397
 1337 0680 98000000 		.4byte	.LFE397-.LFB397
 1338 0684 01       		.uleb128 0x1
 1339 0685 9C       		.byte	0x9c
 1340 0686 9A060000 		.4byte	0x69a
 1341 068a 1B       		.uleb128 0x1b
 1342 068b 76616C00 		.ascii	"val\000"
 1343 068f 01       		.byte	0x1
 1344 0690 5D       		.byte	0x5d
 1345 0691 8C000000 		.4byte	0x8c
 1346 0695 21000000 		.4byte	.LLST1
 1347 0699 00       		.byte	0
 1348 069a 11       		.uleb128 0x11
 1349 069b AC000000 		.4byte	.LASF93
 1350 069f 01       		.byte	0x1
 1351 06a0 8A       		.byte	0x8a
 1352 06a1 98010000 		.4byte	.LFB398
 1353 06a5 98000000 		.4byte	.LFE398-.LFB398
 1354 06a9 01       		.uleb128 0x1
 1355 06aa 9C       		.byte	0x9c
 1356 06ab C8060000 		.4byte	0x6c8
 1357 06af 1B       		.uleb128 0x1b
 1358 06b0 72657300 		.ascii	"res\000"
 1359 06b4 01       		.byte	0x1
 1360 06b5 8B       		.byte	0x8b
 1361 06b6 A2000000 		.4byte	0xa2
 1362 06ba 3B000000 		.4byte	.LLST2
 1363 06be 14       		.uleb128 0x14
 1364 06bf 9E010000 		.4byte	.LVL10
 1365 06c3 41060000 		.4byte	0x641
 1366 06c7 00       		.byte	0
 1367 06c8 1C       		.uleb128 0x1c
 1368 06c9 52434300 		.ascii	"RCC\000"
 1369 06cd 02       		.byte	0x2
 1370 06ce 3D02     		.2byte	0x23d
 1371 06d0 D4060000 		.4byte	0x6d4
 1372 06d4 1D       		.uleb128 0x1d
 1373 06d5 B4000000 		.4byte	0xb4
 1374 06d9 1E       		.uleb128 0x1e
 1375 06da 3E020000 		.4byte	.LASF94
 1376 06de 02       		.byte	0x2
 1377 06df 4502     		.2byte	0x245
 1378 06e1 E5060000 		.4byte	0x6e5
 1379 06e5 1D       		.uleb128 0x1d
 1380 06e6 88020000 		.4byte	0x288
 1381 06ea 1E       		.uleb128 0x1e
 1382 06eb 38020000 		.4byte	.LASF95
 1383 06ef 02       		.byte	0x2
 1384 06f0 4602     		.2byte	0x246
 1385 06f2 E5060000 		.4byte	0x6e5
 1386 06f6 1E       		.uleb128 0x1e
 1387 06f7 D9010000 		.4byte	.LASF96
 1388 06fb 02       		.byte	0x2
 1389 06fc 5302     		.2byte	0x253
 1390 06fe 02070000 		.4byte	0x702
 1391 0702 1D       		.uleb128 0x1d
 1392 0703 0D030000 		.4byte	0x30d
 1393 0707 1E       		.uleb128 0x1e
 1394 0708 62000000 		.4byte	.LASF97
 1395 070c 02       		.byte	0x2
 1396 070d 7702     		.2byte	0x277
 1397 070f 13070000 		.4byte	0x713
 1398 0713 1D       		.uleb128 0x1d
 1399 0714 15040000 		.4byte	0x415
 1400 0718 1F       		.uleb128 0x1f
 1401 0719 97000000 		.4byte	0x97
 1402 071d 2E070000 		.4byte	0x72e
 1403 0721 20       		.uleb128 0x20
 1404 0722 AD000000 		.4byte	0xad
 1405 0726 01       		.byte	0x1
 1406 0727 20       		.uleb128 0x20
 1407 0728 AD000000 		.4byte	0xad
 1408 072c 36       		.byte	0x36
 1409 072d 00       		.byte	0
 1410 072e 21       		.uleb128 0x21
 1411 072f C9000000 		.4byte	.LASF98
 1412 0733 01       		.byte	0x1
 1413 0734 0B       		.byte	0xb
 1414 0735 18070000 		.4byte	0x718
 1415 0739 1F       		.uleb128 0x1f
 1416 073a 97000000 		.4byte	0x97
 1417 073e 4F070000 		.4byte	0x74f
 1418 0742 20       		.uleb128 0x20
 1419 0743 AD000000 		.4byte	0xad
 1420 0747 01       		.byte	0x1
 1421 0748 20       		.uleb128 0x20
 1422 0749 AD000000 		.4byte	0xad
 1423 074d 26       		.byte	0x26
 1424 074e 00       		.byte	0
 1425 074f 21       		.uleb128 0x21
 1426 0750 93030000 		.4byte	.LASF99
 1427 0754 01       		.byte	0x1
 1428 0755 0C       		.byte	0xc
 1429 0756 39070000 		.4byte	0x739
 1430 075a 1F       		.uleb128 0x1f
 1431 075b 97000000 		.4byte	0x97
 1432 075f 70070000 		.4byte	0x770
 1433 0763 20       		.uleb128 0x20
 1434 0764 AD000000 		.4byte	0xad
 1435 0768 01       		.byte	0x1
 1436 0769 20       		.uleb128 0x20
 1437 076a AD000000 		.4byte	0xad
 1438 076e 2D       		.byte	0x2d
 1439 076f 00       		.byte	0
 1440 0770 21       		.uleb128 0x21
 1441 0771 FB010000 		.4byte	.LASF100
 1442 0775 01       		.byte	0x1
 1443 0776 0D       		.byte	0xd
 1444 0777 5A070000 		.4byte	0x75a
 1445 077b 1F       		.uleb128 0x1f
 1446 077c 97000000 		.4byte	0x97
 1447 0780 91070000 		.4byte	0x791
 1448 0784 20       		.uleb128 0x20
 1449 0785 AD000000 		.4byte	0xad
 1450 0789 01       		.byte	0x1
 1451 078a 20       		.uleb128 0x20
 1452 078b AD000000 		.4byte	0xad
 1453 078f 1E       		.byte	0x1e
 1454 0790 00       		.byte	0
 1455 0791 21       		.uleb128 0x21
 1456 0792 AE040000 		.4byte	.LASF101
 1457 0796 01       		.byte	0x1
 1458 0797 0E       		.byte	0xe
 1459 0798 7B070000 		.4byte	0x77b
 1460 079c 1F       		.uleb128 0x1f
 1461 079d 97000000 		.4byte	0x97
 1462 07a1 B2070000 		.4byte	0x7b2
 1463 07a5 20       		.uleb128 0x20
 1464 07a6 AD000000 		.4byte	0xad
 1465 07aa 01       		.byte	0x1
 1466 07ab 20       		.uleb128 0x20
 1467 07ac AD000000 		.4byte	0xad
 1468 07b0 4C       		.byte	0x4c
 1469 07b1 00       		.byte	0
 1470 07b2 21       		.uleb128 0x21
 1471 07b3 86030000 		.4byte	.LASF102
 1472 07b7 01       		.byte	0x1
 1473 07b8 0F       		.byte	0xf
 1474 07b9 9C070000 		.4byte	0x79c
 1475 07bd 1F       		.uleb128 0x1f
 1476 07be 97000000 		.4byte	0x97
 1477 07c2 D3070000 		.4byte	0x7d3
 1478 07c6 20       		.uleb128 0x20
 1479 07c7 AD000000 		.4byte	0xad
 1480 07cb 01       		.byte	0x1
 1481 07cc 20       		.uleb128 0x20
 1482 07cd AD000000 		.4byte	0xad
 1483 07d1 1A       		.byte	0x1a
 1484 07d2 00       		.byte	0
 1485 07d3 21       		.uleb128 0x21
 1486 07d4 05030000 		.4byte	.LASF103
 1487 07d8 01       		.byte	0x1
 1488 07d9 10       		.byte	0x10
 1489 07da BD070000 		.4byte	0x7bd
 1490 07de 21       		.uleb128 0x21
 1491 07df A9040000 		.4byte	.LASF104
 1492 07e3 01       		.byte	0x1
 1493 07e4 11       		.byte	0x11
 1494 07e5 BD070000 		.4byte	0x7bd
 1495 07e9 1F       		.uleb128 0x1f
 1496 07ea 97000000 		.4byte	0x97
 1497 07ee FF070000 		.4byte	0x7ff
 1498 07f2 20       		.uleb128 0x20
 1499 07f3 AD000000 		.4byte	0xad
 1500 07f7 01       		.byte	0x1
 1501 07f8 20       		.uleb128 0x20
 1502 07f9 AD000000 		.4byte	0xad
 1503 07fd 21       		.byte	0x21
 1504 07fe 00       		.byte	0
 1505 07ff 21       		.uleb128 0x21
 1506 0800 87000000 		.4byte	.LASF105
 1507 0804 01       		.byte	0x1
 1508 0805 12       		.byte	0x12
 1509 0806 E9070000 		.4byte	0x7e9
 1510 080a 22       		.uleb128 0x22
 1511 080b 34030000 		.4byte	.LASF106
 1512 080f 01       		.byte	0x1
 1513 0810 15       		.byte	0x15
 1514 0811 1B080000 		.4byte	0x81b
 1515 0815 05       		.uleb128 0x5
 1516 0816 03       		.byte	0x3
 1517 0817 00000000 		.4byte	ptN_melodie
 1518 081b 23       		.uleb128 0x23
 1519 081c 04       		.byte	0x4
 1520 081d 97000000 		.4byte	0x97
 1521 0821 22       		.uleb128 0x22
 1522 0822 0B040000 		.4byte	.LASF107
 1523 0826 01       		.byte	0x1
 1524 0827 16       		.byte	0x16
 1525 0828 1B080000 		.4byte	0x81b
 1526 082c 05       		.uleb128 0x5
 1527 082d 03       		.byte	0x3
 1528 082e 00000000 		.4byte	ptD_melodie
 1529 0832 22       		.uleb128 0x22
 1530 0833 22000000 		.4byte	.LASF108
 1531 0837 01       		.byte	0x1
 1532 0838 19       		.byte	0x19
 1533 0839 A2000000 		.4byte	0xa2
 1534 083d 05       		.uleb128 0x5
 1535 083e 03       		.byte	0x3
 1536 083f 00000000 		.4byte	divclk
 1537 0843 22       		.uleb128 0x22
 1538 0844 81010000 		.4byte	.LASF109
 1539 0848 01       		.byte	0x1
 1540 0849 1B       		.byte	0x1b
 1541 084a 8C000000 		.4byte	0x8c
 1542 084e 05       		.uleb128 0x5
 1543 084f 03       		.byte	0x3
 1544 0850 00000000 		.4byte	modeS
 1545 0854 24       		.uleb128 0x24
 1546 0855 4B040000 		.4byte	.LASF110
 1547 0859 06       		.byte	0x6
 1548 085a 1E       		.byte	0x1e
 1549 085b A2000000 		.4byte	0xa2
 1550 085f 65080000 		.4byte	0x865
 1551 0863 25       		.uleb128 0x25
 1552 0864 00       		.byte	0
 1553 0865 26       		.uleb128 0x26
 1554 0866 8F000000 		.4byte	.LASF111
 1555 086a 07       		.byte	0x7
 1556 086b 03       		.byte	0x3
 1557 086c 76080000 		.4byte	0x876
 1558 0870 27       		.uleb128 0x27
 1559 0871 A2000000 		.4byte	0xa2
 1560 0875 00       		.byte	0
 1561 0876 26       		.uleb128 0x26
 1562 0877 F3000000 		.4byte	.LASF112
 1563 087b 07       		.byte	0x7
 1564 087c 0E       		.byte	0xe
 1565 087d 91080000 		.4byte	0x891
 1566 0881 27       		.uleb128 0x27
 1567 0882 91080000 		.4byte	0x891
 1568 0886 27       		.uleb128 0x27
 1569 0887 A2000000 		.4byte	0xa2
 1570 088b 27       		.uleb128 0x27
 1571 088c A2000000 		.4byte	0xa2
 1572 0890 00       		.byte	0
 1573 0891 23       		.uleb128 0x23
 1574 0892 04       		.byte	0x4
 1575 0893 02070000 		.4byte	0x702
 1576 0897 26       		.uleb128 0x26
 1577 0898 99030000 		.4byte	.LASF113
 1578 089c 07       		.byte	0x7
 1579 089d 12       		.byte	0x12
 1580 089e AD080000 		.4byte	0x8ad
 1581 08a2 27       		.uleb128 0x27
 1582 08a3 91080000 		.4byte	0x891
 1583 08a7 27       		.uleb128 0x27
 1584 08a8 A2000000 		.4byte	0xa2
 1585 08ac 00       		.byte	0
 1586 08ad 28       		.uleb128 0x28
 1587 08ae B4020000 		.4byte	.LASF114
 1588 08b2 07       		.byte	0x7
 1589 08b3 13       		.byte	0x13
 1590 08b4 A2000000 		.4byte	0xa2
 1591 08b8 27       		.uleb128 0x27
 1592 08b9 91080000 		.4byte	0x891
 1593 08bd 00       		.byte	0
 1594 08be 00       		.byte	0
 1595              		.section	.debug_abbrev,"",%progbits
 1596              	.Ldebug_abbrev0:
 1597 0000 01       		.uleb128 0x1
 1598 0001 11       		.uleb128 0x11
 1599 0002 01       		.byte	0x1
 1600 0003 25       		.uleb128 0x25
 1601 0004 0E       		.uleb128 0xe
 1602 0005 13       		.uleb128 0x13
 1603 0006 0B       		.uleb128 0xb
 1604 0007 03       		.uleb128 0x3
 1605 0008 0E       		.uleb128 0xe
 1606 0009 1B       		.uleb128 0x1b
 1607 000a 0E       		.uleb128 0xe
 1608 000b 11       		.uleb128 0x11
 1609 000c 01       		.uleb128 0x1
 1610 000d 12       		.uleb128 0x12
 1611 000e 06       		.uleb128 0x6
 1612 000f 10       		.uleb128 0x10
 1613 0010 17       		.uleb128 0x17
 1614 0011 00       		.byte	0
 1615 0012 00       		.byte	0
 1616 0013 02       		.uleb128 0x2
 1617 0014 24       		.uleb128 0x24
 1618 0015 00       		.byte	0
 1619 0016 0B       		.uleb128 0xb
 1620 0017 0B       		.uleb128 0xb
 1621 0018 3E       		.uleb128 0x3e
 1622 0019 0B       		.uleb128 0xb
 1623 001a 03       		.uleb128 0x3
 1624 001b 0E       		.uleb128 0xe
 1625 001c 00       		.byte	0
 1626 001d 00       		.byte	0
 1627 001e 03       		.uleb128 0x3
 1628 001f 16       		.uleb128 0x16
 1629 0020 00       		.byte	0
 1630 0021 03       		.uleb128 0x3
 1631 0022 0E       		.uleb128 0xe
 1632 0023 3A       		.uleb128 0x3a
 1633 0024 0B       		.uleb128 0xb
 1634 0025 3B       		.uleb128 0x3b
 1635 0026 0B       		.uleb128 0xb
 1636 0027 49       		.uleb128 0x49
 1637 0028 13       		.uleb128 0x13
 1638 0029 00       		.byte	0
 1639 002a 00       		.byte	0
 1640 002b 04       		.uleb128 0x4
 1641 002c 24       		.uleb128 0x24
 1642 002d 00       		.byte	0
 1643 002e 0B       		.uleb128 0xb
 1644 002f 0B       		.uleb128 0xb
 1645 0030 3E       		.uleb128 0x3e
 1646 0031 0B       		.uleb128 0xb
 1647 0032 03       		.uleb128 0x3
 1648 0033 08       		.uleb128 0x8
 1649 0034 00       		.byte	0
 1650 0035 00       		.byte	0
 1651 0036 05       		.uleb128 0x5
 1652 0037 13       		.uleb128 0x13
 1653 0038 01       		.byte	0x1
 1654 0039 03       		.uleb128 0x3
 1655 003a 0E       		.uleb128 0xe
 1656 003b 0B       		.uleb128 0xb
 1657 003c 0B       		.uleb128 0xb
 1658 003d 3A       		.uleb128 0x3a
 1659 003e 0B       		.uleb128 0xb
 1660 003f 3B       		.uleb128 0x3b
 1661 0040 0B       		.uleb128 0xb
 1662 0041 01       		.uleb128 0x1
 1663 0042 13       		.uleb128 0x13
 1664 0043 00       		.byte	0
 1665 0044 00       		.byte	0
 1666 0045 06       		.uleb128 0x6
 1667 0046 0D       		.uleb128 0xd
 1668 0047 00       		.byte	0
 1669 0048 03       		.uleb128 0x3
 1670 0049 08       		.uleb128 0x8
 1671 004a 3A       		.uleb128 0x3a
 1672 004b 0B       		.uleb128 0xb
 1673 004c 3B       		.uleb128 0x3b
 1674 004d 0B       		.uleb128 0xb
 1675 004e 49       		.uleb128 0x49
 1676 004f 13       		.uleb128 0x13
 1677 0050 38       		.uleb128 0x38
 1678 0051 0B       		.uleb128 0xb
 1679 0052 00       		.byte	0
 1680 0053 00       		.byte	0
 1681 0054 07       		.uleb128 0x7
 1682 0055 0D       		.uleb128 0xd
 1683 0056 00       		.byte	0
 1684 0057 03       		.uleb128 0x3
 1685 0058 0E       		.uleb128 0xe
 1686 0059 3A       		.uleb128 0x3a
 1687 005a 0B       		.uleb128 0xb
 1688 005b 3B       		.uleb128 0x3b
 1689 005c 0B       		.uleb128 0xb
 1690 005d 49       		.uleb128 0x49
 1691 005e 13       		.uleb128 0x13
 1692 005f 38       		.uleb128 0x38
 1693 0060 0B       		.uleb128 0xb
 1694 0061 00       		.byte	0
 1695 0062 00       		.byte	0
 1696 0063 08       		.uleb128 0x8
 1697 0064 0D       		.uleb128 0xd
 1698 0065 00       		.byte	0
 1699 0066 03       		.uleb128 0x3
 1700 0067 0E       		.uleb128 0xe
 1701 0068 3A       		.uleb128 0x3a
 1702 0069 0B       		.uleb128 0xb
 1703 006a 3B       		.uleb128 0x3b
 1704 006b 05       		.uleb128 0x5
 1705 006c 49       		.uleb128 0x49
 1706 006d 13       		.uleb128 0x13
 1707 006e 38       		.uleb128 0x38
 1708 006f 0B       		.uleb128 0xb
 1709 0070 00       		.byte	0
 1710 0071 00       		.byte	0
 1711 0072 09       		.uleb128 0x9
 1712 0073 0D       		.uleb128 0xd
 1713 0074 00       		.byte	0
 1714 0075 03       		.uleb128 0x3
 1715 0076 08       		.uleb128 0x8
 1716 0077 3A       		.uleb128 0x3a
 1717 0078 0B       		.uleb128 0xb
 1718 0079 3B       		.uleb128 0x3b
 1719 007a 05       		.uleb128 0x5
 1720 007b 49       		.uleb128 0x49
 1721 007c 13       		.uleb128 0x13
 1722 007d 38       		.uleb128 0x38
 1723 007e 0B       		.uleb128 0xb
 1724 007f 00       		.byte	0
 1725 0080 00       		.byte	0
 1726 0081 0A       		.uleb128 0xa
 1727 0082 13       		.uleb128 0x13
 1728 0083 01       		.byte	0x1
 1729 0084 03       		.uleb128 0x3
 1730 0085 0E       		.uleb128 0xe
 1731 0086 0B       		.uleb128 0xb
 1732 0087 0B       		.uleb128 0xb
 1733 0088 3A       		.uleb128 0x3a
 1734 0089 0B       		.uleb128 0xb
 1735 008a 3B       		.uleb128 0x3b
 1736 008b 05       		.uleb128 0x5
 1737 008c 01       		.uleb128 0x1
 1738 008d 13       		.uleb128 0x13
 1739 008e 00       		.byte	0
 1740 008f 00       		.byte	0
 1741 0090 0B       		.uleb128 0xb
 1742 0091 2E       		.uleb128 0x2e
 1743 0092 00       		.byte	0
 1744 0093 03       		.uleb128 0x3
 1745 0094 0E       		.uleb128 0xe
 1746 0095 3A       		.uleb128 0x3a
 1747 0096 0B       		.uleb128 0xb
 1748 0097 3B       		.uleb128 0x3b
 1749 0098 05       		.uleb128 0x5
 1750 0099 27       		.uleb128 0x27
 1751 009a 19       		.uleb128 0x19
 1752 009b 20       		.uleb128 0x20
 1753 009c 0B       		.uleb128 0xb
 1754 009d 00       		.byte	0
 1755 009e 00       		.byte	0
 1756 009f 0C       		.uleb128 0xc
 1757 00a0 2E       		.uleb128 0x2e
 1758 00a1 00       		.byte	0
 1759 00a2 03       		.uleb128 0x3
 1760 00a3 0E       		.uleb128 0xe
 1761 00a4 3A       		.uleb128 0x3a
 1762 00a5 0B       		.uleb128 0xb
 1763 00a6 3B       		.uleb128 0x3b
 1764 00a7 05       		.uleb128 0x5
 1765 00a8 20       		.uleb128 0x20
 1766 00a9 0B       		.uleb128 0xb
 1767 00aa 00       		.byte	0
 1768 00ab 00       		.byte	0
 1769 00ac 0D       		.uleb128 0xd
 1770 00ad 2E       		.uleb128 0x2e
 1771 00ae 01       		.byte	0x1
 1772 00af 3F       		.uleb128 0x3f
 1773 00b0 19       		.uleb128 0x19
 1774 00b1 03       		.uleb128 0x3
 1775 00b2 0E       		.uleb128 0xe
 1776 00b3 3A       		.uleb128 0x3a
 1777 00b4 0B       		.uleb128 0xb
 1778 00b5 3B       		.uleb128 0x3b
 1779 00b6 0B       		.uleb128 0xb
 1780 00b7 27       		.uleb128 0x27
 1781 00b8 19       		.uleb128 0x19
 1782 00b9 49       		.uleb128 0x49
 1783 00ba 13       		.uleb128 0x13
 1784 00bb 20       		.uleb128 0x20
 1785 00bc 0B       		.uleb128 0xb
 1786 00bd 01       		.uleb128 0x1
 1787 00be 13       		.uleb128 0x13
 1788 00bf 00       		.byte	0
 1789 00c0 00       		.byte	0
 1790 00c1 0E       		.uleb128 0xe
 1791 00c2 05       		.uleb128 0x5
 1792 00c3 00       		.byte	0
 1793 00c4 03       		.uleb128 0x3
 1794 00c5 08       		.uleb128 0x8
 1795 00c6 3A       		.uleb128 0x3a
 1796 00c7 0B       		.uleb128 0xb
 1797 00c8 3B       		.uleb128 0x3b
 1798 00c9 0B       		.uleb128 0xb
 1799 00ca 49       		.uleb128 0x49
 1800 00cb 13       		.uleb128 0x13
 1801 00cc 00       		.byte	0
 1802 00cd 00       		.byte	0
 1803 00ce 0F       		.uleb128 0xf
 1804 00cf 2E       		.uleb128 0x2e
 1805 00d0 01       		.byte	0x1
 1806 00d1 31       		.uleb128 0x31
 1807 00d2 13       		.uleb128 0x13
 1808 00d3 11       		.uleb128 0x11
 1809 00d4 01       		.uleb128 0x1
 1810 00d5 12       		.uleb128 0x12
 1811 00d6 06       		.uleb128 0x6
 1812 00d7 40       		.uleb128 0x40
 1813 00d8 18       		.uleb128 0x18
 1814 00d9 9742     		.uleb128 0x2117
 1815 00db 19       		.uleb128 0x19
 1816 00dc 01       		.uleb128 0x1
 1817 00dd 13       		.uleb128 0x13
 1818 00de 00       		.byte	0
 1819 00df 00       		.byte	0
 1820 00e0 10       		.uleb128 0x10
 1821 00e1 05       		.uleb128 0x5
 1822 00e2 00       		.byte	0
 1823 00e3 31       		.uleb128 0x31
 1824 00e4 13       		.uleb128 0x13
 1825 00e5 02       		.uleb128 0x2
 1826 00e6 17       		.uleb128 0x17
 1827 00e7 00       		.byte	0
 1828 00e8 00       		.byte	0
 1829 00e9 11       		.uleb128 0x11
 1830 00ea 2E       		.uleb128 0x2e
 1831 00eb 01       		.byte	0x1
 1832 00ec 3F       		.uleb128 0x3f
 1833 00ed 19       		.uleb128 0x19
 1834 00ee 03       		.uleb128 0x3
 1835 00ef 0E       		.uleb128 0xe
 1836 00f0 3A       		.uleb128 0x3a
 1837 00f1 0B       		.uleb128 0xb
 1838 00f2 3B       		.uleb128 0x3b
 1839 00f3 0B       		.uleb128 0xb
 1840 00f4 11       		.uleb128 0x11
 1841 00f5 01       		.uleb128 0x1
 1842 00f6 12       		.uleb128 0x12
 1843 00f7 06       		.uleb128 0x6
 1844 00f8 40       		.uleb128 0x40
 1845 00f9 18       		.uleb128 0x18
 1846 00fa 9742     		.uleb128 0x2117
 1847 00fc 19       		.uleb128 0x19
 1848 00fd 01       		.uleb128 0x1
 1849 00fe 13       		.uleb128 0x13
 1850 00ff 00       		.byte	0
 1851 0100 00       		.byte	0
 1852 0101 12       		.uleb128 0x12
 1853 0102 1D       		.uleb128 0x1d
 1854 0103 01       		.byte	0x1
 1855 0104 31       		.uleb128 0x31
 1856 0105 13       		.uleb128 0x13
 1857 0106 11       		.uleb128 0x11
 1858 0107 01       		.uleb128 0x1
 1859 0108 12       		.uleb128 0x12
 1860 0109 06       		.uleb128 0x6
 1861 010a 58       		.uleb128 0x58
 1862 010b 0B       		.uleb128 0xb
 1863 010c 59       		.uleb128 0x59
 1864 010d 0B       		.uleb128 0xb
 1865 010e 01       		.uleb128 0x1
 1866 010f 13       		.uleb128 0x13
 1867 0110 00       		.byte	0
 1868 0111 00       		.byte	0
 1869 0112 13       		.uleb128 0x13
 1870 0113 1D       		.uleb128 0x1d
 1871 0114 00       		.byte	0
 1872 0115 31       		.uleb128 0x31
 1873 0116 13       		.uleb128 0x13
 1874 0117 11       		.uleb128 0x11
 1875 0118 01       		.uleb128 0x1
 1876 0119 12       		.uleb128 0x12
 1877 011a 06       		.uleb128 0x6
 1878 011b 58       		.uleb128 0x58
 1879 011c 0B       		.uleb128 0xb
 1880 011d 59       		.uleb128 0x59
 1881 011e 05       		.uleb128 0x5
 1882 011f 00       		.byte	0
 1883 0120 00       		.byte	0
 1884 0121 14       		.uleb128 0x14
 1885 0122 898201   		.uleb128 0x4109
 1886 0125 00       		.byte	0
 1887 0126 11       		.uleb128 0x11
 1888 0127 01       		.uleb128 0x1
 1889 0128 31       		.uleb128 0x31
 1890 0129 13       		.uleb128 0x13
 1891 012a 00       		.byte	0
 1892 012b 00       		.byte	0
 1893 012c 15       		.uleb128 0x15
 1894 012d 898201   		.uleb128 0x4109
 1895 0130 01       		.byte	0x1
 1896 0131 11       		.uleb128 0x11
 1897 0132 01       		.uleb128 0x1
 1898 0133 31       		.uleb128 0x31
 1899 0134 13       		.uleb128 0x13
 1900 0135 01       		.uleb128 0x1
 1901 0136 13       		.uleb128 0x13
 1902 0137 00       		.byte	0
 1903 0138 00       		.byte	0
 1904 0139 16       		.uleb128 0x16
 1905 013a 8A8201   		.uleb128 0x410a
 1906 013d 00       		.byte	0
 1907 013e 02       		.uleb128 0x2
 1908 013f 18       		.uleb128 0x18
 1909 0140 9142     		.uleb128 0x2111
 1910 0142 18       		.uleb128 0x18
 1911 0143 00       		.byte	0
 1912 0144 00       		.byte	0
 1913 0145 17       		.uleb128 0x17
 1914 0146 898201   		.uleb128 0x4109
 1915 0149 01       		.byte	0x1
 1916 014a 11       		.uleb128 0x11
 1917 014b 01       		.uleb128 0x1
 1918 014c 9542     		.uleb128 0x2115
 1919 014e 19       		.uleb128 0x19
 1920 014f 31       		.uleb128 0x31
 1921 0150 13       		.uleb128 0x13
 1922 0151 00       		.byte	0
 1923 0152 00       		.byte	0
 1924 0153 18       		.uleb128 0x18
 1925 0154 2E       		.uleb128 0x2e
 1926 0155 01       		.byte	0x1
 1927 0156 3F       		.uleb128 0x3f
 1928 0157 19       		.uleb128 0x19
 1929 0158 03       		.uleb128 0x3
 1930 0159 0E       		.uleb128 0xe
 1931 015a 3A       		.uleb128 0x3a
 1932 015b 0B       		.uleb128 0xb
 1933 015c 3B       		.uleb128 0x3b
 1934 015d 0B       		.uleb128 0xb
 1935 015e 49       		.uleb128 0x49
 1936 015f 13       		.uleb128 0x13
 1937 0160 11       		.uleb128 0x11
 1938 0161 01       		.uleb128 0x1
 1939 0162 12       		.uleb128 0x12
 1940 0163 06       		.uleb128 0x6
 1941 0164 40       		.uleb128 0x40
 1942 0165 18       		.uleb128 0x18
 1943 0166 9742     		.uleb128 0x2117
 1944 0168 19       		.uleb128 0x19
 1945 0169 01       		.uleb128 0x1
 1946 016a 13       		.uleb128 0x13
 1947 016b 00       		.byte	0
 1948 016c 00       		.byte	0
 1949 016d 19       		.uleb128 0x19
 1950 016e 898201   		.uleb128 0x4109
 1951 0171 00       		.byte	0
 1952 0172 11       		.uleb128 0x11
 1953 0173 01       		.uleb128 0x1
 1954 0174 9542     		.uleb128 0x2115
 1955 0176 19       		.uleb128 0x19
 1956 0177 31       		.uleb128 0x31
 1957 0178 13       		.uleb128 0x13
 1958 0179 00       		.byte	0
 1959 017a 00       		.byte	0
 1960 017b 1A       		.uleb128 0x1a
 1961 017c 2E       		.uleb128 0x2e
 1962 017d 00       		.byte	0
 1963 017e 3F       		.uleb128 0x3f
 1964 017f 19       		.uleb128 0x19
 1965 0180 03       		.uleb128 0x3
 1966 0181 0E       		.uleb128 0xe
 1967 0182 3A       		.uleb128 0x3a
 1968 0183 0B       		.uleb128 0xb
 1969 0184 3B       		.uleb128 0x3b
 1970 0185 0B       		.uleb128 0xb
 1971 0186 11       		.uleb128 0x11
 1972 0187 01       		.uleb128 0x1
 1973 0188 12       		.uleb128 0x12
 1974 0189 06       		.uleb128 0x6
 1975 018a 40       		.uleb128 0x40
 1976 018b 18       		.uleb128 0x18
 1977 018c 9742     		.uleb128 0x2117
 1978 018e 19       		.uleb128 0x19
 1979 018f 00       		.byte	0
 1980 0190 00       		.byte	0
 1981 0191 1B       		.uleb128 0x1b
 1982 0192 34       		.uleb128 0x34
 1983 0193 00       		.byte	0
 1984 0194 03       		.uleb128 0x3
 1985 0195 08       		.uleb128 0x8
 1986 0196 3A       		.uleb128 0x3a
 1987 0197 0B       		.uleb128 0xb
 1988 0198 3B       		.uleb128 0x3b
 1989 0199 0B       		.uleb128 0xb
 1990 019a 49       		.uleb128 0x49
 1991 019b 13       		.uleb128 0x13
 1992 019c 02       		.uleb128 0x2
 1993 019d 17       		.uleb128 0x17
 1994 019e 00       		.byte	0
 1995 019f 00       		.byte	0
 1996 01a0 1C       		.uleb128 0x1c
 1997 01a1 34       		.uleb128 0x34
 1998 01a2 00       		.byte	0
 1999 01a3 03       		.uleb128 0x3
 2000 01a4 08       		.uleb128 0x8
 2001 01a5 3A       		.uleb128 0x3a
 2002 01a6 0B       		.uleb128 0xb
 2003 01a7 3B       		.uleb128 0x3b
 2004 01a8 05       		.uleb128 0x5
 2005 01a9 49       		.uleb128 0x49
 2006 01aa 13       		.uleb128 0x13
 2007 01ab 3F       		.uleb128 0x3f
 2008 01ac 19       		.uleb128 0x19
 2009 01ad 3C       		.uleb128 0x3c
 2010 01ae 19       		.uleb128 0x19
 2011 01af 00       		.byte	0
 2012 01b0 00       		.byte	0
 2013 01b1 1D       		.uleb128 0x1d
 2014 01b2 35       		.uleb128 0x35
 2015 01b3 00       		.byte	0
 2016 01b4 49       		.uleb128 0x49
 2017 01b5 13       		.uleb128 0x13
 2018 01b6 00       		.byte	0
 2019 01b7 00       		.byte	0
 2020 01b8 1E       		.uleb128 0x1e
 2021 01b9 34       		.uleb128 0x34
 2022 01ba 00       		.byte	0
 2023 01bb 03       		.uleb128 0x3
 2024 01bc 0E       		.uleb128 0xe
 2025 01bd 3A       		.uleb128 0x3a
 2026 01be 0B       		.uleb128 0xb
 2027 01bf 3B       		.uleb128 0x3b
 2028 01c0 05       		.uleb128 0x5
 2029 01c1 49       		.uleb128 0x49
 2030 01c2 13       		.uleb128 0x13
 2031 01c3 3F       		.uleb128 0x3f
 2032 01c4 19       		.uleb128 0x19
 2033 01c5 3C       		.uleb128 0x3c
 2034 01c6 19       		.uleb128 0x19
 2035 01c7 00       		.byte	0
 2036 01c8 00       		.byte	0
 2037 01c9 1F       		.uleb128 0x1f
 2038 01ca 01       		.uleb128 0x1
 2039 01cb 01       		.byte	0x1
 2040 01cc 49       		.uleb128 0x49
 2041 01cd 13       		.uleb128 0x13
 2042 01ce 01       		.uleb128 0x1
 2043 01cf 13       		.uleb128 0x13
 2044 01d0 00       		.byte	0
 2045 01d1 00       		.byte	0
 2046 01d2 20       		.uleb128 0x20
 2047 01d3 21       		.uleb128 0x21
 2048 01d4 00       		.byte	0
 2049 01d5 49       		.uleb128 0x49
 2050 01d6 13       		.uleb128 0x13
 2051 01d7 2F       		.uleb128 0x2f
 2052 01d8 0B       		.uleb128 0xb
 2053 01d9 00       		.byte	0
 2054 01da 00       		.byte	0
 2055 01db 21       		.uleb128 0x21
 2056 01dc 34       		.uleb128 0x34
 2057 01dd 00       		.byte	0
 2058 01de 03       		.uleb128 0x3
 2059 01df 0E       		.uleb128 0xe
 2060 01e0 3A       		.uleb128 0x3a
 2061 01e1 0B       		.uleb128 0xb
 2062 01e2 3B       		.uleb128 0x3b
 2063 01e3 0B       		.uleb128 0xb
 2064 01e4 49       		.uleb128 0x49
 2065 01e5 13       		.uleb128 0x13
 2066 01e6 3F       		.uleb128 0x3f
 2067 01e7 19       		.uleb128 0x19
 2068 01e8 3C       		.uleb128 0x3c
 2069 01e9 19       		.uleb128 0x19
 2070 01ea 00       		.byte	0
 2071 01eb 00       		.byte	0
 2072 01ec 22       		.uleb128 0x22
 2073 01ed 34       		.uleb128 0x34
 2074 01ee 00       		.byte	0
 2075 01ef 03       		.uleb128 0x3
 2076 01f0 0E       		.uleb128 0xe
 2077 01f1 3A       		.uleb128 0x3a
 2078 01f2 0B       		.uleb128 0xb
 2079 01f3 3B       		.uleb128 0x3b
 2080 01f4 0B       		.uleb128 0xb
 2081 01f5 49       		.uleb128 0x49
 2082 01f6 13       		.uleb128 0x13
 2083 01f7 3F       		.uleb128 0x3f
 2084 01f8 19       		.uleb128 0x19
 2085 01f9 02       		.uleb128 0x2
 2086 01fa 18       		.uleb128 0x18
 2087 01fb 00       		.byte	0
 2088 01fc 00       		.byte	0
 2089 01fd 23       		.uleb128 0x23
 2090 01fe 0F       		.uleb128 0xf
 2091 01ff 00       		.byte	0
 2092 0200 0B       		.uleb128 0xb
 2093 0201 0B       		.uleb128 0xb
 2094 0202 49       		.uleb128 0x49
 2095 0203 13       		.uleb128 0x13
 2096 0204 00       		.byte	0
 2097 0205 00       		.byte	0
 2098 0206 24       		.uleb128 0x24
 2099 0207 2E       		.uleb128 0x2e
 2100 0208 01       		.byte	0x1
 2101 0209 3F       		.uleb128 0x3f
 2102 020a 19       		.uleb128 0x19
 2103 020b 03       		.uleb128 0x3
 2104 020c 0E       		.uleb128 0xe
 2105 020d 3A       		.uleb128 0x3a
 2106 020e 0B       		.uleb128 0xb
 2107 020f 3B       		.uleb128 0x3b
 2108 0210 0B       		.uleb128 0xb
 2109 0211 49       		.uleb128 0x49
 2110 0212 13       		.uleb128 0x13
 2111 0213 3C       		.uleb128 0x3c
 2112 0214 19       		.uleb128 0x19
 2113 0215 01       		.uleb128 0x1
 2114 0216 13       		.uleb128 0x13
 2115 0217 00       		.byte	0
 2116 0218 00       		.byte	0
 2117 0219 25       		.uleb128 0x25
 2118 021a 18       		.uleb128 0x18
 2119 021b 00       		.byte	0
 2120 021c 00       		.byte	0
 2121 021d 00       		.byte	0
 2122 021e 26       		.uleb128 0x26
 2123 021f 2E       		.uleb128 0x2e
 2124 0220 01       		.byte	0x1
 2125 0221 3F       		.uleb128 0x3f
 2126 0222 19       		.uleb128 0x19
 2127 0223 03       		.uleb128 0x3
 2128 0224 0E       		.uleb128 0xe
 2129 0225 3A       		.uleb128 0x3a
 2130 0226 0B       		.uleb128 0xb
 2131 0227 3B       		.uleb128 0x3b
 2132 0228 0B       		.uleb128 0xb
 2133 0229 27       		.uleb128 0x27
 2134 022a 19       		.uleb128 0x19
 2135 022b 3C       		.uleb128 0x3c
 2136 022c 19       		.uleb128 0x19
 2137 022d 01       		.uleb128 0x1
 2138 022e 13       		.uleb128 0x13
 2139 022f 00       		.byte	0
 2140 0230 00       		.byte	0
 2141 0231 27       		.uleb128 0x27
 2142 0232 05       		.uleb128 0x5
 2143 0233 00       		.byte	0
 2144 0234 49       		.uleb128 0x49
 2145 0235 13       		.uleb128 0x13
 2146 0236 00       		.byte	0
 2147 0237 00       		.byte	0
 2148 0238 28       		.uleb128 0x28
 2149 0239 2E       		.uleb128 0x2e
 2150 023a 01       		.byte	0x1
 2151 023b 3F       		.uleb128 0x3f
 2152 023c 19       		.uleb128 0x19
 2153 023d 03       		.uleb128 0x3
 2154 023e 0E       		.uleb128 0xe
 2155 023f 3A       		.uleb128 0x3a
 2156 0240 0B       		.uleb128 0xb
 2157 0241 3B       		.uleb128 0x3b
 2158 0242 0B       		.uleb128 0xb
 2159 0243 27       		.uleb128 0x27
 2160 0244 19       		.uleb128 0x19
 2161 0245 49       		.uleb128 0x49
 2162 0246 13       		.uleb128 0x13
 2163 0247 3C       		.uleb128 0x3c
 2164 0248 19       		.uleb128 0x19
 2165 0249 00       		.byte	0
 2166 024a 00       		.byte	0
 2167 024b 00       		.byte	0
 2168              		.section	.debug_loc,"",%progbits
 2169              	.Ldebug_loc0:
 2170              	.LLST0:
 2171 0000 00000000 		.4byte	.LVL0-.Ltext0
 2172 0004 08000000 		.4byte	.LVL1-.Ltext0
 2173 0008 0100     		.2byte	0x1
 2174 000a 50       		.byte	0x50
 2175 000b 08000000 		.4byte	.LVL1-.Ltext0
 2176 000f 10000000 		.4byte	.LFE392-.Ltext0
 2177 0013 0400     		.2byte	0x4
 2178 0015 F3       		.byte	0xf3
 2179 0016 01       		.uleb128 0x1
 2180 0017 50       		.byte	0x50
 2181 0018 9F       		.byte	0x9f
 2182 0019 00000000 		.4byte	0
 2183 001d 00000000 		.4byte	0
 2184              	.LLST1:
 2185 0021 06010000 		.4byte	.LVL8-.Ltext0
 2186 0025 0C010000 		.4byte	.LVL9-.Ltext0
 2187 0029 0800     		.2byte	0x8
 2188 002b 71       		.byte	0x71
 2189 002c 00       		.sleb128 0
 2190 002d 08       		.byte	0x8
 2191 002e 38       		.byte	0x38
 2192 002f 1A       		.byte	0x1a
 2193 0030 33       		.byte	0x33
 2194 0031 25       		.byte	0x25
 2195 0032 9F       		.byte	0x9f
 2196 0033 00000000 		.4byte	0
 2197 0037 00000000 		.4byte	0
 2198              	.LLST2:
 2199 003b 9E010000 		.4byte	.LVL10-.Ltext0
 2200 003f A6010000 		.4byte	.LVL11-.Ltext0
 2201 0043 0100     		.2byte	0x1
 2202 0045 50       		.byte	0x50
 2203 0046 AE010000 		.4byte	.LVL12-.Ltext0
 2204 004a B4010000 		.4byte	.LVL13-.Ltext0
 2205 004e 0100     		.2byte	0x1
 2206 0050 50       		.byte	0x50
 2207 0051 B4010000 		.4byte	.LVL13-.Ltext0
 2208 0055 B6010000 		.4byte	.LVL14-.Ltext0
 2209 0059 0200     		.2byte	0x2
 2210 005b 73       		.byte	0x73
 2211 005c 38       		.sleb128 56
 2212 005d E6010000 		.4byte	.LVL15-.Ltext0
 2213 0061 EE010000 		.4byte	.LVL16-.Ltext0
 2214 0065 0300     		.2byte	0x3
 2215 0067 70       		.byte	0x70
 2216 0068 01       		.sleb128 1
 2217 0069 9F       		.byte	0x9f
 2218 006a F8010000 		.4byte	.LVL17-.Ltext0
 2219 006e 00020000 		.4byte	.LVL18-.Ltext0
 2220 0072 0300     		.2byte	0x3
 2221 0074 70       		.byte	0x70
 2222 0075 01       		.sleb128 1
 2223 0076 9F       		.byte	0x9f
 2224 0077 0A020000 		.4byte	.LVL19-.Ltext0
 2225 007b 12020000 		.4byte	.LVL20-.Ltext0
 2226 007f 0300     		.2byte	0x3
 2227 0081 70       		.byte	0x70
 2228 0082 01       		.sleb128 1
 2229 0083 9F       		.byte	0x9f
 2230 0084 1C020000 		.4byte	.LVL21-.Ltext0
 2231 0088 30020000 		.4byte	.LFE398-.Ltext0
 2232 008c 0300     		.2byte	0x3
 2233 008e 70       		.byte	0x70
 2234 008f 01       		.sleb128 1
 2235 0090 9F       		.byte	0x9f
 2236 0091 00000000 		.4byte	0
 2237 0095 00000000 		.4byte	0
 2238              		.section	.debug_aranges,"",%progbits
 2239 0000 1C000000 		.4byte	0x1c
 2240 0004 0200     		.2byte	0x2
 2241 0006 00000000 		.4byte	.Ldebug_info0
 2242 000a 04       		.byte	0x4
 2243 000b 00       		.byte	0
 2244 000c 0000     		.2byte	0
 2245 000e 0000     		.2byte	0
 2246 0010 00000000 		.4byte	.Ltext0
 2247 0014 30020000 		.4byte	.Letext0-.Ltext0
 2248 0018 00000000 		.4byte	0
 2249 001c 00000000 		.4byte	0
 2250              		.section	.debug_line,"",%progbits
 2251              	.Ldebug_line0:
 2252 0000 34010000 		.section	.debug_str,"MS",%progbits,1
 2252      0200B300 
 2252      00000201 
 2252      FB0E0D00 
 2252      01010101 
 2253              	.LASF47:
 2254 0000 504C4C53 		.ascii	"PLLSAICFGR\000"
 2254      41494346 
 2254      475200
 2255              	.LASF68:
 2256 000b 53515231 		.ascii	"SQR1\000"
 2256      00
 2257              	.LASF69:
 2258 0010 53515232 		.ascii	"SQR2\000"
 2258      00
 2259              	.LASF70:
 2260 0015 53515233 		.ascii	"SQR3\000"
 2260      00
 2261              	.LASF48:
 2262 001a 44434B43 		.ascii	"DCKCFGR\000"
 2262      46475200 
 2263              	.LASF108:
 2264 0022 64697663 		.ascii	"divclk\000"
 2264      6C6B00
 2265              	.LASF30:
 2266 0029 41504231 		.ascii	"APB1ENR\000"
 2266      454E5200 
 2267              	.LASF89:
 2268 0031 656E6162 		.ascii	"enable_ADC1\000"
 2268      6C655F41 
 2268      44433100 
 2269              	.LASF57:
 2270 003d 42535252 		.ascii	"BSRR\000"
 2270      00
 2271              	.LASF39:
 2272 0042 41504232 		.ascii	"APB2LPENR\000"
 2272      4C50454E 
 2272      5200
 2273              	.LASF23:
 2274 004c 41504232 		.ascii	"APB2RSTR\000"
 2274      52535452 
 2274      00
 2275              	.LASF11:
 2276 0055 756E7369 		.ascii	"unsigned int\000"
 2276      676E6564 
 2276      20696E74 
 2276      00
 2277              	.LASF97:
 2278 0062 54494D32 		.ascii	"TIM2\000"
 2278      00
 2279              	.LASF42:
 2280 0067 42444352 		.ascii	"BDCR\000"
 2280      00
 2281              	.LASF90:
 2282 006c 696E6974 		.ascii	"init_timer\000"
 2282      5F74696D 
 2282      657200
 2283              	.LASF118:
 2284 0077 5F5F4453 		.ascii	"__DSB\000"
 2284      4200
 2285              	.LASF35:
 2286 007d 41484232 		.ascii	"AHB2LPENR\000"
 2286      4C50454E 
 2286      5200
 2287              	.LASF105:
 2288 0087 6A616371 		.ascii	"jacques\000"
 2288      75657300 
 2289              	.LASF111:
 2290 008f 4144435F 		.ascii	"ADC_set_prediv\000"
 2290      7365745F 
 2290      70726564 
 2290      697600
 2291              	.LASF14:
 2292 009e 75696E74 		.ascii	"uint32_t\000"
 2292      33325F74 
 2292      00
 2293              	.LASF86:
 2294 00a7 42445452 		.ascii	"BDTR\000"
 2294      00
 2295              	.LASF93:
 2296 00ac 766F6C75 		.ascii	"volume\000"
 2296      6D6500
 2297              	.LASF51:
 2298 00b3 5243435F 		.ascii	"RCC_registers\000"
 2298      72656769 
 2298      73746572 
 2298      7300
 2299              	.LASF26:
 2300 00c1 41484231 		.ascii	"AHB1ENR\000"
 2300      454E5200 
 2301              	.LASF98:
 2302 00c9 62657263 		.ascii	"berceuse\000"
 2302      65757365 
 2302      00
 2303              	.LASF82:
 2304 00d2 43435231 		.ascii	"CCR1\000"
 2304      00
 2305              	.LASF45:
 2306 00d7 53534347 		.ascii	"SSCGR\000"
 2306      5200
 2307              	.LASF84:
 2308 00dd 43435233 		.ascii	"CCR3\000"
 2308      00
 2309              	.LASF85:
 2310 00e2 43435234 		.ascii	"CCR4\000"
 2310      00
 2311              	.LASF79:
 2312 00e7 43434D52 		.ascii	"CCMR1\000"
 2312      3100
 2313              	.LASF80:
 2314 00ed 43434D52 		.ascii	"CCMR2\000"
 2314      3200
 2315              	.LASF112:
 2316 00f3 4144435F 		.ascii	"ADC_set_sampling_time\000"
 2316      7365745F 
 2316      73616D70 
 2316      6C696E67 
 2316      5F74696D 
 2317              	.LASF10:
 2318 0109 6C6F6E67 		.ascii	"long long unsigned int\000"
 2318      206C6F6E 
 2318      6720756E 
 2318      7369676E 
 2318      65642069 
 2319              	.LASF4:
 2320 0120 5F5F7569 		.ascii	"__uint16_t\000"
 2320      6E743136 
 2320      5F7400
 2321              	.LASF53:
 2322 012b 4D4F4445 		.ascii	"MODER\000"
 2322      5200
 2323              	.LASF91:
 2324 0131 636F6E66 		.ascii	"configuration_potentiometre\000"
 2324      69677572 
 2324      6174696F 
 2324      6E5F706F 
 2324      74656E74 
 2325              	.LASF60:
 2326 014d 41465248 		.ascii	"AFRH\000"
 2326      00
 2327              	.LASF59:
 2328 0152 4146524C 		.ascii	"AFRL\000"
 2328      00
 2329              	.LASF20:
 2330 0157 41484233 		.ascii	"AHB3RSTR\000"
 2330      52535452 
 2330      00
 2331              	.LASF121:
 2332 0160 696E6974 		.ascii	"init_switchs\000"
 2332      5F737769 
 2332      74636873 
 2332      00
 2333              	.LASF21:
 2334 016d 5F726573 		.ascii	"_reserved_0x1c\000"
 2334      65727665 
 2334      645F3078 
 2334      316300
 2335              	.LASF78:
 2336 017c 44494552 		.ascii	"DIER\000"
 2336      00
 2337              	.LASF109:
 2338 0181 6D6F6465 		.ascii	"modeS\000"
 2338      5300
 2339              	.LASF28:
 2340 0187 41484233 		.ascii	"AHB3ENR\000"
 2340      454E5200 
 2341              	.LASF24:
 2342 018f 5F726573 		.ascii	"_reserved_0x28\000"
 2342      65727665 
 2342      645F3078 
 2342      323800
 2343              	.LASF62:
 2344 019e 534D5052 		.ascii	"SMPR1\000"
 2344      3100
 2345              	.LASF56:
 2346 01a4 50555044 		.ascii	"PUPDR\000"
 2346      5200
 2347              	.LASF22:
 2348 01aa 41504231 		.ascii	"APB1RSTR\000"
 2348      52535452 
 2348      00
 2349              	.LASF81:
 2350 01b3 43434552 		.ascii	"CCER\000"
 2350      00
 2351              	.LASF87:
 2352 01b8 444D4152 		.ascii	"DMAR\000"
 2352      00
 2353              	.LASF25:
 2354 01bd 5F726573 		.ascii	"_reserved_0x2c\000"
 2354      65727665 
 2354      645F3078 
 2354      326300
 2355              	.LASF12:
 2356 01cc 75696E74 		.ascii	"uint8_t\000"
 2356      385F7400 
 2357              	.LASF77:
 2358 01d4 534D4352 		.ascii	"SMCR\000"
 2358      00
 2359              	.LASF96:
 2360 01d9 41444331 		.ascii	"ADC1\000"
 2360      00
 2361              	.LASF29:
 2362 01de 5F726573 		.ascii	"_reserved_0x3c\000"
 2362      65727665 
 2362      645F3078 
 2362      336300
 2363              	.LASF9:
 2364 01ed 6C6F6E67 		.ascii	"long long int\000"
 2364      206C6F6E 
 2364      6720696E 
 2364      7400
 2365              	.LASF100:
 2366 01fb 636C6169 		.ascii	"clair\000"
 2366      7200
 2367              	.LASF38:
 2368 0201 41504231 		.ascii	"APB1LPENR\000"
 2368      4C50454E 
 2368      5200
 2369              	.LASF32:
 2370 020b 5F726573 		.ascii	"_reserved_0x48\000"
 2370      65727665 
 2370      645F3078 
 2370      343800
 2371              	.LASF76:
 2372 021a 54494D78 		.ascii	"TIMx_registers\000"
 2372      5F726567 
 2372      69737465 
 2372      727300
 2373              	.LASF33:
 2374 0229 5F726573 		.ascii	"_reserved_0x4c\000"
 2374      65727665 
 2374      645F3078 
 2374      346300
 2375              	.LASF95:
 2376 0238 4750494F 		.ascii	"GPIOA\000"
 2376      4100
 2377              	.LASF94:
 2378 023e 4750494F 		.ascii	"GPIOB\000"
 2378      4200
 2379              	.LASF71:
 2380 0244 4A535152 		.ascii	"JSQR\000"
 2380      00
 2381              	.LASF31:
 2382 0249 41504232 		.ascii	"APB2ENR\000"
 2382      454E5200 
 2383              	.LASF50:
 2384 0251 44434B43 		.ascii	"DCKCFGR2\000"
 2384      46475232 
 2384      00
 2385              	.LASF116:
 2386 025a 7372632F 		.ascii	"src/fonctions.c\000"
 2386      666F6E63 
 2386      74696F6E 
 2386      732E6300 
 2387              	.LASF63:
 2388 026a 534D5052 		.ascii	"SMPR2\000"
 2388      3200
 2389              	.LASF55:
 2390 0270 4F535045 		.ascii	"OSPEEDR\000"
 2390      45445200 
 2391              	.LASF37:
 2392 0278 5F726573 		.ascii	"_reserved_0x5c\000"
 2392      65727665 
 2392      645F3078 
 2392      356300
 2393              	.LASF88:
 2394 0287 656E6162 		.ascii	"enable_TIM2\000"
 2394      6C655F54 
 2394      494D3200 
 2395              	.LASF13:
 2396 0293 75696E74 		.ascii	"uint16_t\000"
 2396      31365F74 
 2396      00
 2397              	.LASF19:
 2398 029c 41484232 		.ascii	"AHB2RSTR\000"
 2398      52535452 
 2398      00
 2399              	.LASF40:
 2400 02a5 5F726573 		.ascii	"_reserved_0x68\000"
 2400      65727665 
 2400      645F3078 
 2400      363800
 2401              	.LASF114:
 2402 02b4 4144435F 		.ascii	"ADC_convert_single_channel\000"
 2402      636F6E76 
 2402      6572745F 
 2402      73696E67 
 2402      6C655F63 
 2403              	.LASF72:
 2404 02cf 4A445231 		.ascii	"JDR1\000"
 2404      00
 2405              	.LASF73:
 2406 02d4 4A445232 		.ascii	"JDR2\000"
 2406      00
 2407              	.LASF74:
 2408 02d9 4A445233 		.ascii	"JDR3\000"
 2408      00
 2409              	.LASF75:
 2410 02de 4A445234 		.ascii	"JDR4\000"
 2410      00
 2411              	.LASF2:
 2412 02e3 73686F72 		.ascii	"short int\000"
 2412      7420696E 
 2412      7400
 2413              	.LASF6:
 2414 02ed 6C6F6E67 		.ascii	"long int\000"
 2414      20696E74 
 2414      00
 2415              	.LASF41:
 2416 02f6 5F726573 		.ascii	"_reserved_0x6c\000"
 2416      65727665 
 2416      645F3078 
 2416      366300
 2417              	.LASF103:
 2418 0305 6D617269 		.ascii	"marionette\000"
 2418      6F6E6574 
 2418      746500
 2419              	.LASF119:
 2420 0310 4152525F 		.ascii	"ARR_Freq\000"
 2420      46726571 
 2420      00
 2421              	.LASF43:
 2422 0319 5F726573 		.ascii	"_reserved_0x78\000"
 2422      65727665 
 2422      645F3078 
 2422      373800
 2423              	.LASF54:
 2424 0328 4F545950 		.ascii	"OTYPER\000"
 2424      455200
 2425              	.LASF17:
 2426 032f 43464752 		.ascii	"CFGR\000"
 2426      00
 2427              	.LASF106:
 2428 0334 70744E5F 		.ascii	"ptN_melodie\000"
 2428      6D656C6F 
 2428      64696500 
 2429              	.LASF3:
 2430 0340 5F5F7569 		.ascii	"__uint8_t\000"
 2430      6E74385F 
 2430      7400
 2431              	.LASF44:
 2432 034a 5F726573 		.ascii	"_reserved_0x7c\000"
 2432      65727665 
 2432      645F3078 
 2432      376300
 2433              	.LASF16:
 2434 0359 504C4C43 		.ascii	"PLLCFGR\000"
 2434      46475200 
 2435              	.LASF36:
 2436 0361 41484233 		.ascii	"AHB3LPENR\000"
 2436      4C50454E 
 2436      5200
 2437              	.LASF15:
 2438 036b 73697A65 		.ascii	"sizetype\000"
 2438      74797065 
 2438      00
 2439              	.LASF8:
 2440 0374 6C6F6E67 		.ascii	"long unsigned int\000"
 2440      20756E73 
 2440      69676E65 
 2440      6420696E 
 2440      7400
 2441              	.LASF102:
 2442 0386 6E6F656C 		.ascii	"noel\000"
 2442      00
 2443              	.LASF27:
 2444 038b 41484232 		.ascii	"AHB2ENR\000"
 2444      454E5200 
 2445              	.LASF99:
 2446 0393 636F6C61 		.ascii	"colas\000"
 2446      7300
 2447              	.LASF113:
 2448 0399 4144435F 		.ascii	"ADC_init_single_channel\000"
 2448      696E6974 
 2448      5F73696E 
 2448      676C655F 
 2448      6368616E 
 2449              	.LASF46:
 2450 03b1 504C4C49 		.ascii	"PLLI2SCFGR\000"
 2450      32534346 
 2450      475200
 2451              	.LASF1:
 2452 03bc 756E7369 		.ascii	"unsigned char\000"
 2452      676E6564 
 2452      20636861 
 2452      7200
 2453              	.LASF7:
 2454 03ca 5F5F7569 		.ascii	"__uint32_t\000"
 2454      6E743332 
 2454      5F7400
 2455              	.LASF83:
 2456 03d5 43435232 		.ascii	"CCR2\000"
 2456      00
 2457              	.LASF117:
 2458 03da 2F686F6D 		.ascii	"/home/tom/COURS/S6/Projet_boiteMusique/c_project\000"
 2458      652F746F 
 2458      6D2F434F 
 2458      5552532F 
 2458      53362F50 
 2459              	.LASF107:
 2460 040b 7074445F 		.ascii	"ptD_melodie\000"
 2460      6D656C6F 
 2460      64696500 
 2461              	.LASF61:
 2462 0417 41444378 		.ascii	"ADCx_registers\000"
 2462      5F726567 
 2462      69737465 
 2462      727300
 2463              	.LASF92:
 2464 0426 73656C65 		.ascii	"select_melodie\000"
 2464      63745F6D 
 2464      656C6F64 
 2464      696500
 2465              	.LASF34:
 2466 0435 41484231 		.ascii	"AHB1LPENR\000"
 2466      4C50454E 
 2466      5200
 2467              	.LASF0:
 2468 043f 7369676E 		.ascii	"signed char\000"
 2468      65642063 
 2468      68617200 
 2469              	.LASF110:
 2470 044b 6765745F 		.ascii	"get_APB1TIMCLK\000"
 2470      41504231 
 2470      54494D43 
 2470      4C4B00
 2471              	.LASF5:
 2472 045a 73686F72 		.ascii	"short unsigned int\000"
 2472      7420756E 
 2472      7369676E 
 2472      65642069 
 2472      6E7400
 2473              	.LASF120:
 2474 046d 6D657375 		.ascii	"mesure_potentiometre\000"
 2474      72655F70 
 2474      6F74656E 
 2474      74696F6D 
 2474      65747265 
 2475              	.LASF64:
 2476 0482 4A4F4652 		.ascii	"JOFR1\000"
 2476      3100
 2477              	.LASF65:
 2478 0488 4A4F4652 		.ascii	"JOFR2\000"
 2478      3200
 2479              	.LASF66:
 2480 048e 4A4F4652 		.ascii	"JOFR3\000"
 2480      3300
 2481              	.LASF67:
 2482 0494 4A4F4652 		.ascii	"JOFR4\000"
 2482      3400
 2483              	.LASF52:
 2484 049a 4750494F 		.ascii	"GPIO_registers\000"
 2484      5F726567 
 2484      69737465 
 2484      727300
 2485              	.LASF104:
 2486 04a9 646F646F 		.ascii	"dodo\000"
 2486      00
 2487              	.LASF101:
 2488 04ae 73616C76 		.ascii	"salv\000"
 2488      00
 2489              	.LASF115:
 2490 04b3 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mtune=cortex-m4 "
 2490      4320342E 
 2490      392E3320 
 2490      32303135 
 2490      30353239 
 2491 04e6 2D6D7468 		.ascii	"-mthumb -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4"
 2491      756D6220 
 2491      2D6D6172 
 2491      63683D61 
 2491      726D7637 
 2492 0519 2D73702D 		.ascii	"-sp-d16 -g -O0 -Os -fsingle-precision-constant\000"
 2492      64313620 
 2492      2D67202D 
 2492      4F30202D 
 2492      4F73202D 
 2493              	.LASF18:
 2494 0548 41484231 		.ascii	"AHB1RSTR\000"
 2494      52535452 
 2494      00
 2495              	.LASF58:
 2496 0551 4C434B52 		.ascii	"LCKR\000"
 2496      00
 2497              	.LASF49:
 2498 0556 434B4741 		.ascii	"CKGATENR\000"
 2498      54454E52 
 2498      00
 2499              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fonctions.c
     /tmp/ccQeiive.s:20     .text:0000000000000000 $t
     /tmp/ccQeiive.s:25     .text:0000000000000000 ARR_Freq
     /tmp/ccQeiive.s:44     .text:000000000000000c $d
     /tmp/ccQeiive.s:48     .text:0000000000000010 $t
     /tmp/ccQeiive.s:53     .text:0000000000000010 init_timer
     /tmp/ccQeiive.s:137    .text:0000000000000080 $d
     /tmp/ccQeiive.s:144    .text:0000000000000090 $t
     /tmp/ccQeiive.s:149    .text:0000000000000090 configuration_potentiometre
     /tmp/ccQeiive.s:214    .text:00000000000000d0 $d
     /tmp/ccQeiive.s:220    .text:00000000000000dc $t
     /tmp/ccQeiive.s:225    .text:00000000000000dc mesure_potentiometre
     /tmp/ccQeiive.s:239    .text:00000000000000e4 $d
     /tmp/ccQeiive.s:243    .text:00000000000000e8 $t
     /tmp/ccQeiive.s:248    .text:00000000000000e8 init_switchs
     /tmp/ccQeiive.s:268    .text:00000000000000fc $d
     /tmp/ccQeiive.s:272    .text:0000000000000100 $t
     /tmp/ccQeiive.s:277    .text:0000000000000100 select_melodie
     /tmp/ccQeiive.s:309    .text:0000000000000120 $d
     /tmp/ccQeiive.s:376    .text:0000000000000168 $d
                            *COM*:0000000000000001 modeS
                            *COM*:0000000000000004 ptN_melodie
                            *COM*:0000000000000004 ptD_melodie
     /tmp/ccQeiive.s:391    .text:0000000000000198 $t
     /tmp/ccQeiive.s:396    .text:0000000000000198 volume
     /tmp/ccQeiive.s:429    .text:00000000000001be $d
     /tmp/ccQeiive.s:449    .text:00000000000001d2 $t
     /tmp/ccQeiive.s:508    .text:0000000000000228 $d
     /tmp/ccQeiive.s:522    .data:0000000000000000 divclk
     /tmp/ccQeiive.s:518    .data:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccQeiive.s:316    .text:0000000000000127 $d
     /tmp/ccQeiive.s:316    .text:0000000000000128 $t

UNDEFINED SYMBOLS
get_APB1TIMCLK
GPIOB
RCC
TIM2
ADC_set_prediv
ADC_set_sampling_time
ADC_init_single_channel
ADC1
ADC_convert_single_channel
clair
berceuse
colas
noel
salv
marionette
dodo
jacques
GPIOA
