   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"power.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.global	set_voltage_scale
  22              		.thumb
  23              		.thumb_func
  24              		.type	set_voltage_scale, %function
  25              	set_voltage_scale:
  26              	.LFB392:
  27              		.file 1 "src/sys/power.c"
   1:src/sys/power.c **** #include "power.h"
   2:src/sys/power.c **** #include "devices.h"
   3:src/sys/power.c **** #include "cm4.h"
   4:src/sys/power.c **** 
   5:src/sys/power.c ****  
   6:src/sys/power.c **** void set_voltage_scale(VOS scale) {
  28              		.loc 1 6 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.LBB24:
  35              	.LBB25:
  36              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 677:src/sys/devices.h **** __declare_device_control(SPI4,APB2,13)
 678:src/sys/devices.h **** __declare_device_control(SPI1,APB2,12)
 679:src/sys/devices.h **** __declare_device_control(SDMMC,APB2,11)
 680:src/sys/devices.h **** __declare_device_control(ADC3,APB2,8)
 681:src/sys/devices.h **** __declare_device_control(ADC2,APB2,8)
 682:src/sys/devices.h **** __declare_device_control(ADC1,APB2,8)
 683:src/sys/devices.h **** __declare_device_control(USART6,APB2,5)
 684:src/sys/devices.h **** __declare_device_control(USART1,APB2,4)
 685:src/sys/devices.h **** __declare_device_control(TIM8,APB2,1)
 686:src/sys/devices.h **** __declare_device_control(TIM1,APB2,0)
 687:src/sys/devices.h **** 
 688:src/sys/devices.h **** __declare_device_control(DAC,APB1,29)
 689:src/sys/devices.h **** __declare_device_control(PWR,APB1,28)
  37              		.loc 2 689 0
  38 0000 084A     		ldr	r2, .L2
  39 0002 136C     		ldr	r3, [r2, #64]
  40 0004 43F08053 		orr	r3, r3, #268435456
  41 0008 1364     		str	r3, [r2, #64]
  42              	.LBB26:
  43              	.LBB27:
  44              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  45              		.loc 3 428 0
  46              	@ 428 "src/sys/cmsis_gcc.h" 1
  47 000a BFF34F8F 		dsb 0xF
  48              	@ 0 "" 2
  49              		.thumb
  50              	.LBE27:
  51              	.LBE26:
  52              	.LBE25:
  53              	.LBE24:
   7:src/sys/power.c ****   enable_PWR();
   8:src/sys/power.c ****   PWR.CR = (PWR.CR & ~(3<<14)) |((scale&0x3)<<14);
  54              		.loc 1 8 0
  55 000e 064A     		ldr	r2, .L2+4
  56 0010 1368     		ldr	r3, [r2]
  57 0012 8003     		lsls	r0, r0, #14
  58              	.LVL1:
  59 0014 23F44043 		bic	r3, r3, #49152
  60 0018 80B2     		uxth	r0, r0
  61 001a 1843     		orrs	r0, r0, r3
  62 001c 1060     		str	r0, [r2]
  63              	.LBB28:
  64              	.LBB29:
  65              		.loc 3 428 0
  66              	@ 428 "src/sys/cmsis_gcc.h" 1
  67 001e BFF34F8F 		dsb 0xF
  68              	@ 0 "" 2
  69              		.thumb
  70 0022 7047     		bx	lr
  71              	.L3:
  72              		.align	2
  73              	.L2:
  74 0024 00000000 		.word	RCC
  75 0028 00000000 		.word	PWR
  76              	.LBE29:
  77              	.LBE28:
  78              		.cfi_endproc
  79              	.LFE392:
  80              		.size	set_voltage_scale, .-set_voltage_scale
  81              		.align	1
  82              		.global	get_voltage_scale
  83              		.thumb
  84              		.thumb_func
  85              		.type	get_voltage_scale, %function
  86              	get_voltage_scale:
  87              	.LFB393:
   9:src/sys/power.c ****   __DSB();
  10:src/sys/power.c **** }
  11:src/sys/power.c **** 
  12:src/sys/power.c **** VOS get_voltage_scale() {
  88              		.loc 1 12 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.LBB30:
  94              	.LBB31:
  95              		.loc 2 689 0
  96 002c 054A     		ldr	r2, .L5
  97 002e 136C     		ldr	r3, [r2, #64]
  98 0030 43F08053 		orr	r3, r3, #268435456
  99 0034 1364     		str	r3, [r2, #64]
 100              	.LBB32:
 101              	.LBB33:
 102              		.loc 3 428 0
 103              	@ 428 "src/sys/cmsis_gcc.h" 1
 104 0036 BFF34F8F 		dsb 0xF
 105              	@ 0 "" 2
 106              		.thumb
 107              	.LBE33:
 108              	.LBE32:
 109              	.LBE31:
 110              	.LBE30:
  13:src/sys/power.c ****   enable_PWR();
  14:src/sys/power.c ****   return ((PWR.CR>>14)&0x3);
 111              		.loc 1 14 0
 112 003a 034B     		ldr	r3, .L5+4
 113 003c 1868     		ldr	r0, [r3]
  15:src/sys/power.c **** }
 114              		.loc 1 15 0
 115 003e C0F38130 		ubfx	r0, r0, #14, #2
 116 0042 7047     		bx	lr
 117              	.L6:
 118              		.align	2
 119              	.L5:
 120 0044 00000000 		.word	RCC
 121 0048 00000000 		.word	PWR
 122              		.cfi_endproc
 123              	.LFE393:
 124              		.size	get_voltage_scale, .-get_voltage_scale
 125              		.align	1
 126              		.global	start_Overdrive
 127              		.thumb
 128              		.thumb_func
 129              		.type	start_Overdrive, %function
 130              	start_Overdrive:
 131              	.LFB394:
  16:src/sys/power.c **** 
  17:src/sys/power.c **** void start_Overdrive() {
 132              		.loc 1 17 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137              	.LBB34:
 138              	.LBB35:
 139              		.loc 2 689 0
 140 004c 0B4A     		ldr	r2, .L15
 141 004e 136C     		ldr	r3, [r2, #64]
 142 0050 43F08053 		orr	r3, r3, #268435456
 143 0054 1364     		str	r3, [r2, #64]
 144              	.LBB36:
 145              	.LBB37:
 146              		.loc 3 428 0
 147              	@ 428 "src/sys/cmsis_gcc.h" 1
 148 0056 BFF34F8F 		dsb 0xF
 149              	@ 0 "" 2
 150              		.thumb
 151              	.LBE37:
 152              	.LBE36:
 153              	.LBE35:
 154              	.LBE34:
  18:src/sys/power.c ****   enable_PWR();
  19:src/sys/power.c ****   /* Start overdrive */
  20:src/sys/power.c ****   PWR.CR |= (1<<16);
 155              		.loc 1 20 0
 156 005a 094B     		ldr	r3, .L15+4
 157 005c 1A68     		ldr	r2, [r3]
 158 005e 42F48032 		orr	r2, r2, #65536
 159 0062 1A60     		str	r2, [r3]
 160              	.L8:
  21:src/sys/power.c ****   while ((PWR.CSR&(1<<16))==0);
 161              		.loc 1 21 0 discriminator 1
 162 0064 5A68     		ldr	r2, [r3, #4]
 163 0066 0649     		ldr	r1, .L15+4
 164 0068 D003     		lsls	r0, r2, #15
 165 006a FBD5     		bpl	.L8
  22:src/sys/power.c ****   /* Switch to overdrive */
  23:src/sys/power.c ****   PWR.CR |= (1<<17);
 166              		.loc 1 23 0
 167 006c 0A68     		ldr	r2, [r1]
 168 006e 42F40032 		orr	r2, r2, #131072
 169 0072 0A60     		str	r2, [r1]
 170              	.L9:
  24:src/sys/power.c ****   while ((PWR.CSR&(1<<17))==0);
 171              		.loc 1 24 0 discriminator 1
 172 0074 5A68     		ldr	r2, [r3, #4]
 173 0076 9203     		lsls	r2, r2, #14
 174 0078 FCD5     		bpl	.L9
  25:src/sys/power.c **** }
 175              		.loc 1 25 0
 176 007a 7047     		bx	lr
 177              	.L16:
 178              		.align	2
 179              	.L15:
 180 007c 00000000 		.word	RCC
 181 0080 00000000 		.word	PWR
 182              		.cfi_endproc
 183              	.LFE394:
 184              		.size	start_Overdrive, .-start_Overdrive
 185              		.align	1
 186              		.global	stop_Overdrive
 187              		.thumb
 188              		.thumb_func
 189              		.type	stop_Overdrive, %function
 190              	stop_Overdrive:
 191              	.LFB395:
  26:src/sys/power.c **** 
  27:src/sys/power.c **** void stop_Overdrive() {
 192              		.loc 1 27 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197              	.LBB38:
 198              	.LBB39:
 199              		.loc 2 689 0
 200 0084 074A     		ldr	r2, .L18
 201 0086 136C     		ldr	r3, [r2, #64]
 202 0088 43F08053 		orr	r3, r3, #268435456
 203 008c 1364     		str	r3, [r2, #64]
 204              	.LBB40:
 205              	.LBB41:
 206              		.loc 3 428 0
 207              	@ 428 "src/sys/cmsis_gcc.h" 1
 208 008e BFF34F8F 		dsb 0xF
 209              	@ 0 "" 2
 210              		.thumb
 211              	.LBE41:
 212              	.LBE40:
 213              	.LBE39:
 214              	.LBE38:
  28:src/sys/power.c ****   enable_PWR();
  29:src/sys/power.c ****   /* Stop overdrive */
  30:src/sys/power.c ****   PWR.CR &= ~((1<<16)|(1<<17));
 215              		.loc 1 30 0
 216 0092 054A     		ldr	r2, .L18+4
 217 0094 1368     		ldr	r3, [r2]
 218 0096 23F44033 		bic	r3, r3, #196608
 219 009a 1360     		str	r3, [r2]
 220              	.LBB42:
 221              	.LBB43:
 222              		.loc 3 428 0
 223              	@ 428 "src/sys/cmsis_gcc.h" 1
 224 009c BFF34F8F 		dsb 0xF
 225              	@ 0 "" 2
 226              		.thumb
 227 00a0 7047     		bx	lr
 228              	.L19:
 229 00a2 00BF     		.align	2
 230              	.L18:
 231 00a4 00000000 		.word	RCC
 232 00a8 00000000 		.word	PWR
 233              	.LBE43:
 234              	.LBE42:
 235              		.cfi_endproc
 236              	.LFE395:
 237              		.size	stop_Overdrive, .-stop_Overdrive
 238              	.Letext0:
 239              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 240              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 241              		.file 6 "src/sys/power.h"
 242              		.section	.debug_info,"",%progbits
 243              	.Ldebug_info0:
 244 0000 E8030000 		.4byte	0x3e8
 245 0004 0400     		.2byte	0x4
 246 0006 00000000 		.4byte	.Ldebug_abbrev0
 247 000a 04       		.byte	0x4
 248 000b 01       		.uleb128 0x1
 249 000c 56010000 		.4byte	.LASF56
 250 0010 01       		.byte	0x1
 251 0011 99000000 		.4byte	.LASF57
 252 0015 C5000000 		.4byte	.LASF58
 253 0019 00000000 		.4byte	.Ltext0
 254 001d AC000000 		.4byte	.Letext0-.Ltext0
 255 0021 00000000 		.4byte	.Ldebug_line0
 256 0025 02       		.uleb128 0x2
 257 0026 01       		.byte	0x1
 258 0027 06       		.byte	0x6
 259 0028 02       		.byte	0x2
 260 0029 40000000 		.4byte	0x40
 261 002d 03       		.uleb128 0x3
 262 002e 19000000 		.4byte	.LASF0
 263 0032 03       		.sleb128 3
 264 0033 03       		.uleb128 0x3
 265 0034 20000000 		.4byte	.LASF1
 266 0038 02       		.sleb128 2
 267 0039 03       		.uleb128 0x3
 268 003a 27000000 		.4byte	.LASF2
 269 003e 01       		.sleb128 1
 270 003f 00       		.byte	0
 271 0040 04       		.uleb128 0x4
 272 0041 564F5300 		.ascii	"VOS\000"
 273 0045 06       		.byte	0x6
 274 0046 02       		.byte	0x2
 275 0047 25000000 		.4byte	0x25
 276 004b 05       		.uleb128 0x5
 277 004c 01       		.byte	0x1
 278 004d 06       		.byte	0x6
 279 004e 2E000000 		.4byte	.LASF3
 280 0052 05       		.uleb128 0x5
 281 0053 01       		.byte	0x1
 282 0054 08       		.byte	0x8
 283 0055 EB010000 		.4byte	.LASF4
 284 0059 05       		.uleb128 0x5
 285 005a 02       		.byte	0x2
 286 005b 05       		.byte	0x5
 287 005c 3A000000 		.4byte	.LASF5
 288 0060 05       		.uleb128 0x5
 289 0061 02       		.byte	0x2
 290 0062 07       		.byte	0x7
 291 0063 81020000 		.4byte	.LASF6
 292 0067 05       		.uleb128 0x5
 293 0068 04       		.byte	0x4
 294 0069 05       		.byte	0x5
 295 006a 3B010000 		.4byte	.LASF7
 296 006e 06       		.uleb128 0x6
 297 006f 75000000 		.4byte	.LASF8
 298 0073 04       		.byte	0x4
 299 0074 41       		.byte	0x41
 300 0075 79000000 		.4byte	0x79
 301 0079 05       		.uleb128 0x5
 302 007a 04       		.byte	0x4
 303 007b 07       		.byte	0x7
 304 007c BC020000 		.4byte	.LASF9
 305 0080 05       		.uleb128 0x5
 306 0081 08       		.byte	0x8
 307 0082 05       		.byte	0x5
 308 0083 1D010000 		.4byte	.LASF10
 309 0087 05       		.uleb128 0x5
 310 0088 08       		.byte	0x8
 311 0089 07       		.byte	0x7
 312 008a 16020000 		.4byte	.LASF11
 313 008e 07       		.uleb128 0x7
 314 008f 04       		.byte	0x4
 315 0090 05       		.byte	0x5
 316 0091 696E7400 		.ascii	"int\000"
 317 0095 05       		.uleb128 0x5
 318 0096 04       		.byte	0x4
 319 0097 07       		.byte	0x7
 320 0098 3C020000 		.4byte	.LASF12
 321 009c 06       		.uleb128 0x6
 322 009d 2D020000 		.4byte	.LASF13
 323 00a1 05       		.byte	0x5
 324 00a2 20       		.byte	0x20
 325 00a3 6E000000 		.4byte	0x6e
 326 00a7 05       		.uleb128 0x5
 327 00a8 04       		.byte	0x4
 328 00a9 07       		.byte	0x7
 329 00aa 44000000 		.4byte	.LASF14
 330 00ae 08       		.uleb128 0x8
 331 00af CE020000 		.4byte	.LASF15
 332 00b3 08       		.byte	0x8
 333 00b4 02       		.byte	0x2
 334 00b5 62       		.byte	0x62
 335 00b6 D2000000 		.4byte	0xd2
 336 00ba 09       		.uleb128 0x9
 337 00bb 435200   		.ascii	"CR\000"
 338 00be 02       		.byte	0x2
 339 00bf 63       		.byte	0x63
 340 00c0 9C000000 		.4byte	0x9c
 341 00c4 00       		.byte	0
 342 00c5 09       		.uleb128 0x9
 343 00c6 43535200 		.ascii	"CSR\000"
 344 00ca 02       		.byte	0x2
 345 00cb 64       		.byte	0x64
 346 00cc 9C000000 		.4byte	0x9c
 347 00d0 04       		.byte	0x4
 348 00d1 00       		.byte	0
 349 00d2 08       		.uleb128 0x8
 350 00d3 52020000 		.4byte	.LASF16
 351 00d7 98       		.byte	0x98
 352 00d8 02       		.byte	0x2
 353 00d9 68       		.byte	0x68
 354 00da A6020000 		.4byte	0x2a6
 355 00de 09       		.uleb128 0x9
 356 00df 435200   		.ascii	"CR\000"
 357 00e2 02       		.byte	0x2
 358 00e3 69       		.byte	0x69
 359 00e4 9C000000 		.4byte	0x9c
 360 00e8 00       		.byte	0
 361 00e9 0A       		.uleb128 0xa
 362 00ea 60020000 		.4byte	.LASF17
 363 00ee 02       		.byte	0x2
 364 00ef 6A       		.byte	0x6a
 365 00f0 9C000000 		.4byte	0x9c
 366 00f4 04       		.byte	0x4
 367 00f5 0A       		.uleb128 0xa
 368 00f6 A9000000 		.4byte	.LASF18
 369 00fa 02       		.byte	0x2
 370 00fb 6B       		.byte	0x6b
 371 00fc 9C000000 		.4byte	0x9c
 372 0100 08       		.byte	0x8
 373 0101 09       		.uleb128 0x9
 374 0102 43495200 		.ascii	"CIR\000"
 375 0106 02       		.byte	0x2
 376 0107 6C       		.byte	0x6c
 377 0108 9C000000 		.4byte	0x9c
 378 010c 0C       		.byte	0xc
 379 010d 0A       		.uleb128 0xa
 380 010e 0D030000 		.4byte	.LASF19
 381 0112 02       		.byte	0x2
 382 0113 6D       		.byte	0x6d
 383 0114 9C000000 		.4byte	0x9c
 384 0118 10       		.byte	0x10
 385 0119 0A       		.uleb128 0xa
 386 011a 49020000 		.4byte	.LASF20
 387 011e 02       		.byte	0x2
 388 011f 6E       		.byte	0x6e
 389 0120 9C000000 		.4byte	0x9c
 390 0124 14       		.byte	0x14
 391 0125 0A       		.uleb128 0xa
 392 0126 25030000 		.4byte	.LASF21
 393 012a 02       		.byte	0x2
 394 012b 6F       		.byte	0x6f
 395 012c 9C000000 		.4byte	0x9c
 396 0130 18       		.byte	0x18
 397 0131 0A       		.uleb128 0xa
 398 0132 94020000 		.4byte	.LASF22
 399 0136 02       		.byte	0x2
 400 0137 70       		.byte	0x70
 401 0138 9C000000 		.4byte	0x9c
 402 013c 1C       		.byte	0x1c
 403 013d 0A       		.uleb128 0xa
 404 013e 80000000 		.4byte	.LASF23
 405 0142 02       		.byte	0x2
 406 0143 71       		.byte	0x71
 407 0144 9C000000 		.4byte	0x9c
 408 0148 20       		.byte	0x20
 409 0149 0A       		.uleb128 0xa
 410 014a 4D010000 		.4byte	.LASF24
 411 014e 02       		.byte	0x2
 412 014f 72       		.byte	0x72
 413 0150 9C000000 		.4byte	0x9c
 414 0154 24       		.byte	0x24
 415 0155 0A       		.uleb128 0xa
 416 0156 16030000 		.4byte	.LASF25
 417 015a 02       		.byte	0x2
 418 015b 73       		.byte	0x73
 419 015c 9C000000 		.4byte	0x9c
 420 0160 28       		.byte	0x28
 421 0161 0A       		.uleb128 0xa
 422 0162 55030000 		.4byte	.LASF26
 423 0166 02       		.byte	0x2
 424 0167 74       		.byte	0x74
 425 0168 9C000000 		.4byte	0x9c
 426 016c 2C       		.byte	0x2c
 427 016d 0A       		.uleb128 0xa
 428 016e EB020000 		.4byte	.LASF27
 429 0172 02       		.byte	0x2
 430 0173 75       		.byte	0x75
 431 0174 9C000000 		.4byte	0x9c
 432 0178 30       		.byte	0x30
 433 0179 0A       		.uleb128 0xa
 434 017a 0D010000 		.4byte	.LASF28
 435 017e 02       		.byte	0x2
 436 017f 76       		.byte	0x76
 437 0180 9C000000 		.4byte	0x9c
 438 0184 34       		.byte	0x34
 439 0185 0A       		.uleb128 0xa
 440 0186 15010000 		.4byte	.LASF29
 441 018a 02       		.byte	0x2
 442 018b 77       		.byte	0x77
 443 018c 9C000000 		.4byte	0x9c
 444 0190 38       		.byte	0x38
 445 0191 0A       		.uleb128 0xa
 446 0192 AE000000 		.4byte	.LASF30
 447 0196 02       		.byte	0x2
 448 0197 78       		.byte	0x78
 449 0198 9C000000 		.4byte	0x9c
 450 019c 3C       		.byte	0x3c
 451 019d 0A       		.uleb128 0xa
 452 019e BD000000 		.4byte	.LASF31
 453 01a2 02       		.byte	0x2
 454 01a3 79       		.byte	0x79
 455 01a4 9C000000 		.4byte	0x9c
 456 01a8 40       		.byte	0x40
 457 01a9 0A       		.uleb128 0xa
 458 01aa 08020000 		.4byte	.LASF32
 459 01ae 02       		.byte	0x2
 460 01af 7A       		.byte	0x7a
 461 01b0 9C000000 		.4byte	0x9c
 462 01b4 44       		.byte	0x44
 463 01b5 0A       		.uleb128 0xa
 464 01b6 68020000 		.4byte	.LASF33
 465 01ba 02       		.byte	0x2
 466 01bb 7B       		.byte	0x7b
 467 01bc 9C000000 		.4byte	0x9c
 468 01c0 48       		.byte	0x48
 469 01c1 0A       		.uleb128 0xa
 470 01c2 F9010000 		.4byte	.LASF34
 471 01c6 02       		.byte	0x2
 472 01c7 7C       		.byte	0x7c
 473 01c8 9C000000 		.4byte	0x9c
 474 01cc 4C       		.byte	0x4c
 475 01cd 0A       		.uleb128 0xa
 476 01ce 00000000 		.4byte	.LASF35
 477 01d2 02       		.byte	0x2
 478 01d3 7D       		.byte	0x7d
 479 01d4 9C000000 		.4byte	0x9c
 480 01d8 50       		.byte	0x50
 481 01d9 0A       		.uleb128 0xa
 482 01da A3020000 		.4byte	.LASF36
 483 01de 02       		.byte	0x2
 484 01df 7E       		.byte	0x7e
 485 01e0 9C000000 		.4byte	0x9c
 486 01e4 54       		.byte	0x54
 487 01e5 0A       		.uleb128 0xa
 488 01e6 8F000000 		.4byte	.LASF37
 489 01ea 02       		.byte	0x2
 490 01eb 7F       		.byte	0x7f
 491 01ec 9C000000 		.4byte	0x9c
 492 01f0 58       		.byte	0x58
 493 01f1 0A       		.uleb128 0xa
 494 01f2 DC020000 		.4byte	.LASF38
 495 01f6 02       		.byte	0x2
 496 01f7 80       		.byte	0x80
 497 01f8 9C000000 		.4byte	0x9c
 498 01fc 5C       		.byte	0x5c
 499 01fd 0A       		.uleb128 0xa
 500 01fe 77020000 		.4byte	.LASF39
 501 0202 02       		.byte	0x2
 502 0203 81       		.byte	0x81
 503 0204 9C000000 		.4byte	0x9c
 504 0208 60       		.byte	0x60
 505 0209 0A       		.uleb128 0xa
 506 020a 4B030000 		.4byte	.LASF40
 507 020e 02       		.byte	0x2
 508 020f 82       		.byte	0x82
 509 0210 9C000000 		.4byte	0x9c
 510 0214 64       		.byte	0x64
 511 0215 0A       		.uleb128 0xa
 512 0216 FE020000 		.4byte	.LASF41
 513 021a 02       		.byte	0x2
 514 021b 83       		.byte	0x83
 515 021c 9C000000 		.4byte	0x9c
 516 0220 68       		.byte	0x68
 517 0221 0A       		.uleb128 0xa
 518 0222 0A000000 		.4byte	.LASF42
 519 0226 02       		.byte	0x2
 520 0227 84       		.byte	0x84
 521 0228 9C000000 		.4byte	0x9c
 522 022c 6C       		.byte	0x6c
 523 022d 0A       		.uleb128 0xa
 524 022e 4D000000 		.4byte	.LASF43
 525 0232 02       		.byte	0x2
 526 0233 85       		.byte	0x85
 527 0234 9C000000 		.4byte	0x9c
 528 0238 70       		.byte	0x70
 529 0239 09       		.uleb128 0x9
 530 023a 43535200 		.ascii	"CSR\000"
 531 023e 02       		.byte	0x2
 532 023f 86       		.byte	0x86
 533 0240 9C000000 		.4byte	0x9c
 534 0244 74       		.byte	0x74
 535 0245 0A       		.uleb128 0xa
 536 0246 5B000000 		.4byte	.LASF44
 537 024a 02       		.byte	0x2
 538 024b 87       		.byte	0x87
 539 024c 9C000000 		.4byte	0x9c
 540 0250 78       		.byte	0x78
 541 0251 0A       		.uleb128 0xa
 542 0252 FE000000 		.4byte	.LASF45
 543 0256 02       		.byte	0x2
 544 0257 88       		.byte	0x88
 545 0258 9C000000 		.4byte	0x9c
 546 025c 7C       		.byte	0x7c
 547 025d 0A       		.uleb128 0xa
 548 025e 89000000 		.4byte	.LASF46
 549 0262 02       		.byte	0x2
 550 0263 89       		.byte	0x89
 551 0264 9C000000 		.4byte	0x9c
 552 0268 80       		.byte	0x80
 553 0269 0A       		.uleb128 0xa
 554 026a 6A000000 		.4byte	.LASF47
 555 026e 02       		.byte	0x2
 556 026f 8A       		.byte	0x8a
 557 0270 9C000000 		.4byte	0x9c
 558 0274 84       		.byte	0x84
 559 0275 0A       		.uleb128 0xa
 560 0276 2E030000 		.4byte	.LASF48
 561 027a 02       		.byte	0x2
 562 027b 8B       		.byte	0x8b
 563 027c 9C000000 		.4byte	0x9c
 564 0280 88       		.byte	0x88
 565 0281 0A       		.uleb128 0xa
 566 0282 F6000000 		.4byte	.LASF49
 567 0286 02       		.byte	0x2
 568 0287 8C       		.byte	0x8c
 569 0288 9C000000 		.4byte	0x9c
 570 028c 8C       		.byte	0x8c
 571 028d 0A       		.uleb128 0xa
 572 028e 52000000 		.4byte	.LASF50
 573 0292 02       		.byte	0x2
 574 0293 8D       		.byte	0x8d
 575 0294 9C000000 		.4byte	0x9c
 576 0298 90       		.byte	0x90
 577 0299 0A       		.uleb128 0xa
 578 029a 44010000 		.4byte	.LASF51
 579 029e 02       		.byte	0x2
 580 029f 8E       		.byte	0x8e
 581 02a0 9C000000 		.4byte	0x9c
 582 02a4 94       		.byte	0x94
 583 02a5 00       		.byte	0
 584 02a6 0B       		.uleb128 0xb
 585 02a7 10020000 		.4byte	.LASF59
 586 02ab 03       		.byte	0x3
 587 02ac AA01     		.2byte	0x1aa
 588 02ae 03       		.byte	0x3
 589 02af 0C       		.uleb128 0xc
 590 02b0 F3020000 		.4byte	.LASF60
 591 02b4 02       		.byte	0x2
 592 02b5 B102     		.2byte	0x2b1
 593 02b7 03       		.byte	0x3
 594 02b8 0D       		.uleb128 0xd
 595 02b9 64030000 		.4byte	.LASF52
 596 02bd 01       		.byte	0x1
 597 02be 06       		.byte	0x6
 598 02bf 00000000 		.4byte	.LFB392
 599 02c3 2C000000 		.4byte	.LFE392-.LFB392
 600 02c7 01       		.uleb128 0x1
 601 02c8 9C       		.byte	0x9c
 602 02c9 10030000 		.4byte	0x310
 603 02cd 0E       		.uleb128 0xe
 604 02ce 36020000 		.4byte	.LASF61
 605 02d2 01       		.byte	0x1
 606 02d3 06       		.byte	0x6
 607 02d4 40000000 		.4byte	0x40
 608 02d8 00000000 		.4byte	.LLST0
 609 02dc 0F       		.uleb128 0xf
 610 02dd AF020000 		.4byte	0x2af
 611 02e1 00000000 		.4byte	.LBB24
 612 02e5 0E000000 		.4byte	.LBE24-.LBB24
 613 02e9 01       		.byte	0x1
 614 02ea 07       		.byte	0x7
 615 02eb 00030000 		.4byte	0x300
 616 02ef 10       		.uleb128 0x10
 617 02f0 A6020000 		.4byte	0x2a6
 618 02f4 0A000000 		.4byte	.LBB26
 619 02f8 04000000 		.4byte	.LBE26-.LBB26
 620 02fc 02       		.byte	0x2
 621 02fd B102     		.2byte	0x2b1
 622 02ff 00       		.byte	0
 623 0300 11       		.uleb128 0x11
 624 0301 A6020000 		.4byte	0x2a6
 625 0305 1E000000 		.4byte	.LBB28
 626 0309 0E000000 		.4byte	.LBE28-.LBB28
 627 030d 01       		.byte	0x1
 628 030e 09       		.byte	0x9
 629 030f 00       		.byte	0
 630 0310 12       		.uleb128 0x12
 631 0311 39030000 		.4byte	.LASF53
 632 0315 01       		.byte	0x1
 633 0316 0C       		.byte	0xc
 634 0317 40000000 		.4byte	0x40
 635 031b 2C000000 		.4byte	.LFB393
 636 031f 20000000 		.4byte	.LFE393-.LFB393
 637 0323 01       		.uleb128 0x1
 638 0324 9C       		.byte	0x9c
 639 0325 4A030000 		.4byte	0x34a
 640 0329 13       		.uleb128 0x13
 641 032a AF020000 		.4byte	0x2af
 642 032e 2C000000 		.4byte	.LBB30
 643 0332 0E000000 		.4byte	.LBE30-.LBB30
 644 0336 01       		.byte	0x1
 645 0337 0D       		.byte	0xd
 646 0338 10       		.uleb128 0x10
 647 0339 A6020000 		.4byte	0x2a6
 648 033d 36000000 		.4byte	.LBB32
 649 0341 04000000 		.4byte	.LBE32-.LBB32
 650 0345 02       		.byte	0x2
 651 0346 B102     		.2byte	0x2b1
 652 0348 00       		.byte	0
 653 0349 00       		.byte	0
 654 034a 14       		.uleb128 0x14
 655 034b 2B010000 		.4byte	.LASF54
 656 034f 01       		.byte	0x1
 657 0350 11       		.byte	0x11
 658 0351 4C000000 		.4byte	.LFB394
 659 0355 38000000 		.4byte	.LFE394-.LFB394
 660 0359 01       		.uleb128 0x1
 661 035a 9C       		.byte	0x9c
 662 035b 80030000 		.4byte	0x380
 663 035f 13       		.uleb128 0x13
 664 0360 AF020000 		.4byte	0x2af
 665 0364 4C000000 		.4byte	.LBB34
 666 0368 0E000000 		.4byte	.LBE34-.LBB34
 667 036c 01       		.byte	0x1
 668 036d 12       		.byte	0x12
 669 036e 10       		.uleb128 0x10
 670 036f A6020000 		.4byte	0x2a6
 671 0373 56000000 		.4byte	.LBB36
 672 0377 04000000 		.4byte	.LBE36-.LBB36
 673 037b 02       		.byte	0x2
 674 037c B102     		.2byte	0x2b1
 675 037e 00       		.byte	0
 676 037f 00       		.byte	0
 677 0380 14       		.uleb128 0x14
 678 0381 AD020000 		.4byte	.LASF55
 679 0385 01       		.byte	0x1
 680 0386 1B       		.byte	0x1b
 681 0387 84000000 		.4byte	.LFB395
 682 038b 28000000 		.4byte	.LFE395-.LFB395
 683 038f 01       		.uleb128 0x1
 684 0390 9C       		.byte	0x9c
 685 0391 C9030000 		.4byte	0x3c9
 686 0395 0F       		.uleb128 0xf
 687 0396 AF020000 		.4byte	0x2af
 688 039a 84000000 		.4byte	.LBB38
 689 039e 0E000000 		.4byte	.LBE38-.LBB38
 690 03a2 01       		.byte	0x1
 691 03a3 1C       		.byte	0x1c
 692 03a4 B9030000 		.4byte	0x3b9
 693 03a8 10       		.uleb128 0x10
 694 03a9 A6020000 		.4byte	0x2a6
 695 03ad 8E000000 		.4byte	.LBB40
 696 03b1 04000000 		.4byte	.LBE40-.LBB40
 697 03b5 02       		.byte	0x2
 698 03b6 B102     		.2byte	0x2b1
 699 03b8 00       		.byte	0
 700 03b9 11       		.uleb128 0x11
 701 03ba A6020000 		.4byte	0x2a6
 702 03be 9C000000 		.4byte	.LBB42
 703 03c2 10000000 		.4byte	.LBE42-.LBB42
 704 03c6 01       		.byte	0x1
 705 03c7 1F       		.byte	0x1f
 706 03c8 00       		.byte	0
 707 03c9 15       		.uleb128 0x15
 708 03ca 52434300 		.ascii	"RCC\000"
 709 03ce 02       		.byte	0x2
 710 03cf 3D02     		.2byte	0x23d
 711 03d1 D5030000 		.4byte	0x3d5
 712 03d5 16       		.uleb128 0x16
 713 03d6 D2000000 		.4byte	0xd2
 714 03da 15       		.uleb128 0x15
 715 03db 50575200 		.ascii	"PWR\000"
 716 03df 02       		.byte	0x2
 717 03e0 5D02     		.2byte	0x25d
 718 03e2 E6030000 		.4byte	0x3e6
 719 03e6 16       		.uleb128 0x16
 720 03e7 AE000000 		.4byte	0xae
 721 03eb 00       		.byte	0
 722              		.section	.debug_abbrev,"",%progbits
 723              	.Ldebug_abbrev0:
 724 0000 01       		.uleb128 0x1
 725 0001 11       		.uleb128 0x11
 726 0002 01       		.byte	0x1
 727 0003 25       		.uleb128 0x25
 728 0004 0E       		.uleb128 0xe
 729 0005 13       		.uleb128 0x13
 730 0006 0B       		.uleb128 0xb
 731 0007 03       		.uleb128 0x3
 732 0008 0E       		.uleb128 0xe
 733 0009 1B       		.uleb128 0x1b
 734 000a 0E       		.uleb128 0xe
 735 000b 11       		.uleb128 0x11
 736 000c 01       		.uleb128 0x1
 737 000d 12       		.uleb128 0x12
 738 000e 06       		.uleb128 0x6
 739 000f 10       		.uleb128 0x10
 740 0010 17       		.uleb128 0x17
 741 0011 00       		.byte	0
 742 0012 00       		.byte	0
 743 0013 02       		.uleb128 0x2
 744 0014 04       		.uleb128 0x4
 745 0015 01       		.byte	0x1
 746 0016 0B       		.uleb128 0xb
 747 0017 0B       		.uleb128 0xb
 748 0018 3A       		.uleb128 0x3a
 749 0019 0B       		.uleb128 0xb
 750 001a 3B       		.uleb128 0x3b
 751 001b 0B       		.uleb128 0xb
 752 001c 01       		.uleb128 0x1
 753 001d 13       		.uleb128 0x13
 754 001e 00       		.byte	0
 755 001f 00       		.byte	0
 756 0020 03       		.uleb128 0x3
 757 0021 28       		.uleb128 0x28
 758 0022 00       		.byte	0
 759 0023 03       		.uleb128 0x3
 760 0024 0E       		.uleb128 0xe
 761 0025 1C       		.uleb128 0x1c
 762 0026 0D       		.uleb128 0xd
 763 0027 00       		.byte	0
 764 0028 00       		.byte	0
 765 0029 04       		.uleb128 0x4
 766 002a 16       		.uleb128 0x16
 767 002b 00       		.byte	0
 768 002c 03       		.uleb128 0x3
 769 002d 08       		.uleb128 0x8
 770 002e 3A       		.uleb128 0x3a
 771 002f 0B       		.uleb128 0xb
 772 0030 3B       		.uleb128 0x3b
 773 0031 0B       		.uleb128 0xb
 774 0032 49       		.uleb128 0x49
 775 0033 13       		.uleb128 0x13
 776 0034 00       		.byte	0
 777 0035 00       		.byte	0
 778 0036 05       		.uleb128 0x5
 779 0037 24       		.uleb128 0x24
 780 0038 00       		.byte	0
 781 0039 0B       		.uleb128 0xb
 782 003a 0B       		.uleb128 0xb
 783 003b 3E       		.uleb128 0x3e
 784 003c 0B       		.uleb128 0xb
 785 003d 03       		.uleb128 0x3
 786 003e 0E       		.uleb128 0xe
 787 003f 00       		.byte	0
 788 0040 00       		.byte	0
 789 0041 06       		.uleb128 0x6
 790 0042 16       		.uleb128 0x16
 791 0043 00       		.byte	0
 792 0044 03       		.uleb128 0x3
 793 0045 0E       		.uleb128 0xe
 794 0046 3A       		.uleb128 0x3a
 795 0047 0B       		.uleb128 0xb
 796 0048 3B       		.uleb128 0x3b
 797 0049 0B       		.uleb128 0xb
 798 004a 49       		.uleb128 0x49
 799 004b 13       		.uleb128 0x13
 800 004c 00       		.byte	0
 801 004d 00       		.byte	0
 802 004e 07       		.uleb128 0x7
 803 004f 24       		.uleb128 0x24
 804 0050 00       		.byte	0
 805 0051 0B       		.uleb128 0xb
 806 0052 0B       		.uleb128 0xb
 807 0053 3E       		.uleb128 0x3e
 808 0054 0B       		.uleb128 0xb
 809 0055 03       		.uleb128 0x3
 810 0056 08       		.uleb128 0x8
 811 0057 00       		.byte	0
 812 0058 00       		.byte	0
 813 0059 08       		.uleb128 0x8
 814 005a 13       		.uleb128 0x13
 815 005b 01       		.byte	0x1
 816 005c 03       		.uleb128 0x3
 817 005d 0E       		.uleb128 0xe
 818 005e 0B       		.uleb128 0xb
 819 005f 0B       		.uleb128 0xb
 820 0060 3A       		.uleb128 0x3a
 821 0061 0B       		.uleb128 0xb
 822 0062 3B       		.uleb128 0x3b
 823 0063 0B       		.uleb128 0xb
 824 0064 01       		.uleb128 0x1
 825 0065 13       		.uleb128 0x13
 826 0066 00       		.byte	0
 827 0067 00       		.byte	0
 828 0068 09       		.uleb128 0x9
 829 0069 0D       		.uleb128 0xd
 830 006a 00       		.byte	0
 831 006b 03       		.uleb128 0x3
 832 006c 08       		.uleb128 0x8
 833 006d 3A       		.uleb128 0x3a
 834 006e 0B       		.uleb128 0xb
 835 006f 3B       		.uleb128 0x3b
 836 0070 0B       		.uleb128 0xb
 837 0071 49       		.uleb128 0x49
 838 0072 13       		.uleb128 0x13
 839 0073 38       		.uleb128 0x38
 840 0074 0B       		.uleb128 0xb
 841 0075 00       		.byte	0
 842 0076 00       		.byte	0
 843 0077 0A       		.uleb128 0xa
 844 0078 0D       		.uleb128 0xd
 845 0079 00       		.byte	0
 846 007a 03       		.uleb128 0x3
 847 007b 0E       		.uleb128 0xe
 848 007c 3A       		.uleb128 0x3a
 849 007d 0B       		.uleb128 0xb
 850 007e 3B       		.uleb128 0x3b
 851 007f 0B       		.uleb128 0xb
 852 0080 49       		.uleb128 0x49
 853 0081 13       		.uleb128 0x13
 854 0082 38       		.uleb128 0x38
 855 0083 0B       		.uleb128 0xb
 856 0084 00       		.byte	0
 857 0085 00       		.byte	0
 858 0086 0B       		.uleb128 0xb
 859 0087 2E       		.uleb128 0x2e
 860 0088 00       		.byte	0
 861 0089 03       		.uleb128 0x3
 862 008a 0E       		.uleb128 0xe
 863 008b 3A       		.uleb128 0x3a
 864 008c 0B       		.uleb128 0xb
 865 008d 3B       		.uleb128 0x3b
 866 008e 05       		.uleb128 0x5
 867 008f 27       		.uleb128 0x27
 868 0090 19       		.uleb128 0x19
 869 0091 20       		.uleb128 0x20
 870 0092 0B       		.uleb128 0xb
 871 0093 00       		.byte	0
 872 0094 00       		.byte	0
 873 0095 0C       		.uleb128 0xc
 874 0096 2E       		.uleb128 0x2e
 875 0097 00       		.byte	0
 876 0098 03       		.uleb128 0x3
 877 0099 0E       		.uleb128 0xe
 878 009a 3A       		.uleb128 0x3a
 879 009b 0B       		.uleb128 0xb
 880 009c 3B       		.uleb128 0x3b
 881 009d 05       		.uleb128 0x5
 882 009e 20       		.uleb128 0x20
 883 009f 0B       		.uleb128 0xb
 884 00a0 00       		.byte	0
 885 00a1 00       		.byte	0
 886 00a2 0D       		.uleb128 0xd
 887 00a3 2E       		.uleb128 0x2e
 888 00a4 01       		.byte	0x1
 889 00a5 3F       		.uleb128 0x3f
 890 00a6 19       		.uleb128 0x19
 891 00a7 03       		.uleb128 0x3
 892 00a8 0E       		.uleb128 0xe
 893 00a9 3A       		.uleb128 0x3a
 894 00aa 0B       		.uleb128 0xb
 895 00ab 3B       		.uleb128 0x3b
 896 00ac 0B       		.uleb128 0xb
 897 00ad 27       		.uleb128 0x27
 898 00ae 19       		.uleb128 0x19
 899 00af 11       		.uleb128 0x11
 900 00b0 01       		.uleb128 0x1
 901 00b1 12       		.uleb128 0x12
 902 00b2 06       		.uleb128 0x6
 903 00b3 40       		.uleb128 0x40
 904 00b4 18       		.uleb128 0x18
 905 00b5 9742     		.uleb128 0x2117
 906 00b7 19       		.uleb128 0x19
 907 00b8 01       		.uleb128 0x1
 908 00b9 13       		.uleb128 0x13
 909 00ba 00       		.byte	0
 910 00bb 00       		.byte	0
 911 00bc 0E       		.uleb128 0xe
 912 00bd 05       		.uleb128 0x5
 913 00be 00       		.byte	0
 914 00bf 03       		.uleb128 0x3
 915 00c0 0E       		.uleb128 0xe
 916 00c1 3A       		.uleb128 0x3a
 917 00c2 0B       		.uleb128 0xb
 918 00c3 3B       		.uleb128 0x3b
 919 00c4 0B       		.uleb128 0xb
 920 00c5 49       		.uleb128 0x49
 921 00c6 13       		.uleb128 0x13
 922 00c7 02       		.uleb128 0x2
 923 00c8 17       		.uleb128 0x17
 924 00c9 00       		.byte	0
 925 00ca 00       		.byte	0
 926 00cb 0F       		.uleb128 0xf
 927 00cc 1D       		.uleb128 0x1d
 928 00cd 01       		.byte	0x1
 929 00ce 31       		.uleb128 0x31
 930 00cf 13       		.uleb128 0x13
 931 00d0 11       		.uleb128 0x11
 932 00d1 01       		.uleb128 0x1
 933 00d2 12       		.uleb128 0x12
 934 00d3 06       		.uleb128 0x6
 935 00d4 58       		.uleb128 0x58
 936 00d5 0B       		.uleb128 0xb
 937 00d6 59       		.uleb128 0x59
 938 00d7 0B       		.uleb128 0xb
 939 00d8 01       		.uleb128 0x1
 940 00d9 13       		.uleb128 0x13
 941 00da 00       		.byte	0
 942 00db 00       		.byte	0
 943 00dc 10       		.uleb128 0x10
 944 00dd 1D       		.uleb128 0x1d
 945 00de 00       		.byte	0
 946 00df 31       		.uleb128 0x31
 947 00e0 13       		.uleb128 0x13
 948 00e1 11       		.uleb128 0x11
 949 00e2 01       		.uleb128 0x1
 950 00e3 12       		.uleb128 0x12
 951 00e4 06       		.uleb128 0x6
 952 00e5 58       		.uleb128 0x58
 953 00e6 0B       		.uleb128 0xb
 954 00e7 59       		.uleb128 0x59
 955 00e8 05       		.uleb128 0x5
 956 00e9 00       		.byte	0
 957 00ea 00       		.byte	0
 958 00eb 11       		.uleb128 0x11
 959 00ec 1D       		.uleb128 0x1d
 960 00ed 00       		.byte	0
 961 00ee 31       		.uleb128 0x31
 962 00ef 13       		.uleb128 0x13
 963 00f0 11       		.uleb128 0x11
 964 00f1 01       		.uleb128 0x1
 965 00f2 12       		.uleb128 0x12
 966 00f3 06       		.uleb128 0x6
 967 00f4 58       		.uleb128 0x58
 968 00f5 0B       		.uleb128 0xb
 969 00f6 59       		.uleb128 0x59
 970 00f7 0B       		.uleb128 0xb
 971 00f8 00       		.byte	0
 972 00f9 00       		.byte	0
 973 00fa 12       		.uleb128 0x12
 974 00fb 2E       		.uleb128 0x2e
 975 00fc 01       		.byte	0x1
 976 00fd 3F       		.uleb128 0x3f
 977 00fe 19       		.uleb128 0x19
 978 00ff 03       		.uleb128 0x3
 979 0100 0E       		.uleb128 0xe
 980 0101 3A       		.uleb128 0x3a
 981 0102 0B       		.uleb128 0xb
 982 0103 3B       		.uleb128 0x3b
 983 0104 0B       		.uleb128 0xb
 984 0105 49       		.uleb128 0x49
 985 0106 13       		.uleb128 0x13
 986 0107 11       		.uleb128 0x11
 987 0108 01       		.uleb128 0x1
 988 0109 12       		.uleb128 0x12
 989 010a 06       		.uleb128 0x6
 990 010b 40       		.uleb128 0x40
 991 010c 18       		.uleb128 0x18
 992 010d 9742     		.uleb128 0x2117
 993 010f 19       		.uleb128 0x19
 994 0110 01       		.uleb128 0x1
 995 0111 13       		.uleb128 0x13
 996 0112 00       		.byte	0
 997 0113 00       		.byte	0
 998 0114 13       		.uleb128 0x13
 999 0115 1D       		.uleb128 0x1d
 1000 0116 01       		.byte	0x1
 1001 0117 31       		.uleb128 0x31
 1002 0118 13       		.uleb128 0x13
 1003 0119 11       		.uleb128 0x11
 1004 011a 01       		.uleb128 0x1
 1005 011b 12       		.uleb128 0x12
 1006 011c 06       		.uleb128 0x6
 1007 011d 58       		.uleb128 0x58
 1008 011e 0B       		.uleb128 0xb
 1009 011f 59       		.uleb128 0x59
 1010 0120 0B       		.uleb128 0xb
 1011 0121 00       		.byte	0
 1012 0122 00       		.byte	0
 1013 0123 14       		.uleb128 0x14
 1014 0124 2E       		.uleb128 0x2e
 1015 0125 01       		.byte	0x1
 1016 0126 3F       		.uleb128 0x3f
 1017 0127 19       		.uleb128 0x19
 1018 0128 03       		.uleb128 0x3
 1019 0129 0E       		.uleb128 0xe
 1020 012a 3A       		.uleb128 0x3a
 1021 012b 0B       		.uleb128 0xb
 1022 012c 3B       		.uleb128 0x3b
 1023 012d 0B       		.uleb128 0xb
 1024 012e 11       		.uleb128 0x11
 1025 012f 01       		.uleb128 0x1
 1026 0130 12       		.uleb128 0x12
 1027 0131 06       		.uleb128 0x6
 1028 0132 40       		.uleb128 0x40
 1029 0133 18       		.uleb128 0x18
 1030 0134 9742     		.uleb128 0x2117
 1031 0136 19       		.uleb128 0x19
 1032 0137 01       		.uleb128 0x1
 1033 0138 13       		.uleb128 0x13
 1034 0139 00       		.byte	0
 1035 013a 00       		.byte	0
 1036 013b 15       		.uleb128 0x15
 1037 013c 34       		.uleb128 0x34
 1038 013d 00       		.byte	0
 1039 013e 03       		.uleb128 0x3
 1040 013f 08       		.uleb128 0x8
 1041 0140 3A       		.uleb128 0x3a
 1042 0141 0B       		.uleb128 0xb
 1043 0142 3B       		.uleb128 0x3b
 1044 0143 05       		.uleb128 0x5
 1045 0144 49       		.uleb128 0x49
 1046 0145 13       		.uleb128 0x13
 1047 0146 3F       		.uleb128 0x3f
 1048 0147 19       		.uleb128 0x19
 1049 0148 3C       		.uleb128 0x3c
 1050 0149 19       		.uleb128 0x19
 1051 014a 00       		.byte	0
 1052 014b 00       		.byte	0
 1053 014c 16       		.uleb128 0x16
 1054 014d 35       		.uleb128 0x35
 1055 014e 00       		.byte	0
 1056 014f 49       		.uleb128 0x49
 1057 0150 13       		.uleb128 0x13
 1058 0151 00       		.byte	0
 1059 0152 00       		.byte	0
 1060 0153 00       		.byte	0
 1061              		.section	.debug_loc,"",%progbits
 1062              	.Ldebug_loc0:
 1063              	.LLST0:
 1064 0000 00000000 		.4byte	.LVL0-.Ltext0
 1065 0004 14000000 		.4byte	.LVL1-.Ltext0
 1066 0008 0100     		.2byte	0x1
 1067 000a 50       		.byte	0x50
 1068 000b 14000000 		.4byte	.LVL1-.Ltext0
 1069 000f 2C000000 		.4byte	.LFE392-.Ltext0
 1070 0013 0400     		.2byte	0x4
 1071 0015 F3       		.byte	0xf3
 1072 0016 01       		.uleb128 0x1
 1073 0017 50       		.byte	0x50
 1074 0018 9F       		.byte	0x9f
 1075 0019 00000000 		.4byte	0
 1076 001d 00000000 		.4byte	0
 1077              		.section	.debug_aranges,"",%progbits
 1078 0000 1C000000 		.4byte	0x1c
 1079 0004 0200     		.2byte	0x2
 1080 0006 00000000 		.4byte	.Ldebug_info0
 1081 000a 04       		.byte	0x4
 1082 000b 00       		.byte	0
 1083 000c 0000     		.2byte	0
 1084 000e 0000     		.2byte	0
 1085 0010 00000000 		.4byte	.Ltext0
 1086 0014 AC000000 		.4byte	.Letext0-.Ltext0
 1087 0018 00000000 		.4byte	0
 1088 001c 00000000 		.4byte	0
 1089              		.section	.debug_line,"",%progbits
 1090              	.Ldebug_line0:
 1091 0000 1E010000 		.section	.debug_str,"MS",%progbits,1
 1091      0200A200 
 1091      00000201 
 1091      FB0E0D00 
 1091      01010101 
 1092              	.LASF35:
 1093 0000 41484231 		.ascii	"AHB1LPENR\000"
 1093      4C50454E 
 1093      5200
 1094              	.LASF42:
 1095 000a 5F726573 		.ascii	"_reserved_0x6c\000"
 1095      65727665 
 1095      645F3078 
 1095      366300
 1096              	.LASF0:
 1097 0019 7363616C 		.ascii	"scale1\000"
 1097      653100
 1098              	.LASF1:
 1099 0020 7363616C 		.ascii	"scale2\000"
 1099      653200
 1100              	.LASF2:
 1101 0027 7363616C 		.ascii	"scale3\000"
 1101      653300
 1102              	.LASF3:
 1103 002e 7369676E 		.ascii	"signed char\000"
 1103      65642063 
 1103      68617200 
 1104              	.LASF5:
 1105 003a 73686F72 		.ascii	"short int\000"
 1105      7420696E 
 1105      7400
 1106              	.LASF14:
 1107 0044 73697A65 		.ascii	"sizetype\000"
 1107      74797065 
 1107      00
 1108              	.LASF43:
 1109 004d 42444352 		.ascii	"BDCR\000"
 1109      00
 1110              	.LASF50:
 1111 0052 434B4741 		.ascii	"CKGATENR\000"
 1111      54454E52 
 1111      00
 1112              	.LASF44:
 1113 005b 5F726573 		.ascii	"_reserved_0x78\000"
 1113      65727665 
 1113      645F3078 
 1113      373800
 1114              	.LASF47:
 1115 006a 504C4C49 		.ascii	"PLLI2SCFGR\000"
 1115      32534346 
 1115      475200
 1116              	.LASF8:
 1117 0075 5F5F7569 		.ascii	"__uint32_t\000"
 1117      6E743332 
 1117      5F7400
 1118              	.LASF23:
 1119 0080 41504231 		.ascii	"APB1RSTR\000"
 1119      52535452 
 1119      00
 1120              	.LASF46:
 1121 0089 53534347 		.ascii	"SSCGR\000"
 1121      5200
 1122              	.LASF37:
 1123 008f 41484233 		.ascii	"AHB3LPENR\000"
 1123      4C50454E 
 1123      5200
 1124              	.LASF57:
 1125 0099 7372632F 		.ascii	"src/sys/power.c\000"
 1125      7379732F 
 1125      706F7765 
 1125      722E6300 
 1126              	.LASF18:
 1127 00a9 43464752 		.ascii	"CFGR\000"
 1127      00
 1128              	.LASF30:
 1129 00ae 5F726573 		.ascii	"_reserved_0x3c\000"
 1129      65727665 
 1129      645F3078 
 1129      336300
 1130              	.LASF31:
 1131 00bd 41504231 		.ascii	"APB1ENR\000"
 1131      454E5200 
 1132              	.LASF58:
 1133 00c5 2F686F6D 		.ascii	"/home/tom/COURS/S6/Projet_boiteMusique/c_project\000"
 1133      652F746F 
 1133      6D2F434F 
 1133      5552532F 
 1133      53362F50 
 1134              	.LASF49:
 1135 00f6 44434B43 		.ascii	"DCKCFGR\000"
 1135      46475200 
 1136              	.LASF45:
 1137 00fe 5F726573 		.ascii	"_reserved_0x7c\000"
 1137      65727665 
 1137      645F3078 
 1137      376300
 1138              	.LASF28:
 1139 010d 41484232 		.ascii	"AHB2ENR\000"
 1139      454E5200 
 1140              	.LASF29:
 1141 0115 41484233 		.ascii	"AHB3ENR\000"
 1141      454E5200 
 1142              	.LASF10:
 1143 011d 6C6F6E67 		.ascii	"long long int\000"
 1143      206C6F6E 
 1143      6720696E 
 1143      7400
 1144              	.LASF54:
 1145 012b 73746172 		.ascii	"start_Overdrive\000"
 1145      745F4F76 
 1145      65726472 
 1145      69766500 
 1146              	.LASF7:
 1147 013b 6C6F6E67 		.ascii	"long int\000"
 1147      20696E74 
 1147      00
 1148              	.LASF51:
 1149 0144 44434B43 		.ascii	"DCKCFGR2\000"
 1149      46475232 
 1149      00
 1150              	.LASF24:
 1151 014d 41504232 		.ascii	"APB2RSTR\000"
 1151      52535452 
 1151      00
 1152              	.LASF56:
 1153 0156 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mtune=cortex-m4 "
 1153      4320342E 
 1153      392E3320 
 1153      32303135 
 1153      30353239 
 1154 0189 2D6D7468 		.ascii	"-mthumb -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4"
 1154      756D6220 
 1154      2D6D6172 
 1154      63683D61 
 1154      726D7637 
 1155 01bc 2D73702D 		.ascii	"-sp-d16 -g -O0 -Os -fsingle-precision-constant\000"
 1155      64313620 
 1155      2D67202D 
 1155      4F30202D 
 1155      4F73202D 
 1156              	.LASF4:
 1157 01eb 756E7369 		.ascii	"unsigned char\000"
 1157      676E6564 
 1157      20636861 
 1157      7200
 1158              	.LASF34:
 1159 01f9 5F726573 		.ascii	"_reserved_0x4c\000"
 1159      65727665 
 1159      645F3078 
 1159      346300
 1160              	.LASF32:
 1161 0208 41504232 		.ascii	"APB2ENR\000"
 1161      454E5200 
 1162              	.LASF59:
 1163 0210 5F5F4453 		.ascii	"__DSB\000"
 1163      4200
 1164              	.LASF11:
 1165 0216 6C6F6E67 		.ascii	"long long unsigned int\000"
 1165      206C6F6E 
 1165      6720756E 
 1165      7369676E 
 1165      65642069 
 1166              	.LASF13:
 1167 022d 75696E74 		.ascii	"uint32_t\000"
 1167      33325F74 
 1167      00
 1168              	.LASF61:
 1169 0236 7363616C 		.ascii	"scale\000"
 1169      6500
 1170              	.LASF12:
 1171 023c 756E7369 		.ascii	"unsigned int\000"
 1171      676E6564 
 1171      20696E74 
 1171      00
 1172              	.LASF20:
 1173 0249 41484232 		.ascii	"AHB2RSTR\000"
 1173      52535452 
 1173      00
 1174              	.LASF16:
 1175 0252 5243435F 		.ascii	"RCC_registers\000"
 1175      72656769 
 1175      73746572 
 1175      7300
 1176              	.LASF17:
 1177 0260 504C4C43 		.ascii	"PLLCFGR\000"
 1177      46475200 
 1178              	.LASF33:
 1179 0268 5F726573 		.ascii	"_reserved_0x48\000"
 1179      65727665 
 1179      645F3078 
 1179      343800
 1180              	.LASF39:
 1181 0277 41504231 		.ascii	"APB1LPENR\000"
 1181      4C50454E 
 1181      5200
 1182              	.LASF6:
 1183 0281 73686F72 		.ascii	"short unsigned int\000"
 1183      7420756E 
 1183      7369676E 
 1183      65642069 
 1183      6E7400
 1184              	.LASF22:
 1185 0294 5F726573 		.ascii	"_reserved_0x1c\000"
 1185      65727665 
 1185      645F3078 
 1185      316300
 1186              	.LASF36:
 1187 02a3 41484232 		.ascii	"AHB2LPENR\000"
 1187      4C50454E 
 1187      5200
 1188              	.LASF55:
 1189 02ad 73746F70 		.ascii	"stop_Overdrive\000"
 1189      5F4F7665 
 1189      72647269 
 1189      766500
 1190              	.LASF9:
 1191 02bc 6C6F6E67 		.ascii	"long unsigned int\000"
 1191      20756E73 
 1191      69676E65 
 1191      6420696E 
 1191      7400
 1192              	.LASF15:
 1193 02ce 5057525F 		.ascii	"PWR_registers\000"
 1193      72656769 
 1193      73746572 
 1193      7300
 1194              	.LASF38:
 1195 02dc 5F726573 		.ascii	"_reserved_0x5c\000"
 1195      65727665 
 1195      645F3078 
 1195      356300
 1196              	.LASF27:
 1197 02eb 41484231 		.ascii	"AHB1ENR\000"
 1197      454E5200 
 1198              	.LASF60:
 1199 02f3 656E6162 		.ascii	"enable_PWR\000"
 1199      6C655F50 
 1199      575200
 1200              	.LASF41:
 1201 02fe 5F726573 		.ascii	"_reserved_0x68\000"
 1201      65727665 
 1201      645F3078 
 1201      363800
 1202              	.LASF19:
 1203 030d 41484231 		.ascii	"AHB1RSTR\000"
 1203      52535452 
 1203      00
 1204              	.LASF25:
 1205 0316 5F726573 		.ascii	"_reserved_0x28\000"
 1205      65727665 
 1205      645F3078 
 1205      323800
 1206              	.LASF21:
 1207 0325 41484233 		.ascii	"AHB3RSTR\000"
 1207      52535452 
 1207      00
 1208              	.LASF48:
 1209 032e 504C4C53 		.ascii	"PLLSAICFGR\000"
 1209      41494346 
 1209      475200
 1210              	.LASF53:
 1211 0339 6765745F 		.ascii	"get_voltage_scale\000"
 1211      766F6C74 
 1211      6167655F 
 1211      7363616C 
 1211      6500
 1212              	.LASF40:
 1213 034b 41504232 		.ascii	"APB2LPENR\000"
 1213      4C50454E 
 1213      5200
 1214              	.LASF26:
 1215 0355 5F726573 		.ascii	"_reserved_0x2c\000"
 1215      65727665 
 1215      645F3078 
 1215      326300
 1216              	.LASF52:
 1217 0364 7365745F 		.ascii	"set_voltage_scale\000"
 1217      766F6C74 
 1217      6167655F 
 1217      7363616C 
 1217      6500
 1218              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 power.c
     /tmp/ccIBZxEe.s:20     .text:0000000000000000 $t
     /tmp/ccIBZxEe.s:25     .text:0000000000000000 set_voltage_scale
     /tmp/ccIBZxEe.s:74     .text:0000000000000024 $d
     /tmp/ccIBZxEe.s:81     .text:000000000000002c $t
     /tmp/ccIBZxEe.s:86     .text:000000000000002c get_voltage_scale
     /tmp/ccIBZxEe.s:120    .text:0000000000000044 $d
     /tmp/ccIBZxEe.s:125    .text:000000000000004c $t
     /tmp/ccIBZxEe.s:130    .text:000000000000004c start_Overdrive
     /tmp/ccIBZxEe.s:180    .text:000000000000007c $d
     /tmp/ccIBZxEe.s:185    .text:0000000000000084 $t
     /tmp/ccIBZxEe.s:190    .text:0000000000000084 stop_Overdrive
     /tmp/ccIBZxEe.s:231    .text:00000000000000a4 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC
PWR
