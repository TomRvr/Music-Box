   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"clock.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.global	start_PLL
  22              		.thumb
  23              		.thumb_func
  24              		.type	start_PLL, %function
  25              	start_PLL:
  26              	.LFB392:
  27              		.file 1 "src/sys/clock.c"
   1:src/sys/clock.c **** #include"clock.h"
   2:src/sys/clock.c **** #include"devices.h"
   3:src/sys/clock.c **** #include "cm4.h"
   4:src/sys/clock.c **** 
   5:src/sys/clock.c **** void start_PLL(PLLSRC SRC,
   6:src/sys/clock.c **** 		 int32_t M,int32_t N,int32_t P,int32_t Q,int32_t R) { 
  28              		.loc 1 6 0
  29              		.cfi_startproc
  30              		@ args = 8, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 30B5     		push	{r4, r5, lr}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
   7:src/sys/clock.c ****   /* setup parameters */
   8:src/sys/clock.c ****   RCC.PLLCFGR = 
   9:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  10:src/sys/clock.c ****     (SRC<<22) | (Q<<24) | (R<<28) ;
  38              		.loc 1 10 0
  39 0002 049C     		ldr	r4, [sp, #16]
  40 0004 039D     		ldr	r5, [sp, #12]
  41 0006 2407     		lsls	r4, r4, #28
  42 0008 44EA0564 		orr	r4, r4, r5, lsl #24
  43 000c 2143     		orrs	r1, r1, r4
  44              	.LVL1:
  45 000e 41EA8050 		orr	r0, r1, r0, lsl #22
  46              	.LVL2:
  47 0012 40EA8214 		orr	r4, r0, r2, lsl #6
   9:src/sys/clock.c ****     (SRC<<22) | (Q<<24) | (R<<28) ;
  48              		.loc 1 9 0
  49 0016 0222     		movs	r2, #2
  50              	.LVL3:
  51 0018 93FBF2F3 		sdiv	r3, r3, r2
  52              	.LVL4:
  53 001c 5A1E     		subs	r2, r3, #1
   8:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  54              		.loc 1 8 0
  55 001e 064B     		ldr	r3, .L6
  56              		.loc 1 10 0
  57 0020 44EA0244 		orr	r4, r4, r2, lsl #16
   8:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  58              		.loc 1 8 0
  59 0024 5C60     		str	r4, [r3, #4]
  11:src/sys/clock.c ****   
  12:src/sys/clock.c ****   /* Switch on PLL : PLLON=1; */ 
  13:src/sys/clock.c ****   RCC.CR |= 1<<24;
  60              		.loc 1 13 0
  61 0026 1A68     		ldr	r2, [r3]
  62 0028 42F08072 		orr	r2, r2, #16777216
  63 002c 1A60     		str	r2, [r3]
  64              	.L2:
  14:src/sys/clock.c ****   
  15:src/sys/clock.c ****   /* wait for PLLRDY==1; */
  16:src/sys/clock.c ****   while ((RCC.CR&(1<<25))==0);
  65              		.loc 1 16 0 discriminator 1
  66 002e 1A68     		ldr	r2, [r3]
  67 0030 9201     		lsls	r2, r2, #6
  68 0032 FCD5     		bpl	.L2
  17:src/sys/clock.c **** }  
  69              		.loc 1 17 0
  70 0034 30BD     		pop	{r4, r5, pc}
  71              	.LVL5:
  72              	.L7:
  73 0036 00BF     		.align	2
  74              	.L6:
  75 0038 00000000 		.word	RCC
  76              		.cfi_endproc
  77              	.LFE392:
  78              		.size	start_PLL, .-start_PLL
  79              		.align	1
  80              		.global	stop_PLL
  81              		.thumb
  82              		.thumb_func
  83              		.type	stop_PLL, %function
  84              	stop_PLL:
  85              	.LFB393:
  18:src/sys/clock.c **** 
  19:src/sys/clock.c **** void stop_PLL() {
  86              		.loc 1 19 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  20:src/sys/clock.c ****   /* Switch off PLL : PLLON=0; */ 
  21:src/sys/clock.c ****   RCC.CR &= ~(1<<24);
  91              		.loc 1 21 0
  92 003c 034A     		ldr	r2, .L9
  93 003e 1368     		ldr	r3, [r2]
  94 0040 23F08073 		bic	r3, r3, #16777216
  95 0044 1360     		str	r3, [r2]
  96              	.LBB16:
  97              	.LBB17:
  98              		.file 2 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  99              		.loc 2 428 0
 100              	@ 428 "src/sys/cmsis_gcc.h" 1
 101 0046 BFF34F8F 		dsb 0xF
 102              	@ 0 "" 2
 103              		.thumb
 104 004a 7047     		bx	lr
 105              	.L10:
 106              		.align	2
 107              	.L9:
 108 004c 00000000 		.word	RCC
 109              	.LBE17:
 110              	.LBE16:
 111              		.cfi_endproc
 112              	.LFE393:
 113              		.size	stop_PLL, .-stop_PLL
 114              		.align	1
 115              		.global	set_SYSCLK
 116              		.thumb
 117              		.thumb_func
 118              		.type	set_SYSCLK, %function
 119              	set_SYSCLK:
 120              	.LFB394:
  22:src/sys/clock.c ****   __DSB();
  23:src/sys/clock.c **** }  
  24:src/sys/clock.c **** 
  25:src/sys/clock.c **** void set_SYSCLK(SW SRC) {
 121              		.loc 1 25 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.LVL6:
  26:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~(0x3<<0)) | ((SRC & 0x3)<<0);
 127              		.loc 1 26 0
 128 0050 064B     		ldr	r3, .L14
 129 0052 9A68     		ldr	r2, [r3, #8]
 130 0054 00F00301 		and	r1, r0, #3
 131 0058 22F00302 		bic	r2, r2, #3
 132 005c 0A43     		orrs	r2, r2, r1
 133 005e 9A60     		str	r2, [r3, #8]
 134              	.L12:
  27:src/sys/clock.c ****   while (((RCC.CFGR>>2) & 3)!=SRC);
 135              		.loc 1 27 0 discriminator 1
 136 0060 9A68     		ldr	r2, [r3, #8]
 137 0062 C2F38102 		ubfx	r2, r2, #2, #2
 138 0066 8242     		cmp	r2, r0
 139 0068 FAD1     		bne	.L12
  28:src/sys/clock.c **** }
 140              		.loc 1 28 0
 141 006a 7047     		bx	lr
 142              	.L15:
 143              		.align	2
 144              	.L14:
 145 006c 00000000 		.word	RCC
 146              		.cfi_endproc
 147              	.LFE394:
 148              		.size	set_SYSCLK, .-set_SYSCLK
 149              		.align	1
 150              		.global	set_bus_clock_dividers_exp
 151              		.thumb
 152              		.thumb_func
 153              		.type	set_bus_clock_dividers_exp, %function
 154              	set_bus_clock_dividers_exp:
 155              	.LFB395:
  29:src/sys/clock.c **** 
  30:src/sys/clock.c **** void set_bus_clock_dividers_exp(uint32_t HPRE__exp,
  31:src/sys/clock.c **** 				  uint32_t PPRE1_exp,
  32:src/sys/clock.c **** 				  uint32_t PPRE2_exp) {
 156              		.loc 1 32 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL7:
 161 0070 30B5     		push	{r4, r5, lr}
 162              		.cfi_def_cfa_offset 12
 163              		.cfi_offset 4, -12
 164              		.cfi_offset 5, -8
 165              		.cfi_offset 14, -4
  33:src/sys/clock.c ****   uint32_t HPRE =(HPRE__exp==0?0:(0x8|((HPRE__exp-1) & 0x7)));
 166              		.loc 1 33 0
 167 0072 20B1     		cbz	r0, .L17
 168              		.loc 1 33 0 is_stmt 0 discriminator 1
 169 0074 0138     		subs	r0, r0, #1
 170              	.LVL8:
 171 0076 00F00700 		and	r0, r0, #7
 172              	.LVL9:
 173 007a 40F00800 		orr	r0, r0, #8
 174              	.L17:
 175              	.LVL10:
  34:src/sys/clock.c ****   uint32_t PPRE1=(PPRE1_exp==0?0:(0x4|((PPRE1_exp-1) & 0x3)));
 176              		.loc 1 34 0 is_stmt 1 discriminator 4
 177 007e 21B1     		cbz	r1, .L18
 178              		.loc 1 34 0 is_stmt 0 discriminator 1
 179 0080 0139     		subs	r1, r1, #1
 180              	.LVL11:
 181 0082 01F00301 		and	r1, r1, #3
 182              	.LVL12:
 183 0086 41F00401 		orr	r1, r1, #4
 184              	.L18:
 185              	.LVL13:
  35:src/sys/clock.c ****   uint32_t PPRE2=(PPRE2_exp==0?0:(0x4|((PPRE2_exp-1) & 0x3)));
 186              		.loc 1 35 0 is_stmt 1 discriminator 4
 187 008a 22B1     		cbz	r2, .L19
 188              		.loc 1 35 0 is_stmt 0 discriminator 1
 189 008c 013A     		subs	r2, r2, #1
 190              	.LVL14:
 191 008e 02F00302 		and	r2, r2, #3
 192              	.LVL15:
 193 0092 42F00402 		orr	r2, r2, #4
 194              	.L19:
 195              	.LVL16:
  36:src/sys/clock.c ****   RCC.CFGR=
  37:src/sys/clock.c ****     (RCC.CFGR & ~0xfcf0) | 
 196              		.loc 1 37 0 is_stmt 1 discriminator 4
 197 0096 074D     		ldr	r5, .L23
 198 0098 AC68     		ldr	r4, [r5, #8]
 199 009a 24F47C43 		bic	r3, r4, #64512
 200 009e 23F0F003 		bic	r3, r3, #240
 201 00a2 43EA0013 		orr	r3, r3, r0, lsl #4
 202 00a6 43EA8121 		orr	r1, r3, r1, lsl #10
 203              	.LVL17:
 204 00aa 41EA4232 		orr	r2, r1, r2, lsl #13
 205              	.LVL18:
  36:src/sys/clock.c ****   RCC.CFGR=
 206              		.loc 1 36 0 discriminator 4
 207 00ae AA60     		str	r2, [r5, #8]
 208 00b0 30BD     		pop	{r4, r5, pc}
 209              	.L24:
 210 00b2 00BF     		.align	2
 211              	.L23:
 212 00b4 00000000 		.word	RCC
 213              		.cfi_endproc
 214              	.LFE395:
 215              		.size	set_bus_clock_dividers_exp, .-set_bus_clock_dividers_exp
 216              		.align	1
 217              		.global	set_MCO
 218              		.thumb
 219              		.thumb_func
 220              		.type	set_MCO, %function
 221              	set_MCO:
 222              	.LFB396:
  38:src/sys/clock.c ****     ((HPRE<<4) | (PPRE1<<10) | (PPRE2<<13));
  39:src/sys/clock.c **** }
  40:src/sys/clock.c **** 
  41:src/sys/clock.c **** void set_MCO(MCO1SRC SRC1,uint32_t DIV1,MCO2SRC SRC2,uint32_t DIV2) {
 223              		.loc 1 41 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              	.LVL19:
 228 00b8 F0B5     		push	{r4, r5, r6, r7, lr}
 229              		.cfi_def_cfa_offset 20
 230              		.cfi_offset 4, -20
 231              		.cfi_offset 5, -16
 232              		.cfi_offset 6, -12
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
  42:src/sys/clock.c ****   uint32_t MCO1=SRC1&0x3;
  43:src/sys/clock.c ****   uint32_t MCO2=SRC2&0x3;
  44:src/sys/clock.c ****   uint32_t MCO1PRE=((DIV1<=1)?0:((DIV1+2)&0x7));
  45:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
  46:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 235              		.loc 1 46 0
 236 00ba 114F     		ldr	r7, .L30
 237 00bc BD68     		ldr	r5, [r7, #8]
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 238              		.loc 1 44 0
 239 00be 0129     		cmp	r1, #1
 240              		.loc 1 46 0
 241 00c0 25F07F44 		bic	r4, r5, #-16777216
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 242              		.loc 1 44 0
 243 00c4 88BF     		it	hi
 244 00c6 0231     		addhi	r1, r1, #2
 245              	.LVL20:
  43:src/sys/clock.c ****   uint32_t MCO1PRE=((DIV1<=1)?0:((DIV1+2)&0x7));
 246              		.loc 1 43 0
 247 00c8 02F00302 		and	r2, r2, #3
 248              	.LVL21:
 249              		.loc 1 46 0
 250 00cc 24F4C004 		bic	r4, r4, #6291456
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 251              		.loc 1 44 0
 252 00d0 8CBF     		ite	hi
 253 00d2 01F00701 		andhi	r1, r1, #7
 254 00d6 0021     		movls	r1, #0
  42:src/sys/clock.c ****   uint32_t MCO1=SRC1&0x3;
 255              		.loc 1 42 0
 256 00d8 00F00300 		and	r0, r0, #3
 257              	.LVL22:
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 258              		.loc 1 45 0
 259 00dc 012B     		cmp	r3, #1
 260 00de 44EA8274 		orr	r4, r4, r2, lsl #30
 261 00e2 88BF     		it	hi
 262 00e4 9E1C     		addhi	r6, r3, #2
 263 00e6 44EA4050 		orr	r0, r4, r0, lsl #21
 264              	.LVL23:
 265 00ea 8CBF     		ite	hi
 266 00ec 06F00706 		andhi	r6, r6, #7
 267 00f0 0026     		movls	r6, #0
 268              	.LVL24:
 269 00f2 40EA0160 		orr	r0, r0, r1, lsl #24
 270              		.loc 1 46 0
 271 00f6 40EAC663 		orr	r3, r0, r6, lsl #27
 272              	.LVL25:
 273 00fa BB60     		str	r3, [r7, #8]
 274 00fc F0BD     		pop	{r4, r5, r6, r7, pc}
 275              	.LVL26:
 276              	.L31:
 277 00fe 00BF     		.align	2
 278              	.L30:
 279 0100 00000000 		.word	RCC
 280              		.cfi_endproc
 281              	.LFE396:
 282              		.size	set_MCO, .-set_MCO
 283              		.align	1
 284              		.global	enable_MCO_GPIO
 285              		.thumb
 286              		.thumb_func
 287              		.type	enable_MCO_GPIO, %function
 288              	enable_MCO_GPIO:
 289              	.LFB397:
  47:src/sys/clock.c ****     ((MCO1<<21) | (MCO1PRE<<24) |
  48:src/sys/clock.c ****      (MCO2PRE<<27) | (MCO2<<30));
  49:src/sys/clock.c **** }
  50:src/sys/clock.c **** 
  51:src/sys/clock.c **** void enable_MCO_GPIO() {
 290              		.loc 1 51 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295              	.LBB18:
 296              	.LBB19:
 297              		.file 3 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 298              		.loc 3 668 0
 299 0104 114B     		ldr	r3, .L33
 300 0106 1A6B     		ldr	r2, [r3, #48]
 301 0108 42F00102 		orr	r2, r2, #1
 302 010c 1A63     		str	r2, [r3, #48]
 303              	.LBB20:
 304              	.LBB21:
 305              		.loc 2 428 0
 306              	@ 428 "src/sys/cmsis_gcc.h" 1
 307 010e BFF34F8F 		dsb 0xF
 308              	@ 0 "" 2
 309              		.thumb
 310              	.LBE21:
 311              	.LBE20:
 312              	.LBE19:
 313              	.LBE18:
 314              	.LBB22:
 315              	.LBB23:
 666:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 316              		.loc 3 666 0
 317 0112 1A6B     		ldr	r2, [r3, #48]
 318 0114 42F00402 		orr	r2, r2, #4
 319 0118 1A63     		str	r2, [r3, #48]
 320              	.LBB24:
 321              	.LBB25:
 322              		.loc 2 428 0
 323              	@ 428 "src/sys/cmsis_gcc.h" 1
 324 011a BFF34F8F 		dsb 0xF
 325              	@ 0 "" 2
 326              		.thumb
 327              	.LBE25:
 328              	.LBE24:
 329              	.LBE23:
 330              	.LBE22:
  52:src/sys/clock.c **** 
  53:src/sys/clock.c ****   enable_GPIOA();
  54:src/sys/clock.c ****   enable_GPIOC();
  55:src/sys/clock.c **** 
  56:src/sys/clock.c ****   /* setup PA8,PC9 alternate function : MCO1 */
  57:src/sys/clock.c ****   /* AFRH8=0; */
  58:src/sys/clock.c ****   GPIOA.AFRH &= ~0x0000000f;
 331              		.loc 1 58 0
 332 011e 0C49     		ldr	r1, .L33+4
  59:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 333              		.loc 1 59 0
 334 0120 0C4A     		ldr	r2, .L33+8
  58:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 335              		.loc 1 58 0
 336 0122 4B6A     		ldr	r3, [r1, #36]
 337 0124 23F00F03 		bic	r3, r3, #15
 338 0128 4B62     		str	r3, [r1, #36]
 339              		.loc 1 59 0
 340 012a 536A     		ldr	r3, [r2, #36]
 341 012c 23F0F003 		bic	r3, r3, #240
 342 0130 5362     		str	r3, [r2, #36]
  60:src/sys/clock.c **** 
  61:src/sys/clock.c ****   /* switch PA8,PC9 to alternate function mode */
  62:src/sys/clock.c ****   /* MODERx=2; */
  63:src/sys/clock.c ****   GPIOA.MODER = 
  64:src/sys/clock.c ****     (GPIOA.MODER & ~(3<<16)) | (2<<16);
 343              		.loc 1 64 0
 344 0132 0B68     		ldr	r3, [r1]
 345 0134 23F44033 		bic	r3, r3, #196608
 346 0138 43F40033 		orr	r3, r3, #131072
  63:src/sys/clock.c ****     (GPIOA.MODER & ~(3<<16)) | (2<<16);
 347              		.loc 1 63 0
 348 013c 0B60     		str	r3, [r1]
  65:src/sys/clock.c ****   GPIOC.MODER = 
  66:src/sys/clock.c ****     (GPIOC.MODER & ~(3<<18)) | (2<<18);
 349              		.loc 1 66 0
 350 013e 1368     		ldr	r3, [r2]
 351 0140 23F44023 		bic	r3, r3, #786432
 352 0144 43F40023 		orr	r3, r3, #524288
  65:src/sys/clock.c ****   GPIOC.MODER = 
 353              		.loc 1 65 0
 354 0148 1360     		str	r3, [r2]
 355 014a 7047     		bx	lr
 356              	.L34:
 357              		.align	2
 358              	.L33:
 359 014c 00000000 		.word	RCC
 360 0150 00000000 		.word	GPIOA
 361 0154 00000000 		.word	GPIOC
 362              		.cfi_endproc
 363              	.LFE397:
 364              		.size	enable_MCO_GPIO, .-enable_MCO_GPIO
 365              		.align	1
 366              		.global	get_PLL_PCLK
 367              		.thumb
 368              		.thumb_func
 369              		.type	get_PLL_PCLK, %function
 370              	get_PLL_PCLK:
 371              	.LFB398:
  67:src/sys/clock.c **** }
  68:src/sys/clock.c **** 
  69:src/sys/clock.c **** uint32_t get_PLL_PCLK() {
 372              		.loc 1 69 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              		@ link register save eliminated.
  70:src/sys/clock.c ****   uint32_t pllcfgr=RCC.PLLCFGR;
 377              		.loc 1 70 0
 378 0158 0A4B     		ldr	r3, .L38
 379 015a 5B68     		ldr	r3, [r3, #4]
 380              	.LVL27:
  71:src/sys/clock.c ****   uint32_t 
  72:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
  73:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
  74:src/sys/clock.c ****     P=((pllcfgr>>16)&0x3)*2+2;
  75:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
  76:src/sys/clock.c ****   if (SRC==PLLSRC_HSI) {
 381              		.loc 1 76 0
 382 015c 5A02     		lsls	r2, r3, #9
  72:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
 383              		.loc 1 72 0
 384 015e 5FBF     		itttt	pl
 385 0160 03F03F00 		andpl	r0, r3, #63
  73:src/sys/clock.c ****     P=((pllcfgr>>16)&0x3)*2+2;
 386              		.loc 1 73 0
 387 0164 C3F38811 		ubfxpl	r1, r3, #6, #9
  74:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 388              		.loc 1 74 0
 389 0168 C3F30143 		ubfxpl	r3, r3, #16, #2
 390              	.LVL28:
 391 016c 0133     		addpl	r3, r3, #1
  77:src/sys/clock.c ****     return (HSI_FREQ*MHz/M*N/P);
 392              		.loc 1 77 0
 393 016e 5FBF     		itttt	pl
 394 0170 054A     		ldrpl	r2, .L38+4
 395 0172 B2FBF0F0 		udivpl	r0, r2, r0
  74:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 396              		.loc 1 74 0
 397 0176 5B00     		lslpl	r3, r3, #1
 398              		.loc 1 77 0
 399 0178 4843     		mulpl	r0, r0, r1
 400 017a 54BF     		ite	pl
 401 017c B0FBF3F0 		udivpl	r0, r0, r3
  78:src/sys/clock.c ****   } else {
  79:src/sys/clock.c ****     return (HSE_FREQ*MHz/M*N/P);
 402              		.loc 1 79 0
 403 0180 0020     		movmi	r0, #0
  80:src/sys/clock.c ****   }
  81:src/sys/clock.c **** }
 404              		.loc 1 81 0
 405 0182 7047     		bx	lr
 406              	.L39:
 407              		.align	2
 408              	.L38:
 409 0184 00000000 		.word	RCC
 410 0188 0024F400 		.word	16000000
 411              		.cfi_endproc
 412              	.LFE398:
 413              		.size	get_PLL_PCLK, .-get_PLL_PCLK
 414              		.align	1
 415              		.global	get_PLL_RCLK
 416              		.thumb
 417              		.thumb_func
 418              		.type	get_PLL_RCLK, %function
 419              	get_PLL_RCLK:
 420              	.LFB399:
  82:src/sys/clock.c **** 
  83:src/sys/clock.c **** uint32_t get_PLL_RCLK() {
 421              		.loc 1 83 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
  84:src/sys/clock.c ****   uint32_t pllcfgr=RCC.PLLCFGR;
 426              		.loc 1 84 0
 427 018c 094B     		ldr	r3, .L43
 428 018e 5968     		ldr	r1, [r3, #4]
 429              	.LVL29:
  85:src/sys/clock.c ****   uint32_t 
  86:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
  87:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
  88:src/sys/clock.c ****     R=(pllcfgr>>28)&0x7;
  89:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
  90:src/sys/clock.c ****   if (SRC==PLLSRC_HSI) {
 430              		.loc 1 90 0
 431 0190 4B02     		lsls	r3, r1, #9
  87:src/sys/clock.c ****     R=(pllcfgr>>28)&0x7;
 432              		.loc 1 87 0
 433 0192 5FBF     		itttt	pl
 434 0194 C1F38810 		ubfxpl	r0, r1, #6, #9
  86:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
 435              		.loc 1 86 0
 436 0198 01F03F03 		andpl	r3, r1, #63
  91:src/sys/clock.c ****     return (HSI_FREQ*MHz/M*N/R);
 437              		.loc 1 91 0
 438 019c 064A     		ldrpl	r2, .L43+4
 439 019e B2FBF3F3 		udivpl	r3, r2, r3
 440 01a2 5DBF     		ittte	pl
 441 01a4 4343     		mulpl	r3, r3, r0
  88:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 442              		.loc 1 88 0
 443 01a6 C1F30270 		ubfxpl	r0, r1, #28, #3
 444              		.loc 1 91 0
 445 01aa B3FBF0F0 		udivpl	r0, r3, r0
  92:src/sys/clock.c ****   } else {
  93:src/sys/clock.c ****     return (HSE_FREQ*MHz/M*N/R);
 446              		.loc 1 93 0
 447 01ae 0020     		movmi	r0, #0
  94:src/sys/clock.c ****   }
  95:src/sys/clock.c **** }
 448              		.loc 1 95 0
 449 01b0 7047     		bx	lr
 450              	.L44:
 451 01b2 00BF     		.align	2
 452              	.L43:
 453 01b4 00000000 		.word	RCC
 454 01b8 0024F400 		.word	16000000
 455              		.cfi_endproc
 456              	.LFE399:
 457              		.size	get_PLL_RCLK, .-get_PLL_RCLK
 458              		.align	1
 459              		.global	get_SYSCLK
 460              		.thumb
 461              		.thumb_func
 462              		.type	get_SYSCLK, %function
 463              	get_SYSCLK:
 464              	.LFB400:
  96:src/sys/clock.c **** 
  97:src/sys/clock.c **** uint32_t get_SYSCLK() {
 465              		.loc 1 97 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
  98:src/sys/clock.c ****   SW SWS=(RCC.CFGR>>2)&0x3;
 470              		.loc 1 98 0
 471 01bc 084B     		ldr	r3, .L54
 472 01be 9B68     		ldr	r3, [r3, #8]
 473              	.LVL30:
  99:src/sys/clock.c ****   switch (SWS) {
 474              		.loc 1 99 0
 475 01c0 C3F38103 		ubfx	r3, r3, #2, #2
 476              	.LVL31:
 477 01c4 022B     		cmp	r3, #2
 478 01c6 03D0     		beq	.L47
 479 01c8 032B     		cmp	r3, #3
 480 01ca 03D1     		bne	.L53
 100:src/sys/clock.c ****   case SW_HSI:
 101:src/sys/clock.c ****     return (HSI_FREQ*MHz);
 102:src/sys/clock.c ****   case SW_HSE:
 103:src/sys/clock.c ****     return (HSE_FREQ*MHz);
 104:src/sys/clock.c ****   case SW_PLL_P:
 105:src/sys/clock.c ****     return get_PLL_PCLK();
 106:src/sys/clock.c ****   case SW_PLL_R:
 107:src/sys/clock.c ****     return get_PLL_RCLK();
 481              		.loc 1 107 0
 482 01cc FFF7FEBF 		b	get_PLL_RCLK
 483              	.LVL32:
 484              	.L47:
 105:src/sys/clock.c ****   case SW_PLL_R:
 485              		.loc 1 105 0
 486 01d0 FFF7FEBF 		b	get_PLL_PCLK
 487              	.LVL33:
 488              	.L53:
  99:src/sys/clock.c ****   switch (SWS) {
 489              		.loc 1 99 0
 490 01d4 012B     		cmp	r3, #1
 101:src/sys/clock.c ****   case SW_HSE:
 491              		.loc 1 101 0
 492 01d6 0348     		ldr	r0, .L54+4
 493 01d8 08BF     		it	eq
 494 01da 0020     		moveq	r0, #0
 108:src/sys/clock.c ****   }
 109:src/sys/clock.c ****   return 0;
 110:src/sys/clock.c **** }
 495              		.loc 1 110 0
 496 01dc 7047     		bx	lr
 497              	.L55:
 498 01de 00BF     		.align	2
 499              	.L54:
 500 01e0 00000000 		.word	RCC
 501 01e4 0024F400 		.word	16000000
 502              		.cfi_endproc
 503              	.LFE400:
 504              		.size	get_SYSCLK, .-get_SYSCLK
 505              		.align	1
 506              		.global	get_AHBCLK
 507              		.thumb
 508              		.thumb_func
 509              		.type	get_AHBCLK, %function
 510              	get_AHBCLK:
 511              	.LFB401:
 111:src/sys/clock.c **** 
 112:src/sys/clock.c **** uint32_t get_AHBCLK() {
 512              		.loc 1 112 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 113:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 516              		.loc 1 113 0
 517 01e8 074B     		ldr	r3, .L58
 112:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 518              		.loc 1 112 0
 519 01ea 10B5     		push	{r4, lr}
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 4, -8
 522              		.cfi_offset 14, -4
 523              		.loc 1 113 0
 524 01ec 9C68     		ldr	r4, [r3, #8]
 525              	.LVL34:
 114:src/sys/clock.c ****   if ((cfgr&(1<<7))==0) {
 526              		.loc 1 114 0
 527 01ee 2306     		lsls	r3, r4, #24
 528 01f0 03D4     		bmi	.L57
 115:src/sys/clock.c ****     return (get_SYSCLK());
 116:src/sys/clock.c ****   } else {
 117:src/sys/clock.c ****     return(get_SYSCLK() >> (((cfgr>>4)&0x7)+1));
 118:src/sys/clock.c ****   } 
 119:src/sys/clock.c **** }
 529              		.loc 1 119 0
 530 01f2 BDE81040 		pop	{r4, lr}
 531              		.cfi_remember_state
 532              		.cfi_restore 14
 533              		.cfi_restore 4
 534              		.cfi_def_cfa_offset 0
 535              	.LVL35:
 115:src/sys/clock.c ****     return (get_SYSCLK());
 536              		.loc 1 115 0
 537 01f6 FFF7FEBF 		b	get_SYSCLK
 538              	.LVL36:
 539              	.L57:
 540              		.cfi_restore_state
 117:src/sys/clock.c ****   } 
 541              		.loc 1 117 0
 542 01fa FFF7FEFF 		bl	get_SYSCLK
 543              	.LVL37:
 544 01fe C4F30214 		ubfx	r4, r4, #4, #3
 545              	.LVL38:
 546 0202 0134     		adds	r4, r4, #1
 547              		.loc 1 119 0
 548 0204 E040     		lsrs	r0, r0, r4
 549 0206 10BD     		pop	{r4, pc}
 550              	.L59:
 551              		.align	2
 552              	.L58:
 553 0208 00000000 		.word	RCC
 554              		.cfi_endproc
 555              	.LFE401:
 556              		.size	get_AHBCLK, .-get_AHBCLK
 557              		.align	1
 558              		.global	get_APB1CLK
 559              		.thumb
 560              		.thumb_func
 561              		.type	get_APB1CLK, %function
 562              	get_APB1CLK:
 563              	.LFB402:
 120:src/sys/clock.c **** 
 121:src/sys/clock.c **** uint32_t get_APB1CLK() {
 564              		.loc 1 121 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 122:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 568              		.loc 1 122 0
 569 020c 074B     		ldr	r3, .L62
 121:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 570              		.loc 1 121 0
 571 020e 10B5     		push	{r4, lr}
 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 4, -8
 574              		.cfi_offset 14, -4
 575              		.loc 1 122 0
 576 0210 9C68     		ldr	r4, [r3, #8]
 577              	.LVL39:
 123:src/sys/clock.c ****   if ((cfgr&(1<<12))==0) {
 578              		.loc 1 123 0
 579 0212 E304     		lsls	r3, r4, #19
 580 0214 03D4     		bmi	.L61
 124:src/sys/clock.c ****     return (get_AHBCLK());
 125:src/sys/clock.c ****   } else {
 126:src/sys/clock.c ****     return(get_AHBCLK() >> (((cfgr>>10)&0x3)+1));
 127:src/sys/clock.c ****   } 
 128:src/sys/clock.c **** }
 581              		.loc 1 128 0
 582 0216 BDE81040 		pop	{r4, lr}
 583              		.cfi_remember_state
 584              		.cfi_restore 14
 585              		.cfi_restore 4
 586              		.cfi_def_cfa_offset 0
 587              	.LVL40:
 124:src/sys/clock.c ****     return (get_AHBCLK());
 588              		.loc 1 124 0
 589 021a FFF7FEBF 		b	get_AHBCLK
 590              	.LVL41:
 591              	.L61:
 592              		.cfi_restore_state
 126:src/sys/clock.c ****   } 
 593              		.loc 1 126 0
 594 021e FFF7FEFF 		bl	get_AHBCLK
 595              	.LVL42:
 596 0222 C4F38124 		ubfx	r4, r4, #10, #2
 597              	.LVL43:
 598 0226 0134     		adds	r4, r4, #1
 599              		.loc 1 128 0
 600 0228 E040     		lsrs	r0, r0, r4
 601 022a 10BD     		pop	{r4, pc}
 602              	.L63:
 603              		.align	2
 604              	.L62:
 605 022c 00000000 		.word	RCC
 606              		.cfi_endproc
 607              	.LFE402:
 608              		.size	get_APB1CLK, .-get_APB1CLK
 609              		.align	1
 610              		.global	get_APB2CLK
 611              		.thumb
 612              		.thumb_func
 613              		.type	get_APB2CLK, %function
 614              	get_APB2CLK:
 615              	.LFB403:
 129:src/sys/clock.c **** 
 130:src/sys/clock.c **** uint32_t get_APB2CLK() {
 616              		.loc 1 130 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 131:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 620              		.loc 1 131 0
 621 0230 074B     		ldr	r3, .L66
 130:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 622              		.loc 1 130 0
 623 0232 10B5     		push	{r4, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 4, -8
 626              		.cfi_offset 14, -4
 627              		.loc 1 131 0
 628 0234 9C68     		ldr	r4, [r3, #8]
 629              	.LVL44:
 132:src/sys/clock.c ****   if ((cfgr&(1<<15))==0) {
 630              		.loc 1 132 0
 631 0236 2304     		lsls	r3, r4, #16
 632 0238 03D4     		bmi	.L65
 133:src/sys/clock.c ****     return (get_AHBCLK());
 134:src/sys/clock.c ****   } else {
 135:src/sys/clock.c ****     return(get_AHBCLK() >> (((cfgr>>13)&0x3)+1));
 136:src/sys/clock.c ****   } 
 137:src/sys/clock.c **** }
 633              		.loc 1 137 0
 634 023a BDE81040 		pop	{r4, lr}
 635              		.cfi_remember_state
 636              		.cfi_restore 14
 637              		.cfi_restore 4
 638              		.cfi_def_cfa_offset 0
 639              	.LVL45:
 133:src/sys/clock.c ****     return (get_AHBCLK());
 640              		.loc 1 133 0
 641 023e FFF7FEBF 		b	get_AHBCLK
 642              	.LVL46:
 643              	.L65:
 644              		.cfi_restore_state
 135:src/sys/clock.c ****   } 
 645              		.loc 1 135 0
 646 0242 FFF7FEFF 		bl	get_AHBCLK
 647              	.LVL47:
 648 0246 C4F34134 		ubfx	r4, r4, #13, #2
 649              	.LVL48:
 650 024a 0134     		adds	r4, r4, #1
 651              		.loc 1 137 0
 652 024c E040     		lsrs	r0, r0, r4
 653 024e 10BD     		pop	{r4, pc}
 654              	.L67:
 655              		.align	2
 656              	.L66:
 657 0250 00000000 		.word	RCC
 658              		.cfi_endproc
 659              	.LFE403:
 660              		.size	get_APB2CLK, .-get_APB2CLK
 661              		.align	1
 662              		.global	get_APB1TIMCLK
 663              		.thumb
 664              		.thumb_func
 665              		.type	get_APB1TIMCLK, %function
 666              	get_APB1TIMCLK:
 667              	.LFB404:
 138:src/sys/clock.c **** 
 139:src/sys/clock.c **** uint32_t get_APB1TIMCLK() {
 668              		.loc 1 139 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672 0254 08B5     		push	{r3, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 3, -8
 675              		.cfi_offset 14, -4
 140:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 676              		.loc 1 140 0
 677 0256 064B     		ldr	r3, .L70
 678 0258 9B68     		ldr	r3, [r3, #8]
 679              	.LVL49:
 141:src/sys/clock.c ****   if ((cfgr&(1<<12))==0) {
 680              		.loc 1 141 0
 681 025a DB04     		lsls	r3, r3, #19
 682              	.LVL50:
 683 025c 03D4     		bmi	.L69
 142:src/sys/clock.c ****     return (get_APB1CLK());
 143:src/sys/clock.c ****   } else {
 144:src/sys/clock.c ****     return (get_APB1CLK()*2);
 145:src/sys/clock.c ****   } 
 146:src/sys/clock.c **** }
 684              		.loc 1 146 0
 685 025e BDE80840 		pop	{r3, lr}
 686              		.cfi_remember_state
 687              		.cfi_restore 14
 688              		.cfi_restore 3
 689              		.cfi_def_cfa_offset 0
 142:src/sys/clock.c ****     return (get_APB1CLK());
 690              		.loc 1 142 0
 691 0262 FFF7FEBF 		b	get_APB1CLK
 692              	.LVL51:
 693              	.L69:
 694              		.cfi_restore_state
 144:src/sys/clock.c ****   } 
 695              		.loc 1 144 0
 696 0266 FFF7FEFF 		bl	get_APB1CLK
 697              	.LVL52:
 698              		.loc 1 146 0
 699 026a 4000     		lsls	r0, r0, #1
 700 026c 08BD     		pop	{r3, pc}
 701              	.L71:
 702 026e 00BF     		.align	2
 703              	.L70:
 704 0270 00000000 		.word	RCC
 705              		.cfi_endproc
 706              	.LFE404:
 707              		.size	get_APB1TIMCLK, .-get_APB1TIMCLK
 708              		.align	1
 709              		.global	get_APB2TIMCLK
 710              		.thumb
 711              		.thumb_func
 712              		.type	get_APB2TIMCLK, %function
 713              	get_APB2TIMCLK:
 714              	.LFB405:
 147:src/sys/clock.c **** 
 148:src/sys/clock.c **** uint32_t get_APB2TIMCLK() {
 715              		.loc 1 148 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719 0274 08B5     		push	{r3, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 3, -8
 722              		.cfi_offset 14, -4
 149:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 723              		.loc 1 149 0
 724 0276 064B     		ldr	r3, .L74
 725 0278 9B68     		ldr	r3, [r3, #8]
 726              	.LVL53:
 150:src/sys/clock.c ****   if ((cfgr&(1<<15))==0) {
 727              		.loc 1 150 0
 728 027a 1B04     		lsls	r3, r3, #16
 729              	.LVL54:
 730 027c 03D4     		bmi	.L73
 151:src/sys/clock.c ****     return (get_APB2CLK());
 152:src/sys/clock.c ****   } else {
 153:src/sys/clock.c ****     return (get_APB2CLK()*2);
 154:src/sys/clock.c ****   } 
 155:src/sys/clock.c **** }
 731              		.loc 1 155 0
 732 027e BDE80840 		pop	{r3, lr}
 733              		.cfi_remember_state
 734              		.cfi_restore 14
 735              		.cfi_restore 3
 736              		.cfi_def_cfa_offset 0
 151:src/sys/clock.c ****     return (get_APB2CLK());
 737              		.loc 1 151 0
 738 0282 FFF7FEBF 		b	get_APB2CLK
 739              	.LVL55:
 740              	.L73:
 741              		.cfi_restore_state
 153:src/sys/clock.c ****   } 
 742              		.loc 1 153 0
 743 0286 FFF7FEFF 		bl	get_APB2CLK
 744              	.LVL56:
 745              		.loc 1 155 0
 746 028a 4000     		lsls	r0, r0, #1
 747 028c 08BD     		pop	{r3, pc}
 748              	.L75:
 749 028e 00BF     		.align	2
 750              	.L74:
 751 0290 00000000 		.word	RCC
 752              		.cfi_endproc
 753              	.LFE405:
 754              		.size	get_APB2TIMCLK, .-get_APB2TIMCLK
 755              	.Letext0:
 756              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 757              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 758              		.file 6 "src/sys/clock.h"
 759              		.section	.debug_info,"",%progbits
 760              	.Ldebug_info0:
 761 0000 0F080000 		.4byte	0x80f
 762 0004 0400     		.2byte	0x4
 763 0006 00000000 		.4byte	.Ldebug_abbrev0
 764 000a 04       		.byte	0x4
 765 000b 01       		.uleb128 0x1
 766 000c 7F040000 		.4byte	.LASF110
 767 0010 01       		.byte	0x1
 768 0011 80000000 		.4byte	.LASF111
 769 0015 CD030000 		.4byte	.LASF112
 770 0019 00000000 		.4byte	.Ltext0
 771 001d 94020000 		.4byte	.Letext0-.Ltext0
 772 0021 00000000 		.4byte	.Ldebug_line0
 773 0025 02       		.uleb128 0x2
 774 0026 01       		.byte	0x1
 775 0027 06       		.byte	0x6
 776 0028 1B040000 		.4byte	.LASF0
 777 002c 02       		.uleb128 0x2
 778 002d 01       		.byte	0x1
 779 002e 08       		.byte	0x8
 780 002f A7030000 		.4byte	.LASF1
 781 0033 02       		.uleb128 0x2
 782 0034 02       		.byte	0x2
 783 0035 05       		.byte	0x5
 784 0036 E0020000 		.4byte	.LASF2
 785 003a 02       		.uleb128 0x2
 786 003b 02       		.byte	0x2
 787 003c 07       		.byte	0x7
 788 003d 36040000 		.4byte	.LASF3
 789 0041 03       		.uleb128 0x3
 790 0042 76000000 		.4byte	.LASF5
 791 0046 04       		.byte	0x4
 792 0047 3F       		.byte	0x3f
 793 0048 4C000000 		.4byte	0x4c
 794 004c 02       		.uleb128 0x2
 795 004d 04       		.byte	0x4
 796 004e 05       		.byte	0x5
 797 004f 00030000 		.4byte	.LASF4
 798 0053 03       		.uleb128 0x3
 799 0054 C2030000 		.4byte	.LASF6
 800 0058 04       		.byte	0x4
 801 0059 41       		.byte	0x41
 802 005a 5E000000 		.4byte	0x5e
 803 005e 02       		.uleb128 0x2
 804 005f 04       		.byte	0x4
 805 0060 07       		.byte	0x7
 806 0061 70030000 		.4byte	.LASF7
 807 0065 02       		.uleb128 0x2
 808 0066 08       		.byte	0x8
 809 0067 05       		.byte	0x5
 810 0068 18020000 		.4byte	.LASF8
 811 006c 02       		.uleb128 0x2
 812 006d 08       		.byte	0x8
 813 006e 07       		.byte	0x7
 814 006f 06010000 		.4byte	.LASF9
 815 0073 04       		.uleb128 0x4
 816 0074 04       		.byte	0x4
 817 0075 05       		.byte	0x5
 818 0076 696E7400 		.ascii	"int\000"
 819 007a 02       		.uleb128 0x2
 820 007b 04       		.byte	0x4
 821 007c 07       		.byte	0x7
 822 007d 5B000000 		.4byte	.LASF10
 823 0081 03       		.uleb128 0x3
 824 0082 94030000 		.4byte	.LASF11
 825 0086 05       		.byte	0x5
 826 0087 1F       		.byte	0x1f
 827 0088 41000000 		.4byte	0x41
 828 008c 03       		.uleb128 0x3
 829 008d CB000000 		.4byte	.LASF12
 830 0091 05       		.byte	0x5
 831 0092 20       		.byte	0x20
 832 0093 53000000 		.4byte	0x53
 833 0097 05       		.uleb128 0x5
 834 0098 01       		.byte	0x1
 835 0099 06       		.byte	0x6
 836 009a 07       		.byte	0x7
 837 009b AC000000 		.4byte	0xac
 838 009f 06       		.uleb128 0x6
 839 00a0 A9000000 		.4byte	.LASF13
 840 00a4 00       		.sleb128 0
 841 00a5 06       		.uleb128 0x6
 842 00a6 9E000000 		.4byte	.LASF14
 843 00aa 01       		.sleb128 1
 844 00ab 00       		.byte	0
 845 00ac 03       		.uleb128 0x3
 846 00ad D9020000 		.4byte	.LASF15
 847 00b1 06       		.byte	0x6
 848 00b2 07       		.byte	0x7
 849 00b3 97000000 		.4byte	0x97
 850 00b7 05       		.uleb128 0x5
 851 00b8 01       		.byte	0x1
 852 00b9 06       		.byte	0x6
 853 00ba 08       		.byte	0x8
 854 00bb D8000000 		.4byte	0xd8
 855 00bf 06       		.uleb128 0x6
 856 00c0 58010000 		.4byte	.LASF16
 857 00c4 00       		.sleb128 0
 858 00c5 06       		.uleb128 0x6
 859 00c6 47010000 		.4byte	.LASF17
 860 00ca 01       		.sleb128 1
 861 00cb 06       		.uleb128 0x6
 862 00cc 20000000 		.4byte	.LASF18
 863 00d0 02       		.sleb128 2
 864 00d1 06       		.uleb128 0x6
 865 00d2 29000000 		.4byte	.LASF19
 866 00d6 03       		.sleb128 3
 867 00d7 00       		.byte	0
 868 00d8 07       		.uleb128 0x7
 869 00d9 535700   		.ascii	"SW\000"
 870 00dc 06       		.byte	0x6
 871 00dd 08       		.byte	0x8
 872 00de B7000000 		.4byte	0xb7
 873 00e2 05       		.uleb128 0x5
 874 00e3 01       		.byte	0x1
 875 00e4 06       		.byte	0x6
 876 00e5 09       		.byte	0x9
 877 00e6 03010000 		.4byte	0x103
 878 00ea 06       		.uleb128 0x6
 879 00eb 2F020000 		.4byte	.LASF20
 880 00ef 00       		.sleb128 0
 881 00f0 06       		.uleb128 0x6
 882 00f1 68000000 		.4byte	.LASF21
 883 00f5 01       		.sleb128 1
 884 00f6 06       		.uleb128 0x6
 885 00f7 26020000 		.4byte	.LASF22
 886 00fb 02       		.sleb128 2
 887 00fc 06       		.uleb128 0x6
 888 00fd EF000000 		.4byte	.LASF23
 889 0101 03       		.sleb128 3
 890 0102 00       		.byte	0
 891 0103 03       		.uleb128 0x3
 892 0104 53000000 		.4byte	.LASF24
 893 0108 06       		.byte	0x6
 894 0109 09       		.byte	0x9
 895 010a E2000000 		.4byte	0xe2
 896 010e 05       		.uleb128 0x5
 897 010f 01       		.byte	0x1
 898 0110 06       		.byte	0x6
 899 0111 0A       		.byte	0xa
 900 0112 2F010000 		.4byte	0x12f
 901 0116 06       		.uleb128 0x6
 902 0117 49040000 		.4byte	.LASF25
 903 011b 00       		.sleb128 0
 904 011c 06       		.uleb128 0x6
 905 011d BC010000 		.4byte	.LASF26
 906 0121 01       		.sleb128 1
 907 0122 06       		.uleb128 0x6
 908 0123 B4000000 		.4byte	.LASF27
 909 0127 02       		.sleb128 2
 910 0128 06       		.uleb128 0x6
 911 0129 FE030000 		.4byte	.LASF28
 912 012d 03       		.sleb128 3
 913 012e 00       		.byte	0
 914 012f 03       		.uleb128 0x3
 915 0130 D1020000 		.4byte	.LASF29
 916 0134 06       		.byte	0x6
 917 0135 0A       		.byte	0xa
 918 0136 0E010000 		.4byte	0x10e
 919 013a 02       		.uleb128 0x2
 920 013b 04       		.byte	0x4
 921 013c 07       		.byte	0x7
 922 013d 67030000 		.4byte	.LASF30
 923 0141 08       		.uleb128 0x8
 924 0142 BD000000 		.4byte	.LASF66
 925 0146 98       		.byte	0x98
 926 0147 03       		.byte	0x3
 927 0148 68       		.byte	0x68
 928 0149 15030000 		.4byte	0x315
 929 014d 09       		.uleb128 0x9
 930 014e 435200   		.ascii	"CR\000"
 931 0151 03       		.byte	0x3
 932 0152 69       		.byte	0x69
 933 0153 8C000000 		.4byte	0x8c
 934 0157 00       		.byte	0
 935 0158 0A       		.uleb128 0xa
 936 0159 4A030000 		.4byte	.LASF31
 937 015d 03       		.byte	0x3
 938 015e 6A       		.byte	0x6a
 939 015f 8C000000 		.4byte	0x8c
 940 0163 04       		.byte	0x4
 941 0164 0A       		.uleb128 0xa
 942 0165 2E030000 		.4byte	.LASF32
 943 0169 03       		.byte	0x3
 944 016a 6B       		.byte	0x6b
 945 016b 8C000000 		.4byte	0x8c
 946 016f 08       		.byte	0x8
 947 0170 09       		.uleb128 0x9
 948 0171 43495200 		.ascii	"CIR\000"
 949 0175 03       		.byte	0x3
 950 0176 6C       		.byte	0x6c
 951 0177 8C000000 		.4byte	0x8c
 952 017b 0C       		.byte	0xc
 953 017c 0A       		.uleb128 0xa
 954 017d 14050000 		.4byte	.LASF33
 955 0181 03       		.byte	0x3
 956 0182 6D       		.byte	0x6d
 957 0183 8C000000 		.4byte	0x8c
 958 0187 10       		.byte	0x10
 959 0188 0A       		.uleb128 0xa
 960 0189 B9020000 		.4byte	.LASF34
 961 018d 03       		.byte	0x3
 962 018e 6E       		.byte	0x6e
 963 018f 8C000000 		.4byte	0x8c
 964 0193 14       		.byte	0x14
 965 0194 0A       		.uleb128 0xa
 966 0195 32010000 		.4byte	.LASF35
 967 0199 03       		.byte	0x3
 968 019a 6F       		.byte	0x6f
 969 019b 8C000000 		.4byte	0x8c
 970 019f 18       		.byte	0x18
 971 01a0 0A       		.uleb128 0xa
 972 01a1 76010000 		.4byte	.LASF36
 973 01a5 03       		.byte	0x3
 974 01a6 70       		.byte	0x70
 975 01a7 8C000000 		.4byte	0x8c
 976 01ab 1C       		.byte	0x1c
 977 01ac 0A       		.uleb128 0xa
 978 01ad 4A000000 		.4byte	.LASF37
 979 01b1 03       		.byte	0x3
 980 01b2 71       		.byte	0x71
 981 01b3 8C000000 		.4byte	0x8c
 982 01b7 20       		.byte	0x20
 983 01b8 0A       		.uleb128 0xa
 984 01b9 41000000 		.4byte	.LASF38
 985 01bd 03       		.byte	0x3
 986 01be 72       		.byte	0x72
 987 01bf 8C000000 		.4byte	0x8c
 988 01c3 24       		.byte	0x24
 989 01c4 0A       		.uleb128 0xa
 990 01c5 8D010000 		.4byte	.LASF39
 991 01c9 03       		.byte	0x3
 992 01ca 73       		.byte	0x73
 993 01cb 8C000000 		.4byte	0x8c
 994 01cf 28       		.byte	0x28
 995 01d0 0A       		.uleb128 0xa
 996 01d1 CF010000 		.4byte	.LASF40
 997 01d5 03       		.byte	0x3
 998 01d6 74       		.byte	0x74
 999 01d7 8C000000 		.4byte	0x8c
 1000 01db 2C       		.byte	0x2c
 1001 01dc 0A       		.uleb128 0xa
 1002 01dd F8000000 		.4byte	.LASF41
 1003 01e1 03       		.byte	0x3
 1004 01e2 75       		.byte	0x75
 1005 01e3 8C000000 		.4byte	0x8c
 1006 01e7 30       		.byte	0x30
 1007 01e8 0A       		.uleb128 0xa
 1008 01e9 8C030000 		.4byte	.LASF42
 1009 01ed 03       		.byte	0x3
 1010 01ee 76       		.byte	0x76
 1011 01ef 8C000000 		.4byte	0x8c
 1012 01f3 34       		.byte	0x34
 1013 01f4 0A       		.uleb128 0xa
 1014 01f5 85010000 		.4byte	.LASF43
 1015 01f9 03       		.byte	0x3
 1016 01fa 77       		.byte	0x77
 1017 01fb 8C000000 		.4byte	0x8c
 1018 01ff 38       		.byte	0x38
 1019 0200 0A       		.uleb128 0xa
 1020 0201 09020000 		.4byte	.LASF44
 1021 0205 03       		.byte	0x3
 1022 0206 78       		.byte	0x78
 1023 0207 8C000000 		.4byte	0x8c
 1024 020b 3C       		.byte	0x3c
 1025 020c 0A       		.uleb128 0xa
 1026 020d 18000000 		.4byte	.LASF45
 1027 0211 03       		.byte	0x3
 1028 0212 79       		.byte	0x79
 1029 0213 8C000000 		.4byte	0x8c
 1030 0217 40       		.byte	0x40
 1031 0218 0A       		.uleb128 0xa
 1032 0219 87020000 		.4byte	.LASF46
 1033 021d 03       		.byte	0x3
 1034 021e 7A       		.byte	0x7a
 1035 021f 8C000000 		.4byte	0x8c
 1036 0223 44       		.byte	0x44
 1037 0224 0A       		.uleb128 0xa
 1038 0225 4D020000 		.4byte	.LASF47
 1039 0229 03       		.byte	0x3
 1040 022a 7B       		.byte	0x7b
 1041 022b 8C000000 		.4byte	0x8c
 1042 022f 48       		.byte	0x48
 1043 0230 0A       		.uleb128 0xa
 1044 0231 6C020000 		.4byte	.LASF48
 1045 0235 03       		.byte	0x3
 1046 0236 7C       		.byte	0x7c
 1047 0237 8C000000 		.4byte	0x8c
 1048 023b 4C       		.byte	0x4c
 1049 023c 0A       		.uleb128 0xa
 1050 023d 98020000 		.4byte	.LASF49
 1051 0241 03       		.byte	0x3
 1052 0242 7D       		.byte	0x7d
 1053 0243 8C000000 		.4byte	0x8c
 1054 0247 50       		.byte	0x50
 1055 0248 0A       		.uleb128 0xa
 1056 0249 6B040000 		.4byte	.LASF50
 1057 024d 03       		.byte	0x3
 1058 024e 7E       		.byte	0x7e
 1059 024f 8C000000 		.4byte	0x8c
 1060 0253 54       		.byte	0x54
 1061 0254 0A       		.uleb128 0xa
 1062 0255 5D030000 		.4byte	.LASF51
 1063 0259 03       		.byte	0x3
 1064 025a 7F       		.byte	0x7f
 1065 025b 8C000000 		.4byte	0x8c
 1066 025f 58       		.byte	0x58
 1067 0260 0A       		.uleb128 0xa
 1068 0261 AA020000 		.4byte	.LASF52
 1069 0265 03       		.byte	0x3
 1070 0266 80       		.byte	0x80
 1071 0267 8C000000 		.4byte	0x8c
 1072 026b 5C       		.byte	0x5c
 1073 026c 0A       		.uleb128 0xa
 1074 026d 43020000 		.4byte	.LASF53
 1075 0271 03       		.byte	0x3
 1076 0272 81       		.byte	0x81
 1077 0273 8C000000 		.4byte	0x8c
 1078 0277 60       		.byte	0x60
 1079 0278 0A       		.uleb128 0xa
 1080 0279 37000000 		.4byte	.LASF54
 1081 027d 03       		.byte	0x3
 1082 027e 82       		.byte	0x82
 1083 027f 8C000000 		.4byte	0x8c
 1084 0283 64       		.byte	0x64
 1085 0284 0A       		.uleb128 0xa
 1086 0285 C2020000 		.4byte	.LASF55
 1087 0289 03       		.byte	0x3
 1088 028a 83       		.byte	0x83
 1089 028b 8C000000 		.4byte	0x8c
 1090 028f 68       		.byte	0x68
 1091 0290 0A       		.uleb128 0xa
 1092 0291 09030000 		.4byte	.LASF56
 1093 0295 03       		.byte	0x3
 1094 0296 84       		.byte	0x84
 1095 0297 8C000000 		.4byte	0x8c
 1096 029b 6C       		.byte	0x6c
 1097 029c 0A       		.uleb128 0xa
 1098 029d 71000000 		.4byte	.LASF57
 1099 02a1 03       		.byte	0x3
 1100 02a2 85       		.byte	0x85
 1101 02a3 8C000000 		.4byte	0x8c
 1102 02a7 70       		.byte	0x70
 1103 02a8 09       		.uleb128 0x9
 1104 02a9 43535200 		.ascii	"CSR\000"
 1105 02ad 03       		.byte	0x3
 1106 02ae 86       		.byte	0x86
 1107 02af 8C000000 		.4byte	0x8c
 1108 02b3 74       		.byte	0x74
 1109 02b4 0A       		.uleb128 0xa
 1110 02b5 18030000 		.4byte	.LASF58
 1111 02b9 03       		.byte	0x3
 1112 02ba 87       		.byte	0x87
 1113 02bb 8C000000 		.4byte	0x8c
 1114 02bf 78       		.byte	0x78
 1115 02c0 0A       		.uleb128 0xa
 1116 02c1 33030000 		.4byte	.LASF59
 1117 02c5 03       		.byte	0x3
 1118 02c6 88       		.byte	0x88
 1119 02c7 8C000000 		.4byte	0x8c
 1120 02cb 7C       		.byte	0x7c
 1121 02cc 0A       		.uleb128 0xa
 1122 02cd 00010000 		.4byte	.LASF60
 1123 02d1 03       		.byte	0x3
 1124 02d2 89       		.byte	0x89
 1125 02d3 8C000000 		.4byte	0x8c
 1126 02d7 80       		.byte	0x80
 1127 02d8 0A       		.uleb128 0xa
 1128 02d9 9C030000 		.4byte	.LASF61
 1129 02dd 03       		.byte	0x3
 1130 02de 8A       		.byte	0x8a
 1131 02df 8C000000 		.4byte	0x8c
 1132 02e3 84       		.byte	0x84
 1133 02e4 0A       		.uleb128 0xa
 1134 02e5 00000000 		.4byte	.LASF62
 1135 02e9 03       		.byte	0x3
 1136 02ea 8B       		.byte	0x8b
 1137 02eb 8C000000 		.4byte	0x8c
 1138 02ef 88       		.byte	0x88
 1139 02f0 0A       		.uleb128 0xa
 1140 02f1 10000000 		.4byte	.LASF63
 1141 02f5 03       		.byte	0x3
 1142 02f6 8C       		.byte	0x8c
 1143 02f7 8C000000 		.4byte	0x8c
 1144 02fb 8C       		.byte	0x8c
 1145 02fc 0A       		.uleb128 0xa
 1146 02fd 22050000 		.4byte	.LASF64
 1147 0301 03       		.byte	0x3
 1148 0302 8D       		.byte	0x8d
 1149 0303 8C000000 		.4byte	0x8c
 1150 0307 90       		.byte	0x90
 1151 0308 0A       		.uleb128 0xa
 1152 0309 8F020000 		.4byte	.LASF65
 1153 030d 03       		.byte	0x3
 1154 030e 8E       		.byte	0x8e
 1155 030f 8C000000 		.4byte	0x8c
 1156 0313 94       		.byte	0x94
 1157 0314 00       		.byte	0
 1158 0315 08       		.uleb128 0x8
 1159 0316 52040000 		.4byte	.LASF67
 1160 031a 28       		.byte	0x28
 1161 031b 03       		.byte	0x3
 1162 031c 92       		.byte	0x92
 1163 031d 9A030000 		.4byte	0x39a
 1164 0321 0A       		.uleb128 0xa
 1165 0322 1D010000 		.4byte	.LASF68
 1166 0326 03       		.byte	0x3
 1167 0327 93       		.byte	0x93
 1168 0328 8C000000 		.4byte	0x8c
 1169 032c 00       		.byte	0
 1170 032d 0A       		.uleb128 0xa
 1171 032e 27030000 		.4byte	.LASF69
 1172 0332 03       		.byte	0x3
 1173 0333 94       		.byte	0x94
 1174 0334 8C000000 		.4byte	0x8c
 1175 0338 04       		.byte	0x4
 1176 0339 0A       		.uleb128 0xa
 1177 033a A2020000 		.4byte	.LASF70
 1178 033e 03       		.byte	0x3
 1179 033f 95       		.byte	0x95
 1180 0340 8C000000 		.4byte	0x8c
 1181 0344 08       		.byte	0x8
 1182 0345 0A       		.uleb128 0xa
 1183 0346 A9010000 		.4byte	.LASF71
 1184 034a 03       		.byte	0x3
 1185 034b 96       		.byte	0x96
 1186 034c 8C000000 		.4byte	0x8c
 1187 0350 0C       		.byte	0xc
 1188 0351 09       		.uleb128 0x9
 1189 0352 49445200 		.ascii	"IDR\000"
 1190 0356 03       		.byte	0x3
 1191 0357 97       		.byte	0x97
 1192 0358 8C000000 		.4byte	0x8c
 1193 035c 10       		.byte	0x10
 1194 035d 09       		.uleb128 0x9
 1195 035e 4F445200 		.ascii	"ODR\000"
 1196 0362 03       		.byte	0x3
 1197 0363 98       		.byte	0x98
 1198 0364 8C000000 		.4byte	0x8c
 1199 0368 14       		.byte	0x14
 1200 0369 0A       		.uleb128 0xa
 1201 036a 32000000 		.4byte	.LASF72
 1202 036e 03       		.byte	0x3
 1203 036f 99       		.byte	0x99
 1204 0370 8C000000 		.4byte	0x8c
 1205 0374 18       		.byte	0x18
 1206 0375 0A       		.uleb128 0xa
 1207 0376 1D050000 		.4byte	.LASF73
 1208 037a 03       		.byte	0x3
 1209 037b 9A       		.byte	0x9a
 1210 037c 8C000000 		.4byte	0x8c
 1211 0380 1C       		.byte	0x1c
 1212 0381 0A       		.uleb128 0xa
 1213 0382 2D010000 		.4byte	.LASF74
 1214 0386 03       		.byte	0x3
 1215 0387 9B       		.byte	0x9b
 1216 0388 8C000000 		.4byte	0x8c
 1217 038c 20       		.byte	0x20
 1218 038d 0A       		.uleb128 0xa
 1219 038e 23010000 		.4byte	.LASF75
 1220 0392 03       		.byte	0x3
 1221 0393 9C       		.byte	0x9c
 1222 0394 8C000000 		.4byte	0x8c
 1223 0398 24       		.byte	0x24
 1224 0399 00       		.byte	0
 1225 039a 0B       		.uleb128 0xb
 1226 039b 98000000 		.4byte	.LASF113
 1227 039f 02       		.byte	0x2
 1228 03a0 AA01     		.2byte	0x1aa
 1229 03a2 03       		.byte	0x3
 1230 03a3 0C       		.uleb128 0xc
 1231 03a4 9C010000 		.4byte	.LASF76
 1232 03a8 03       		.byte	0x3
 1233 03a9 9C02     		.2byte	0x29c
 1234 03ab 03       		.byte	0x3
 1235 03ac 0C       		.uleb128 0xc
 1236 03ad AF010000 		.4byte	.LASF77
 1237 03b1 03       		.byte	0x3
 1238 03b2 9A02     		.2byte	0x29a
 1239 03b4 03       		.byte	0x3
 1240 03b5 0D       		.uleb128 0xd
 1241 03b6 DE010000 		.4byte	.LASF78
 1242 03ba 01       		.byte	0x1
 1243 03bb 05       		.byte	0x5
 1244 03bc 00000000 		.4byte	.LFB392
 1245 03c0 3C000000 		.4byte	.LFE392-.LFB392
 1246 03c4 01       		.uleb128 0x1
 1247 03c5 9C       		.byte	0x9c
 1248 03c6 1B040000 		.4byte	0x41b
 1249 03ca 0E       		.uleb128 0xe
 1250 03cb 53524300 		.ascii	"SRC\000"
 1251 03cf 01       		.byte	0x1
 1252 03d0 05       		.byte	0x5
 1253 03d1 AC000000 		.4byte	0xac
 1254 03d5 00000000 		.4byte	.LLST0
 1255 03d9 0E       		.uleb128 0xe
 1256 03da 4D00     		.ascii	"M\000"
 1257 03dc 01       		.byte	0x1
 1258 03dd 06       		.byte	0x6
 1259 03de 81000000 		.4byte	0x81
 1260 03e2 21000000 		.4byte	.LLST1
 1261 03e6 0E       		.uleb128 0xe
 1262 03e7 4E00     		.ascii	"N\000"
 1263 03e9 01       		.byte	0x1
 1264 03ea 06       		.byte	0x6
 1265 03eb 81000000 		.4byte	0x81
 1266 03ef 42000000 		.4byte	.LLST2
 1267 03f3 0E       		.uleb128 0xe
 1268 03f4 5000     		.ascii	"P\000"
 1269 03f6 01       		.byte	0x1
 1270 03f7 06       		.byte	0x6
 1271 03f8 81000000 		.4byte	0x81
 1272 03fc 63000000 		.4byte	.LLST3
 1273 0400 0E       		.uleb128 0xe
 1274 0401 5100     		.ascii	"Q\000"
 1275 0403 01       		.byte	0x1
 1276 0404 06       		.byte	0x6
 1277 0405 81000000 		.4byte	0x81
 1278 0409 84000000 		.4byte	.LLST4
 1279 040d 0E       		.uleb128 0xe
 1280 040e 5200     		.ascii	"R\000"
 1281 0410 01       		.byte	0x1
 1282 0411 06       		.byte	0x6
 1283 0412 81000000 		.4byte	0x81
 1284 0416 A4000000 		.4byte	.LLST5
 1285 041a 00       		.byte	0
 1286 041b 0F       		.uleb128 0xf
 1287 041c F7020000 		.4byte	.LASF96
 1288 0420 01       		.byte	0x1
 1289 0421 13       		.byte	0x13
 1290 0422 3C000000 		.4byte	.LFB393
 1291 0426 14000000 		.4byte	.LFE393-.LFB393
 1292 042a 01       		.uleb128 0x1
 1293 042b 9C       		.byte	0x9c
 1294 042c 40040000 		.4byte	0x440
 1295 0430 10       		.uleb128 0x10
 1296 0431 9A030000 		.4byte	0x39a
 1297 0435 46000000 		.4byte	.LBB16
 1298 0439 0A000000 		.4byte	.LBE16-.LBB16
 1299 043d 01       		.byte	0x1
 1300 043e 16       		.byte	0x16
 1301 043f 00       		.byte	0
 1302 0440 0D       		.uleb128 0xd
 1303 0441 6B010000 		.4byte	.LASF79
 1304 0445 01       		.byte	0x1
 1305 0446 19       		.byte	0x19
 1306 0447 50000000 		.4byte	.LFB394
 1307 044b 20000000 		.4byte	.LFE394-.LFB394
 1308 044f 01       		.uleb128 0x1
 1309 0450 9C       		.byte	0x9c
 1310 0451 63040000 		.4byte	0x463
 1311 0455 11       		.uleb128 0x11
 1312 0456 53524300 		.ascii	"SRC\000"
 1313 045a 01       		.byte	0x1
 1314 045b 19       		.byte	0x19
 1315 045c D8000000 		.4byte	0xd8
 1316 0460 01       		.uleb128 0x1
 1317 0461 50       		.byte	0x50
 1318 0462 00       		.byte	0
 1319 0463 0D       		.uleb128 0xd
 1320 0464 D4000000 		.4byte	.LASF80
 1321 0468 01       		.byte	0x1
 1322 0469 1E       		.byte	0x1e
 1323 046a 70000000 		.4byte	.LFB395
 1324 046e 48000000 		.4byte	.LFE395-.LFB395
 1325 0472 01       		.uleb128 0x1
 1326 0473 9C       		.byte	0x9c
 1327 0474 D1040000 		.4byte	0x4d1
 1328 0478 12       		.uleb128 0x12
 1329 0479 75040000 		.4byte	.LASF81
 1330 047d 01       		.byte	0x1
 1331 047e 1E       		.byte	0x1e
 1332 047f 8C000000 		.4byte	0x8c
 1333 0483 C4000000 		.4byte	.LLST6
 1334 0487 12       		.uleb128 0x12
 1335 0488 4E010000 		.4byte	.LASF82
 1336 048c 01       		.byte	0x1
 1337 048d 1F       		.byte	0x1f
 1338 048e 8C000000 		.4byte	0x8c
 1339 0492 F2000000 		.4byte	.LLST7
 1340 0496 12       		.uleb128 0x12
 1341 0497 61040000 		.4byte	.LASF83
 1342 049b 01       		.byte	0x1
 1343 049c 20       		.byte	0x20
 1344 049d 8C000000 		.4byte	0x8c
 1345 04a1 20010000 		.4byte	.LLST8
 1346 04a5 13       		.uleb128 0x13
 1347 04a6 28010000 		.4byte	.LASF84
 1348 04aa 01       		.byte	0x1
 1349 04ab 21       		.byte	0x21
 1350 04ac 8C000000 		.4byte	0x8c
 1351 04b0 01       		.uleb128 0x1
 1352 04b1 50       		.byte	0x50
 1353 04b2 14       		.uleb128 0x14
 1354 04b3 5F010000 		.4byte	.LASF85
 1355 04b7 01       		.byte	0x1
 1356 04b8 22       		.byte	0x22
 1357 04b9 8C000000 		.4byte	0x8c
 1358 04bd 4E010000 		.4byte	.LLST9
 1359 04c1 14       		.uleb128 0x14
 1360 04c2 65010000 		.4byte	.LASF86
 1361 04c6 01       		.byte	0x1
 1362 04c7 23       		.byte	0x23
 1363 04c8 8C000000 		.4byte	0x8c
 1364 04cc 61010000 		.4byte	.LLST10
 1365 04d0 00       		.byte	0
 1366 04d1 0D       		.uleb128 0xd
 1367 04d2 42030000 		.4byte	.LASF87
 1368 04d6 01       		.byte	0x1
 1369 04d7 29       		.byte	0x29
 1370 04d8 B8000000 		.4byte	.LFB396
 1371 04dc 4C000000 		.4byte	.LFE396-.LFB396
 1372 04e0 01       		.uleb128 0x1
 1373 04e1 9C       		.byte	0x9c
 1374 04e2 5B050000 		.4byte	0x55b
 1375 04e6 12       		.uleb128 0x12
 1376 04e7 C5010000 		.4byte	.LASF88
 1377 04eb 01       		.byte	0x1
 1378 04ec 29       		.byte	0x29
 1379 04ed 03010000 		.4byte	0x103
 1380 04f1 74010000 		.4byte	.LLST11
 1381 04f5 12       		.uleb128 0x12
 1382 04f6 E8010000 		.4byte	.LASF89
 1383 04fa 01       		.byte	0x1
 1384 04fb 29       		.byte	0x29
 1385 04fc 8C000000 		.4byte	0x8c
 1386 0500 95010000 		.4byte	.LLST12
 1387 0504 12       		.uleb128 0x12
 1388 0505 CA010000 		.4byte	.LASF90
 1389 0509 01       		.byte	0x1
 1390 050a 29       		.byte	0x29
 1391 050b 2F010000 		.4byte	0x12f
 1392 050f B6010000 		.4byte	.LLST13
 1393 0513 12       		.uleb128 0x12
 1394 0514 ED010000 		.4byte	.LASF91
 1395 0518 01       		.byte	0x1
 1396 0519 29       		.byte	0x29
 1397 051a 8C000000 		.4byte	0x8c
 1398 051e D7010000 		.4byte	.LLST14
 1399 0522 14       		.uleb128 0x14
 1400 0523 82030000 		.4byte	.LASF92
 1401 0527 01       		.byte	0x1
 1402 0528 2A       		.byte	0x2a
 1403 0529 8C000000 		.4byte	0x8c
 1404 052d F8010000 		.4byte	.LLST15
 1405 0531 13       		.uleb128 0x13
 1406 0532 87030000 		.4byte	.LASF93
 1407 0536 01       		.byte	0x1
 1408 0537 2B       		.byte	0x2b
 1409 0538 8C000000 		.4byte	0x8c
 1410 053c 01       		.uleb128 0x1
 1411 053d 52       		.byte	0x52
 1412 053e 13       		.uleb128 0x13
 1413 053f 13040000 		.4byte	.LASF94
 1414 0543 01       		.byte	0x1
 1415 0544 2C       		.byte	0x2c
 1416 0545 8C000000 		.4byte	0x8c
 1417 0549 01       		.uleb128 0x1
 1418 054a 51       		.byte	0x51
 1419 054b 14       		.uleb128 0x14
 1420 054c F2010000 		.4byte	.LASF95
 1421 0550 01       		.byte	0x1
 1422 0551 2D       		.byte	0x2d
 1423 0552 8C000000 		.4byte	0x8c
 1424 0556 0B020000 		.4byte	.LLST16
 1425 055a 00       		.byte	0
 1426 055b 0F       		.uleb128 0xf
 1427 055c 5C020000 		.4byte	.LASF97
 1428 0560 01       		.byte	0x1
 1429 0561 33       		.byte	0x33
 1430 0562 04010000 		.4byte	.LFB397
 1431 0566 54000000 		.4byte	.LFE397-.LFB397
 1432 056a 01       		.uleb128 0x1
 1433 056b 9C       		.byte	0x9c
 1434 056c B5050000 		.4byte	0x5b5
 1435 0570 15       		.uleb128 0x15
 1436 0571 A3030000 		.4byte	0x3a3
 1437 0575 04010000 		.4byte	.LBB18
 1438 0579 0E000000 		.4byte	.LBE18-.LBB18
 1439 057d 01       		.byte	0x1
 1440 057e 35       		.byte	0x35
 1441 057f 94050000 		.4byte	0x594
 1442 0583 16       		.uleb128 0x16
 1443 0584 9A030000 		.4byte	0x39a
 1444 0588 0E010000 		.4byte	.LBB20
 1445 058c 04000000 		.4byte	.LBE20-.LBB20
 1446 0590 03       		.byte	0x3
 1447 0591 9C02     		.2byte	0x29c
 1448 0593 00       		.byte	0
 1449 0594 17       		.uleb128 0x17
 1450 0595 AC030000 		.4byte	0x3ac
 1451 0599 12010000 		.4byte	.LBB22
 1452 059d 0C000000 		.4byte	.LBE22-.LBB22
 1453 05a1 01       		.byte	0x1
 1454 05a2 36       		.byte	0x36
 1455 05a3 16       		.uleb128 0x16
 1456 05a4 9A030000 		.4byte	0x39a
 1457 05a8 1A010000 		.4byte	.LBB24
 1458 05ac 04000000 		.4byte	.LBE24-.LBB24
 1459 05b0 03       		.byte	0x3
 1460 05b1 9A02     		.2byte	0x29a
 1461 05b3 00       		.byte	0
 1462 05b4 00       		.byte	0
 1463 05b5 18       		.uleb128 0x18
 1464 05b6 EA020000 		.4byte	.LASF98
 1465 05ba 01       		.byte	0x1
 1466 05bb 45       		.byte	0x45
 1467 05bc 8C000000 		.4byte	0x8c
 1468 05c0 58010000 		.4byte	.LFB398
 1469 05c4 34000000 		.4byte	.LFE398-.LFB398
 1470 05c8 01       		.uleb128 0x1
 1471 05c9 9C       		.byte	0x9c
 1472 05ca 14060000 		.4byte	0x614
 1473 05ce 14       		.uleb128 0x14
 1474 05cf 90000000 		.4byte	.LASF99
 1475 05d3 01       		.byte	0x1
 1476 05d4 46       		.byte	0x46
 1477 05d5 8C000000 		.4byte	0x8c
 1478 05d9 1E020000 		.4byte	.LLST17
 1479 05dd 19       		.uleb128 0x19
 1480 05de 4D00     		.ascii	"M\000"
 1481 05e0 01       		.byte	0x1
 1482 05e1 48       		.byte	0x48
 1483 05e2 8C000000 		.4byte	0x8c
 1484 05e6 31020000 		.4byte	.LLST18
 1485 05ea 19       		.uleb128 0x19
 1486 05eb 4E00     		.ascii	"N\000"
 1487 05ed 01       		.byte	0x1
 1488 05ee 49       		.byte	0x49
 1489 05ef 8C000000 		.4byte	0x8c
 1490 05f3 49020000 		.4byte	.LLST19
 1491 05f7 19       		.uleb128 0x19
 1492 05f8 5000     		.ascii	"P\000"
 1493 05fa 01       		.byte	0x1
 1494 05fb 4A       		.byte	0x4a
 1495 05fc 8C000000 		.4byte	0x8c
 1496 0600 64020000 		.4byte	.LLST20
 1497 0604 19       		.uleb128 0x19
 1498 0605 53524300 		.ascii	"SRC\000"
 1499 0609 01       		.byte	0x1
 1500 060a 4B       		.byte	0x4b
 1501 060b AC000000 		.4byte	0xac
 1502 060f 81020000 		.4byte	.LLST21
 1503 0613 00       		.byte	0
 1504 0614 18       		.uleb128 0x18
 1505 0615 B5030000 		.4byte	.LASF100
 1506 0619 01       		.byte	0x1
 1507 061a 53       		.byte	0x53
 1508 061b 8C000000 		.4byte	0x8c
 1509 061f 8C010000 		.4byte	.LFB399
 1510 0623 30000000 		.4byte	.LFE399-.LFB399
 1511 0627 01       		.uleb128 0x1
 1512 0628 9C       		.byte	0x9c
 1513 0629 82060000 		.4byte	0x682
 1514 062d 13       		.uleb128 0x13
 1515 062e 90000000 		.4byte	.LASF99
 1516 0632 01       		.byte	0x1
 1517 0633 54       		.byte	0x54
 1518 0634 8C000000 		.4byte	0x8c
 1519 0638 01       		.uleb128 0x1
 1520 0639 51       		.byte	0x51
 1521 063a 1A       		.uleb128 0x1a
 1522 063b 4D00     		.ascii	"M\000"
 1523 063d 01       		.byte	0x1
 1524 063e 56       		.byte	0x56
 1525 063f 8C000000 		.4byte	0x8c
 1526 0643 06       		.uleb128 0x6
 1527 0644 71       		.byte	0x71
 1528 0645 00       		.sleb128 0
 1529 0646 08       		.byte	0x8
 1530 0647 3F       		.byte	0x3f
 1531 0648 1A       		.byte	0x1a
 1532 0649 9F       		.byte	0x9f
 1533 064a 1A       		.uleb128 0x1a
 1534 064b 4E00     		.ascii	"N\000"
 1535 064d 01       		.byte	0x1
 1536 064e 57       		.byte	0x57
 1537 064f 8C000000 		.4byte	0x8c
 1538 0653 09       		.uleb128 0x9
 1539 0654 71       		.byte	0x71
 1540 0655 00       		.sleb128 0
 1541 0656 36       		.byte	0x36
 1542 0657 25       		.byte	0x25
 1543 0658 0A       		.byte	0xa
 1544 0659 FF01     		.2byte	0x1ff
 1545 065b 1A       		.byte	0x1a
 1546 065c 9F       		.byte	0x9f
 1547 065d 1A       		.uleb128 0x1a
 1548 065e 5200     		.ascii	"R\000"
 1549 0660 01       		.byte	0x1
 1550 0661 58       		.byte	0x58
 1551 0662 8C000000 		.4byte	0x8c
 1552 0666 07       		.uleb128 0x7
 1553 0667 71       		.byte	0x71
 1554 0668 00       		.sleb128 0
 1555 0669 4C       		.byte	0x4c
 1556 066a 25       		.byte	0x25
 1557 066b 37       		.byte	0x37
 1558 066c 1A       		.byte	0x1a
 1559 066d 9F       		.byte	0x9f
 1560 066e 1A       		.uleb128 0x1a
 1561 066f 53524300 		.ascii	"SRC\000"
 1562 0673 01       		.byte	0x1
 1563 0674 59       		.byte	0x59
 1564 0675 AC000000 		.4byte	0xac
 1565 0679 07       		.uleb128 0x7
 1566 067a 71       		.byte	0x71
 1567 067b 00       		.sleb128 0
 1568 067c 46       		.byte	0x46
 1569 067d 25       		.byte	0x25
 1570 067e 31       		.byte	0x31
 1571 067f 1A       		.byte	0x1a
 1572 0680 9F       		.byte	0x9f
 1573 0681 00       		.byte	0
 1574 0682 18       		.uleb128 0x18
 1575 0683 38020000 		.4byte	.LASF101
 1576 0687 01       		.byte	0x1
 1577 0688 61       		.byte	0x61
 1578 0689 8C000000 		.4byte	0x8c
 1579 068d BC010000 		.4byte	.LFB400
 1580 0691 2C000000 		.4byte	.LFE400-.LFB400
 1581 0695 01       		.uleb128 0x1
 1582 0696 9C       		.byte	0x9c
 1583 0697 BD060000 		.4byte	0x6bd
 1584 069b 19       		.uleb128 0x19
 1585 069c 53575300 		.ascii	"SWS\000"
 1586 06a0 01       		.byte	0x1
 1587 06a1 62       		.byte	0x62
 1588 06a2 D8000000 		.4byte	0xd8
 1589 06a6 9A020000 		.4byte	.LLST22
 1590 06aa 1B       		.uleb128 0x1b
 1591 06ab D0010000 		.4byte	.LVL32
 1592 06af 14060000 		.4byte	0x614
 1593 06b3 1B       		.uleb128 0x1b
 1594 06b4 D4010000 		.4byte	.LVL33
 1595 06b8 B5050000 		.4byte	0x5b5
 1596 06bc 00       		.byte	0
 1597 06bd 18       		.uleb128 0x18
 1598 06be 52030000 		.4byte	.LASF102
 1599 06c2 01       		.byte	0x1
 1600 06c3 70       		.byte	0x70
 1601 06c4 8C000000 		.4byte	0x8c
 1602 06c8 E8010000 		.4byte	.LFB401
 1603 06cc 24000000 		.4byte	.LFE401-.LFB401
 1604 06d0 01       		.uleb128 0x1
 1605 06d1 9C       		.byte	0x9c
 1606 06d2 F8060000 		.4byte	0x6f8
 1607 06d6 14       		.uleb128 0x14
 1608 06d7 0B000000 		.4byte	.LASF103
 1609 06db 01       		.byte	0x1
 1610 06dc 71       		.byte	0x71
 1611 06dd 8C000000 		.4byte	0x8c
 1612 06e1 B3020000 		.4byte	.LLST23
 1613 06e5 1B       		.uleb128 0x1b
 1614 06e6 FA010000 		.4byte	.LVL36
 1615 06ea 82060000 		.4byte	0x682
 1616 06ee 1C       		.uleb128 0x1c
 1617 06ef FE010000 		.4byte	.LVL37
 1618 06f3 82060000 		.4byte	0x682
 1619 06f7 00       		.byte	0
 1620 06f8 18       		.uleb128 0x18
 1621 06f9 3B010000 		.4byte	.LASF104
 1622 06fd 01       		.byte	0x1
 1623 06fe 79       		.byte	0x79
 1624 06ff 8C000000 		.4byte	0x8c
 1625 0703 0C020000 		.4byte	.LFB402
 1626 0707 24000000 		.4byte	.LFE402-.LFB402
 1627 070b 01       		.uleb128 0x1
 1628 070c 9C       		.byte	0x9c
 1629 070d 33070000 		.4byte	0x733
 1630 0711 14       		.uleb128 0x14
 1631 0712 0B000000 		.4byte	.LASF103
 1632 0716 01       		.byte	0x1
 1633 0717 7A       		.byte	0x7a
 1634 0718 8C000000 		.4byte	0x8c
 1635 071c D1020000 		.4byte	.LLST24
 1636 0720 1B       		.uleb128 0x1b
 1637 0721 1E020000 		.4byte	.LVL41
 1638 0725 BD060000 		.4byte	0x6bd
 1639 0729 1C       		.uleb128 0x1c
 1640 072a 22020000 		.4byte	.LVL42
 1641 072e BD060000 		.4byte	0x6bd
 1642 0732 00       		.byte	0
 1643 0733 18       		.uleb128 0x18
 1644 0734 07040000 		.4byte	.LASF105
 1645 0738 01       		.byte	0x1
 1646 0739 82       		.byte	0x82
 1647 073a 8C000000 		.4byte	0x8c
 1648 073e 30020000 		.4byte	.LFB403
 1649 0742 24000000 		.4byte	.LFE403-.LFB403
 1650 0746 01       		.uleb128 0x1
 1651 0747 9C       		.byte	0x9c
 1652 0748 6E070000 		.4byte	0x76e
 1653 074c 14       		.uleb128 0x14
 1654 074d 0B000000 		.4byte	.LASF103
 1655 0751 01       		.byte	0x1
 1656 0752 83       		.byte	0x83
 1657 0753 8C000000 		.4byte	0x8c
 1658 0757 EF020000 		.4byte	.LLST25
 1659 075b 1B       		.uleb128 0x1b
 1660 075c 42020000 		.4byte	.LVL46
 1661 0760 BD060000 		.4byte	0x6bd
 1662 0764 1C       		.uleb128 0x1c
 1663 0765 46020000 		.4byte	.LVL47
 1664 0769 BD060000 		.4byte	0x6bd
 1665 076d 00       		.byte	0
 1666 076e 18       		.uleb128 0x18
 1667 076f 27040000 		.4byte	.LASF106
 1668 0773 01       		.byte	0x1
 1669 0774 8B       		.byte	0x8b
 1670 0775 8C000000 		.4byte	0x8c
 1671 0779 54020000 		.4byte	.LFB404
 1672 077d 20000000 		.4byte	.LFE404-.LFB404
 1673 0781 01       		.uleb128 0x1
 1674 0782 9C       		.byte	0x9c
 1675 0783 A9070000 		.4byte	0x7a9
 1676 0787 14       		.uleb128 0x14
 1677 0788 0B000000 		.4byte	.LASF103
 1678 078c 01       		.byte	0x1
 1679 078d 8C       		.byte	0x8c
 1680 078e 8C000000 		.4byte	0x8c
 1681 0792 0D030000 		.4byte	.LLST26
 1682 0796 1B       		.uleb128 0x1b
 1683 0797 66020000 		.4byte	.LVL51
 1684 079b F8060000 		.4byte	0x6f8
 1685 079f 1C       		.uleb128 0x1c
 1686 07a0 6A020000 		.4byte	.LVL52
 1687 07a4 F8060000 		.4byte	0x6f8
 1688 07a8 00       		.byte	0
 1689 07a9 18       		.uleb128 0x18
 1690 07aa FA010000 		.4byte	.LASF107
 1691 07ae 01       		.byte	0x1
 1692 07af 94       		.byte	0x94
 1693 07b0 8C000000 		.4byte	0x8c
 1694 07b4 74020000 		.4byte	.LFB405
 1695 07b8 20000000 		.4byte	.LFE405-.LFB405
 1696 07bc 01       		.uleb128 0x1
 1697 07bd 9C       		.byte	0x9c
 1698 07be E4070000 		.4byte	0x7e4
 1699 07c2 14       		.uleb128 0x14
 1700 07c3 0B000000 		.4byte	.LASF103
 1701 07c7 01       		.byte	0x1
 1702 07c8 95       		.byte	0x95
 1703 07c9 8C000000 		.4byte	0x8c
 1704 07cd 20030000 		.4byte	.LLST27
 1705 07d1 1B       		.uleb128 0x1b
 1706 07d2 86020000 		.4byte	.LVL55
 1707 07d6 33070000 		.4byte	0x733
 1708 07da 1C       		.uleb128 0x1c
 1709 07db 8A020000 		.4byte	.LVL56
 1710 07df 33070000 		.4byte	0x733
 1711 07e3 00       		.byte	0
 1712 07e4 1D       		.uleb128 0x1d
 1713 07e5 52434300 		.ascii	"RCC\000"
 1714 07e9 03       		.byte	0x3
 1715 07ea 3D02     		.2byte	0x23d
 1716 07ec F0070000 		.4byte	0x7f0
 1717 07f0 1E       		.uleb128 0x1e
 1718 07f1 41010000 		.4byte	0x141
 1719 07f5 1F       		.uleb128 0x1f
 1720 07f6 81020000 		.4byte	.LASF108
 1721 07fa 03       		.byte	0x3
 1722 07fb 4402     		.2byte	0x244
 1723 07fd 01080000 		.4byte	0x801
 1724 0801 1E       		.uleb128 0x1e
 1725 0802 15030000 		.4byte	0x315
 1726 0806 1F       		.uleb128 0x1f
 1727 0807 7B020000 		.4byte	.LASF109
 1728 080b 03       		.byte	0x3
 1729 080c 4602     		.2byte	0x246
 1730 080e 01080000 		.4byte	0x801
 1731 0812 00       		.byte	0
 1732              		.section	.debug_abbrev,"",%progbits
 1733              	.Ldebug_abbrev0:
 1734 0000 01       		.uleb128 0x1
 1735 0001 11       		.uleb128 0x11
 1736 0002 01       		.byte	0x1
 1737 0003 25       		.uleb128 0x25
 1738 0004 0E       		.uleb128 0xe
 1739 0005 13       		.uleb128 0x13
 1740 0006 0B       		.uleb128 0xb
 1741 0007 03       		.uleb128 0x3
 1742 0008 0E       		.uleb128 0xe
 1743 0009 1B       		.uleb128 0x1b
 1744 000a 0E       		.uleb128 0xe
 1745 000b 11       		.uleb128 0x11
 1746 000c 01       		.uleb128 0x1
 1747 000d 12       		.uleb128 0x12
 1748 000e 06       		.uleb128 0x6
 1749 000f 10       		.uleb128 0x10
 1750 0010 17       		.uleb128 0x17
 1751 0011 00       		.byte	0
 1752 0012 00       		.byte	0
 1753 0013 02       		.uleb128 0x2
 1754 0014 24       		.uleb128 0x24
 1755 0015 00       		.byte	0
 1756 0016 0B       		.uleb128 0xb
 1757 0017 0B       		.uleb128 0xb
 1758 0018 3E       		.uleb128 0x3e
 1759 0019 0B       		.uleb128 0xb
 1760 001a 03       		.uleb128 0x3
 1761 001b 0E       		.uleb128 0xe
 1762 001c 00       		.byte	0
 1763 001d 00       		.byte	0
 1764 001e 03       		.uleb128 0x3
 1765 001f 16       		.uleb128 0x16
 1766 0020 00       		.byte	0
 1767 0021 03       		.uleb128 0x3
 1768 0022 0E       		.uleb128 0xe
 1769 0023 3A       		.uleb128 0x3a
 1770 0024 0B       		.uleb128 0xb
 1771 0025 3B       		.uleb128 0x3b
 1772 0026 0B       		.uleb128 0xb
 1773 0027 49       		.uleb128 0x49
 1774 0028 13       		.uleb128 0x13
 1775 0029 00       		.byte	0
 1776 002a 00       		.byte	0
 1777 002b 04       		.uleb128 0x4
 1778 002c 24       		.uleb128 0x24
 1779 002d 00       		.byte	0
 1780 002e 0B       		.uleb128 0xb
 1781 002f 0B       		.uleb128 0xb
 1782 0030 3E       		.uleb128 0x3e
 1783 0031 0B       		.uleb128 0xb
 1784 0032 03       		.uleb128 0x3
 1785 0033 08       		.uleb128 0x8
 1786 0034 00       		.byte	0
 1787 0035 00       		.byte	0
 1788 0036 05       		.uleb128 0x5
 1789 0037 04       		.uleb128 0x4
 1790 0038 01       		.byte	0x1
 1791 0039 0B       		.uleb128 0xb
 1792 003a 0B       		.uleb128 0xb
 1793 003b 3A       		.uleb128 0x3a
 1794 003c 0B       		.uleb128 0xb
 1795 003d 3B       		.uleb128 0x3b
 1796 003e 0B       		.uleb128 0xb
 1797 003f 01       		.uleb128 0x1
 1798 0040 13       		.uleb128 0x13
 1799 0041 00       		.byte	0
 1800 0042 00       		.byte	0
 1801 0043 06       		.uleb128 0x6
 1802 0044 28       		.uleb128 0x28
 1803 0045 00       		.byte	0
 1804 0046 03       		.uleb128 0x3
 1805 0047 0E       		.uleb128 0xe
 1806 0048 1C       		.uleb128 0x1c
 1807 0049 0D       		.uleb128 0xd
 1808 004a 00       		.byte	0
 1809 004b 00       		.byte	0
 1810 004c 07       		.uleb128 0x7
 1811 004d 16       		.uleb128 0x16
 1812 004e 00       		.byte	0
 1813 004f 03       		.uleb128 0x3
 1814 0050 08       		.uleb128 0x8
 1815 0051 3A       		.uleb128 0x3a
 1816 0052 0B       		.uleb128 0xb
 1817 0053 3B       		.uleb128 0x3b
 1818 0054 0B       		.uleb128 0xb
 1819 0055 49       		.uleb128 0x49
 1820 0056 13       		.uleb128 0x13
 1821 0057 00       		.byte	0
 1822 0058 00       		.byte	0
 1823 0059 08       		.uleb128 0x8
 1824 005a 13       		.uleb128 0x13
 1825 005b 01       		.byte	0x1
 1826 005c 03       		.uleb128 0x3
 1827 005d 0E       		.uleb128 0xe
 1828 005e 0B       		.uleb128 0xb
 1829 005f 0B       		.uleb128 0xb
 1830 0060 3A       		.uleb128 0x3a
 1831 0061 0B       		.uleb128 0xb
 1832 0062 3B       		.uleb128 0x3b
 1833 0063 0B       		.uleb128 0xb
 1834 0064 01       		.uleb128 0x1
 1835 0065 13       		.uleb128 0x13
 1836 0066 00       		.byte	0
 1837 0067 00       		.byte	0
 1838 0068 09       		.uleb128 0x9
 1839 0069 0D       		.uleb128 0xd
 1840 006a 00       		.byte	0
 1841 006b 03       		.uleb128 0x3
 1842 006c 08       		.uleb128 0x8
 1843 006d 3A       		.uleb128 0x3a
 1844 006e 0B       		.uleb128 0xb
 1845 006f 3B       		.uleb128 0x3b
 1846 0070 0B       		.uleb128 0xb
 1847 0071 49       		.uleb128 0x49
 1848 0072 13       		.uleb128 0x13
 1849 0073 38       		.uleb128 0x38
 1850 0074 0B       		.uleb128 0xb
 1851 0075 00       		.byte	0
 1852 0076 00       		.byte	0
 1853 0077 0A       		.uleb128 0xa
 1854 0078 0D       		.uleb128 0xd
 1855 0079 00       		.byte	0
 1856 007a 03       		.uleb128 0x3
 1857 007b 0E       		.uleb128 0xe
 1858 007c 3A       		.uleb128 0x3a
 1859 007d 0B       		.uleb128 0xb
 1860 007e 3B       		.uleb128 0x3b
 1861 007f 0B       		.uleb128 0xb
 1862 0080 49       		.uleb128 0x49
 1863 0081 13       		.uleb128 0x13
 1864 0082 38       		.uleb128 0x38
 1865 0083 0B       		.uleb128 0xb
 1866 0084 00       		.byte	0
 1867 0085 00       		.byte	0
 1868 0086 0B       		.uleb128 0xb
 1869 0087 2E       		.uleb128 0x2e
 1870 0088 00       		.byte	0
 1871 0089 03       		.uleb128 0x3
 1872 008a 0E       		.uleb128 0xe
 1873 008b 3A       		.uleb128 0x3a
 1874 008c 0B       		.uleb128 0xb
 1875 008d 3B       		.uleb128 0x3b
 1876 008e 05       		.uleb128 0x5
 1877 008f 27       		.uleb128 0x27
 1878 0090 19       		.uleb128 0x19
 1879 0091 20       		.uleb128 0x20
 1880 0092 0B       		.uleb128 0xb
 1881 0093 00       		.byte	0
 1882 0094 00       		.byte	0
 1883 0095 0C       		.uleb128 0xc
 1884 0096 2E       		.uleb128 0x2e
 1885 0097 00       		.byte	0
 1886 0098 03       		.uleb128 0x3
 1887 0099 0E       		.uleb128 0xe
 1888 009a 3A       		.uleb128 0x3a
 1889 009b 0B       		.uleb128 0xb
 1890 009c 3B       		.uleb128 0x3b
 1891 009d 05       		.uleb128 0x5
 1892 009e 20       		.uleb128 0x20
 1893 009f 0B       		.uleb128 0xb
 1894 00a0 00       		.byte	0
 1895 00a1 00       		.byte	0
 1896 00a2 0D       		.uleb128 0xd
 1897 00a3 2E       		.uleb128 0x2e
 1898 00a4 01       		.byte	0x1
 1899 00a5 3F       		.uleb128 0x3f
 1900 00a6 19       		.uleb128 0x19
 1901 00a7 03       		.uleb128 0x3
 1902 00a8 0E       		.uleb128 0xe
 1903 00a9 3A       		.uleb128 0x3a
 1904 00aa 0B       		.uleb128 0xb
 1905 00ab 3B       		.uleb128 0x3b
 1906 00ac 0B       		.uleb128 0xb
 1907 00ad 27       		.uleb128 0x27
 1908 00ae 19       		.uleb128 0x19
 1909 00af 11       		.uleb128 0x11
 1910 00b0 01       		.uleb128 0x1
 1911 00b1 12       		.uleb128 0x12
 1912 00b2 06       		.uleb128 0x6
 1913 00b3 40       		.uleb128 0x40
 1914 00b4 18       		.uleb128 0x18
 1915 00b5 9742     		.uleb128 0x2117
 1916 00b7 19       		.uleb128 0x19
 1917 00b8 01       		.uleb128 0x1
 1918 00b9 13       		.uleb128 0x13
 1919 00ba 00       		.byte	0
 1920 00bb 00       		.byte	0
 1921 00bc 0E       		.uleb128 0xe
 1922 00bd 05       		.uleb128 0x5
 1923 00be 00       		.byte	0
 1924 00bf 03       		.uleb128 0x3
 1925 00c0 08       		.uleb128 0x8
 1926 00c1 3A       		.uleb128 0x3a
 1927 00c2 0B       		.uleb128 0xb
 1928 00c3 3B       		.uleb128 0x3b
 1929 00c4 0B       		.uleb128 0xb
 1930 00c5 49       		.uleb128 0x49
 1931 00c6 13       		.uleb128 0x13
 1932 00c7 02       		.uleb128 0x2
 1933 00c8 17       		.uleb128 0x17
 1934 00c9 00       		.byte	0
 1935 00ca 00       		.byte	0
 1936 00cb 0F       		.uleb128 0xf
 1937 00cc 2E       		.uleb128 0x2e
 1938 00cd 01       		.byte	0x1
 1939 00ce 3F       		.uleb128 0x3f
 1940 00cf 19       		.uleb128 0x19
 1941 00d0 03       		.uleb128 0x3
 1942 00d1 0E       		.uleb128 0xe
 1943 00d2 3A       		.uleb128 0x3a
 1944 00d3 0B       		.uleb128 0xb
 1945 00d4 3B       		.uleb128 0x3b
 1946 00d5 0B       		.uleb128 0xb
 1947 00d6 11       		.uleb128 0x11
 1948 00d7 01       		.uleb128 0x1
 1949 00d8 12       		.uleb128 0x12
 1950 00d9 06       		.uleb128 0x6
 1951 00da 40       		.uleb128 0x40
 1952 00db 18       		.uleb128 0x18
 1953 00dc 9742     		.uleb128 0x2117
 1954 00de 19       		.uleb128 0x19
 1955 00df 01       		.uleb128 0x1
 1956 00e0 13       		.uleb128 0x13
 1957 00e1 00       		.byte	0
 1958 00e2 00       		.byte	0
 1959 00e3 10       		.uleb128 0x10
 1960 00e4 1D       		.uleb128 0x1d
 1961 00e5 00       		.byte	0
 1962 00e6 31       		.uleb128 0x31
 1963 00e7 13       		.uleb128 0x13
 1964 00e8 11       		.uleb128 0x11
 1965 00e9 01       		.uleb128 0x1
 1966 00ea 12       		.uleb128 0x12
 1967 00eb 06       		.uleb128 0x6
 1968 00ec 58       		.uleb128 0x58
 1969 00ed 0B       		.uleb128 0xb
 1970 00ee 59       		.uleb128 0x59
 1971 00ef 0B       		.uleb128 0xb
 1972 00f0 00       		.byte	0
 1973 00f1 00       		.byte	0
 1974 00f2 11       		.uleb128 0x11
 1975 00f3 05       		.uleb128 0x5
 1976 00f4 00       		.byte	0
 1977 00f5 03       		.uleb128 0x3
 1978 00f6 08       		.uleb128 0x8
 1979 00f7 3A       		.uleb128 0x3a
 1980 00f8 0B       		.uleb128 0xb
 1981 00f9 3B       		.uleb128 0x3b
 1982 00fa 0B       		.uleb128 0xb
 1983 00fb 49       		.uleb128 0x49
 1984 00fc 13       		.uleb128 0x13
 1985 00fd 02       		.uleb128 0x2
 1986 00fe 18       		.uleb128 0x18
 1987 00ff 00       		.byte	0
 1988 0100 00       		.byte	0
 1989 0101 12       		.uleb128 0x12
 1990 0102 05       		.uleb128 0x5
 1991 0103 00       		.byte	0
 1992 0104 03       		.uleb128 0x3
 1993 0105 0E       		.uleb128 0xe
 1994 0106 3A       		.uleb128 0x3a
 1995 0107 0B       		.uleb128 0xb
 1996 0108 3B       		.uleb128 0x3b
 1997 0109 0B       		.uleb128 0xb
 1998 010a 49       		.uleb128 0x49
 1999 010b 13       		.uleb128 0x13
 2000 010c 02       		.uleb128 0x2
 2001 010d 17       		.uleb128 0x17
 2002 010e 00       		.byte	0
 2003 010f 00       		.byte	0
 2004 0110 13       		.uleb128 0x13
 2005 0111 34       		.uleb128 0x34
 2006 0112 00       		.byte	0
 2007 0113 03       		.uleb128 0x3
 2008 0114 0E       		.uleb128 0xe
 2009 0115 3A       		.uleb128 0x3a
 2010 0116 0B       		.uleb128 0xb
 2011 0117 3B       		.uleb128 0x3b
 2012 0118 0B       		.uleb128 0xb
 2013 0119 49       		.uleb128 0x49
 2014 011a 13       		.uleb128 0x13
 2015 011b 02       		.uleb128 0x2
 2016 011c 18       		.uleb128 0x18
 2017 011d 00       		.byte	0
 2018 011e 00       		.byte	0
 2019 011f 14       		.uleb128 0x14
 2020 0120 34       		.uleb128 0x34
 2021 0121 00       		.byte	0
 2022 0122 03       		.uleb128 0x3
 2023 0123 0E       		.uleb128 0xe
 2024 0124 3A       		.uleb128 0x3a
 2025 0125 0B       		.uleb128 0xb
 2026 0126 3B       		.uleb128 0x3b
 2027 0127 0B       		.uleb128 0xb
 2028 0128 49       		.uleb128 0x49
 2029 0129 13       		.uleb128 0x13
 2030 012a 02       		.uleb128 0x2
 2031 012b 17       		.uleb128 0x17
 2032 012c 00       		.byte	0
 2033 012d 00       		.byte	0
 2034 012e 15       		.uleb128 0x15
 2035 012f 1D       		.uleb128 0x1d
 2036 0130 01       		.byte	0x1
 2037 0131 31       		.uleb128 0x31
 2038 0132 13       		.uleb128 0x13
 2039 0133 11       		.uleb128 0x11
 2040 0134 01       		.uleb128 0x1
 2041 0135 12       		.uleb128 0x12
 2042 0136 06       		.uleb128 0x6
 2043 0137 58       		.uleb128 0x58
 2044 0138 0B       		.uleb128 0xb
 2045 0139 59       		.uleb128 0x59
 2046 013a 0B       		.uleb128 0xb
 2047 013b 01       		.uleb128 0x1
 2048 013c 13       		.uleb128 0x13
 2049 013d 00       		.byte	0
 2050 013e 00       		.byte	0
 2051 013f 16       		.uleb128 0x16
 2052 0140 1D       		.uleb128 0x1d
 2053 0141 00       		.byte	0
 2054 0142 31       		.uleb128 0x31
 2055 0143 13       		.uleb128 0x13
 2056 0144 11       		.uleb128 0x11
 2057 0145 01       		.uleb128 0x1
 2058 0146 12       		.uleb128 0x12
 2059 0147 06       		.uleb128 0x6
 2060 0148 58       		.uleb128 0x58
 2061 0149 0B       		.uleb128 0xb
 2062 014a 59       		.uleb128 0x59
 2063 014b 05       		.uleb128 0x5
 2064 014c 00       		.byte	0
 2065 014d 00       		.byte	0
 2066 014e 17       		.uleb128 0x17
 2067 014f 1D       		.uleb128 0x1d
 2068 0150 01       		.byte	0x1
 2069 0151 31       		.uleb128 0x31
 2070 0152 13       		.uleb128 0x13
 2071 0153 11       		.uleb128 0x11
 2072 0154 01       		.uleb128 0x1
 2073 0155 12       		.uleb128 0x12
 2074 0156 06       		.uleb128 0x6
 2075 0157 58       		.uleb128 0x58
 2076 0158 0B       		.uleb128 0xb
 2077 0159 59       		.uleb128 0x59
 2078 015a 0B       		.uleb128 0xb
 2079 015b 00       		.byte	0
 2080 015c 00       		.byte	0
 2081 015d 18       		.uleb128 0x18
 2082 015e 2E       		.uleb128 0x2e
 2083 015f 01       		.byte	0x1
 2084 0160 3F       		.uleb128 0x3f
 2085 0161 19       		.uleb128 0x19
 2086 0162 03       		.uleb128 0x3
 2087 0163 0E       		.uleb128 0xe
 2088 0164 3A       		.uleb128 0x3a
 2089 0165 0B       		.uleb128 0xb
 2090 0166 3B       		.uleb128 0x3b
 2091 0167 0B       		.uleb128 0xb
 2092 0168 49       		.uleb128 0x49
 2093 0169 13       		.uleb128 0x13
 2094 016a 11       		.uleb128 0x11
 2095 016b 01       		.uleb128 0x1
 2096 016c 12       		.uleb128 0x12
 2097 016d 06       		.uleb128 0x6
 2098 016e 40       		.uleb128 0x40
 2099 016f 18       		.uleb128 0x18
 2100 0170 9742     		.uleb128 0x2117
 2101 0172 19       		.uleb128 0x19
 2102 0173 01       		.uleb128 0x1
 2103 0174 13       		.uleb128 0x13
 2104 0175 00       		.byte	0
 2105 0176 00       		.byte	0
 2106 0177 19       		.uleb128 0x19
 2107 0178 34       		.uleb128 0x34
 2108 0179 00       		.byte	0
 2109 017a 03       		.uleb128 0x3
 2110 017b 08       		.uleb128 0x8
 2111 017c 3A       		.uleb128 0x3a
 2112 017d 0B       		.uleb128 0xb
 2113 017e 3B       		.uleb128 0x3b
 2114 017f 0B       		.uleb128 0xb
 2115 0180 49       		.uleb128 0x49
 2116 0181 13       		.uleb128 0x13
 2117 0182 02       		.uleb128 0x2
 2118 0183 17       		.uleb128 0x17
 2119 0184 00       		.byte	0
 2120 0185 00       		.byte	0
 2121 0186 1A       		.uleb128 0x1a
 2122 0187 34       		.uleb128 0x34
 2123 0188 00       		.byte	0
 2124 0189 03       		.uleb128 0x3
 2125 018a 08       		.uleb128 0x8
 2126 018b 3A       		.uleb128 0x3a
 2127 018c 0B       		.uleb128 0xb
 2128 018d 3B       		.uleb128 0x3b
 2129 018e 0B       		.uleb128 0xb
 2130 018f 49       		.uleb128 0x49
 2131 0190 13       		.uleb128 0x13
 2132 0191 02       		.uleb128 0x2
 2133 0192 18       		.uleb128 0x18
 2134 0193 00       		.byte	0
 2135 0194 00       		.byte	0
 2136 0195 1B       		.uleb128 0x1b
 2137 0196 898201   		.uleb128 0x4109
 2138 0199 00       		.byte	0
 2139 019a 11       		.uleb128 0x11
 2140 019b 01       		.uleb128 0x1
 2141 019c 9542     		.uleb128 0x2115
 2142 019e 19       		.uleb128 0x19
 2143 019f 31       		.uleb128 0x31
 2144 01a0 13       		.uleb128 0x13
 2145 01a1 00       		.byte	0
 2146 01a2 00       		.byte	0
 2147 01a3 1C       		.uleb128 0x1c
 2148 01a4 898201   		.uleb128 0x4109
 2149 01a7 00       		.byte	0
 2150 01a8 11       		.uleb128 0x11
 2151 01a9 01       		.uleb128 0x1
 2152 01aa 31       		.uleb128 0x31
 2153 01ab 13       		.uleb128 0x13
 2154 01ac 00       		.byte	0
 2155 01ad 00       		.byte	0
 2156 01ae 1D       		.uleb128 0x1d
 2157 01af 34       		.uleb128 0x34
 2158 01b0 00       		.byte	0
 2159 01b1 03       		.uleb128 0x3
 2160 01b2 08       		.uleb128 0x8
 2161 01b3 3A       		.uleb128 0x3a
 2162 01b4 0B       		.uleb128 0xb
 2163 01b5 3B       		.uleb128 0x3b
 2164 01b6 05       		.uleb128 0x5
 2165 01b7 49       		.uleb128 0x49
 2166 01b8 13       		.uleb128 0x13
 2167 01b9 3F       		.uleb128 0x3f
 2168 01ba 19       		.uleb128 0x19
 2169 01bb 3C       		.uleb128 0x3c
 2170 01bc 19       		.uleb128 0x19
 2171 01bd 00       		.byte	0
 2172 01be 00       		.byte	0
 2173 01bf 1E       		.uleb128 0x1e
 2174 01c0 35       		.uleb128 0x35
 2175 01c1 00       		.byte	0
 2176 01c2 49       		.uleb128 0x49
 2177 01c3 13       		.uleb128 0x13
 2178 01c4 00       		.byte	0
 2179 01c5 00       		.byte	0
 2180 01c6 1F       		.uleb128 0x1f
 2181 01c7 34       		.uleb128 0x34
 2182 01c8 00       		.byte	0
 2183 01c9 03       		.uleb128 0x3
 2184 01ca 0E       		.uleb128 0xe
 2185 01cb 3A       		.uleb128 0x3a
 2186 01cc 0B       		.uleb128 0xb
 2187 01cd 3B       		.uleb128 0x3b
 2188 01ce 05       		.uleb128 0x5
 2189 01cf 49       		.uleb128 0x49
 2190 01d0 13       		.uleb128 0x13
 2191 01d1 3F       		.uleb128 0x3f
 2192 01d2 19       		.uleb128 0x19
 2193 01d3 3C       		.uleb128 0x3c
 2194 01d4 19       		.uleb128 0x19
 2195 01d5 00       		.byte	0
 2196 01d6 00       		.byte	0
 2197 01d7 00       		.byte	0
 2198              		.section	.debug_loc,"",%progbits
 2199              	.Ldebug_loc0:
 2200              	.LLST0:
 2201 0000 00000000 		.4byte	.LVL0-.Ltext0
 2202 0004 12000000 		.4byte	.LVL2-.Ltext0
 2203 0008 0100     		.2byte	0x1
 2204 000a 50       		.byte	0x50
 2205 000b 12000000 		.4byte	.LVL2-.Ltext0
 2206 000f 3C000000 		.4byte	.LFE392-.Ltext0
 2207 0013 0400     		.2byte	0x4
 2208 0015 F3       		.byte	0xf3
 2209 0016 01       		.uleb128 0x1
 2210 0017 50       		.byte	0x50
 2211 0018 9F       		.byte	0x9f
 2212 0019 00000000 		.4byte	0
 2213 001d 00000000 		.4byte	0
 2214              	.LLST1:
 2215 0021 00000000 		.4byte	.LVL0-.Ltext0
 2216 0025 0E000000 		.4byte	.LVL1-.Ltext0
 2217 0029 0100     		.2byte	0x1
 2218 002b 51       		.byte	0x51
 2219 002c 0E000000 		.4byte	.LVL1-.Ltext0
 2220 0030 3C000000 		.4byte	.LFE392-.Ltext0
 2221 0034 0400     		.2byte	0x4
 2222 0036 F3       		.byte	0xf3
 2223 0037 01       		.uleb128 0x1
 2224 0038 51       		.byte	0x51
 2225 0039 9F       		.byte	0x9f
 2226 003a 00000000 		.4byte	0
 2227 003e 00000000 		.4byte	0
 2228              	.LLST2:
 2229 0042 00000000 		.4byte	.LVL0-.Ltext0
 2230 0046 18000000 		.4byte	.LVL3-.Ltext0
 2231 004a 0100     		.2byte	0x1
 2232 004c 52       		.byte	0x52
 2233 004d 18000000 		.4byte	.LVL3-.Ltext0
 2234 0051 3C000000 		.4byte	.LFE392-.Ltext0
 2235 0055 0400     		.2byte	0x4
 2236 0057 F3       		.byte	0xf3
 2237 0058 01       		.uleb128 0x1
 2238 0059 52       		.byte	0x52
 2239 005a 9F       		.byte	0x9f
 2240 005b 00000000 		.4byte	0
 2241 005f 00000000 		.4byte	0
 2242              	.LLST3:
 2243 0063 00000000 		.4byte	.LVL0-.Ltext0
 2244 0067 1C000000 		.4byte	.LVL4-.Ltext0
 2245 006b 0100     		.2byte	0x1
 2246 006d 53       		.byte	0x53
 2247 006e 1C000000 		.4byte	.LVL4-.Ltext0
 2248 0072 3C000000 		.4byte	.LFE392-.Ltext0
 2249 0076 0400     		.2byte	0x4
 2250 0078 F3       		.byte	0xf3
 2251 0079 01       		.uleb128 0x1
 2252 007a 53       		.byte	0x53
 2253 007b 9F       		.byte	0x9f
 2254 007c 00000000 		.4byte	0
 2255 0080 00000000 		.4byte	0
 2256              	.LLST4:
 2257 0084 00000000 		.4byte	.LVL0-.Ltext0
 2258 0088 36000000 		.4byte	.LVL5-.Ltext0
 2259 008c 0200     		.2byte	0x2
 2260 008e 91       		.byte	0x91
 2261 008f 00       		.sleb128 0
 2262 0090 36000000 		.4byte	.LVL5-.Ltext0
 2263 0094 3C000000 		.4byte	.LFE392-.Ltext0
 2264 0098 0200     		.2byte	0x2
 2265 009a 7D       		.byte	0x7d
 2266 009b 00       		.sleb128 0
 2267 009c 00000000 		.4byte	0
 2268 00a0 00000000 		.4byte	0
 2269              	.LLST5:
 2270 00a4 00000000 		.4byte	.LVL0-.Ltext0
 2271 00a8 36000000 		.4byte	.LVL5-.Ltext0
 2272 00ac 0200     		.2byte	0x2
 2273 00ae 91       		.byte	0x91
 2274 00af 04       		.sleb128 4
 2275 00b0 36000000 		.4byte	.LVL5-.Ltext0
 2276 00b4 3C000000 		.4byte	.LFE392-.Ltext0
 2277 00b8 0200     		.2byte	0x2
 2278 00ba 7D       		.byte	0x7d
 2279 00bb 04       		.sleb128 4
 2280 00bc 00000000 		.4byte	0
 2281 00c0 00000000 		.4byte	0
 2282              	.LLST6:
 2283 00c4 70000000 		.4byte	.LVL7-.Ltext0
 2284 00c8 76000000 		.4byte	.LVL8-.Ltext0
 2285 00cc 0100     		.2byte	0x1
 2286 00ce 50       		.byte	0x50
 2287 00cf 76000000 		.4byte	.LVL8-.Ltext0
 2288 00d3 7A000000 		.4byte	.LVL9-.Ltext0
 2289 00d7 0300     		.2byte	0x3
 2290 00d9 70       		.byte	0x70
 2291 00da 01       		.sleb128 1
 2292 00db 9F       		.byte	0x9f
 2293 00dc 7A000000 		.4byte	.LVL9-.Ltext0
 2294 00e0 B8000000 		.4byte	.LFE395-.Ltext0
 2295 00e4 0400     		.2byte	0x4
 2296 00e6 F3       		.byte	0xf3
 2297 00e7 01       		.uleb128 0x1
 2298 00e8 50       		.byte	0x50
 2299 00e9 9F       		.byte	0x9f
 2300 00ea 00000000 		.4byte	0
 2301 00ee 00000000 		.4byte	0
 2302              	.LLST7:
 2303 00f2 70000000 		.4byte	.LVL7-.Ltext0
 2304 00f6 82000000 		.4byte	.LVL11-.Ltext0
 2305 00fa 0100     		.2byte	0x1
 2306 00fc 51       		.byte	0x51
 2307 00fd 82000000 		.4byte	.LVL11-.Ltext0
 2308 0101 86000000 		.4byte	.LVL12-.Ltext0
 2309 0105 0300     		.2byte	0x3
 2310 0107 71       		.byte	0x71
 2311 0108 01       		.sleb128 1
 2312 0109 9F       		.byte	0x9f
 2313 010a 86000000 		.4byte	.LVL12-.Ltext0
 2314 010e B8000000 		.4byte	.LFE395-.Ltext0
 2315 0112 0400     		.2byte	0x4
 2316 0114 F3       		.byte	0xf3
 2317 0115 01       		.uleb128 0x1
 2318 0116 51       		.byte	0x51
 2319 0117 9F       		.byte	0x9f
 2320 0118 00000000 		.4byte	0
 2321 011c 00000000 		.4byte	0
 2322              	.LLST8:
 2323 0120 70000000 		.4byte	.LVL7-.Ltext0
 2324 0124 8E000000 		.4byte	.LVL14-.Ltext0
 2325 0128 0100     		.2byte	0x1
 2326 012a 52       		.byte	0x52
 2327 012b 8E000000 		.4byte	.LVL14-.Ltext0
 2328 012f 92000000 		.4byte	.LVL15-.Ltext0
 2329 0133 0300     		.2byte	0x3
 2330 0135 72       		.byte	0x72
 2331 0136 01       		.sleb128 1
 2332 0137 9F       		.byte	0x9f
 2333 0138 92000000 		.4byte	.LVL15-.Ltext0
 2334 013c B8000000 		.4byte	.LFE395-.Ltext0
 2335 0140 0400     		.2byte	0x4
 2336 0142 F3       		.byte	0xf3
 2337 0143 01       		.uleb128 0x1
 2338 0144 52       		.byte	0x52
 2339 0145 9F       		.byte	0x9f
 2340 0146 00000000 		.4byte	0
 2341 014a 00000000 		.4byte	0
 2342              	.LLST9:
 2343 014e 8A000000 		.4byte	.LVL13-.Ltext0
 2344 0152 AA000000 		.4byte	.LVL17-.Ltext0
 2345 0156 0100     		.2byte	0x1
 2346 0158 51       		.byte	0x51
 2347 0159 00000000 		.4byte	0
 2348 015d 00000000 		.4byte	0
 2349              	.LLST10:
 2350 0161 96000000 		.4byte	.LVL16-.Ltext0
 2351 0165 AE000000 		.4byte	.LVL18-.Ltext0
 2352 0169 0100     		.2byte	0x1
 2353 016b 52       		.byte	0x52
 2354 016c 00000000 		.4byte	0
 2355 0170 00000000 		.4byte	0
 2356              	.LLST11:
 2357 0174 B8000000 		.4byte	.LVL19-.Ltext0
 2358 0178 DC000000 		.4byte	.LVL22-.Ltext0
 2359 017c 0100     		.2byte	0x1
 2360 017e 50       		.byte	0x50
 2361 017f DC000000 		.4byte	.LVL22-.Ltext0
 2362 0183 04010000 		.4byte	.LFE396-.Ltext0
 2363 0187 0400     		.2byte	0x4
 2364 0189 F3       		.byte	0xf3
 2365 018a 01       		.uleb128 0x1
 2366 018b 50       		.byte	0x50
 2367 018c 9F       		.byte	0x9f
 2368 018d 00000000 		.4byte	0
 2369 0191 00000000 		.4byte	0
 2370              	.LLST12:
 2371 0195 B8000000 		.4byte	.LVL19-.Ltext0
 2372 0199 C8000000 		.4byte	.LVL20-.Ltext0
 2373 019d 0100     		.2byte	0x1
 2374 019f 51       		.byte	0x51
 2375 01a0 C8000000 		.4byte	.LVL20-.Ltext0
 2376 01a4 04010000 		.4byte	.LFE396-.Ltext0
 2377 01a8 0400     		.2byte	0x4
 2378 01aa F3       		.byte	0xf3
 2379 01ab 01       		.uleb128 0x1
 2380 01ac 51       		.byte	0x51
 2381 01ad 9F       		.byte	0x9f
 2382 01ae 00000000 		.4byte	0
 2383 01b2 00000000 		.4byte	0
 2384              	.LLST13:
 2385 01b6 B8000000 		.4byte	.LVL19-.Ltext0
 2386 01ba CC000000 		.4byte	.LVL21-.Ltext0
 2387 01be 0100     		.2byte	0x1
 2388 01c0 52       		.byte	0x52
 2389 01c1 CC000000 		.4byte	.LVL21-.Ltext0
 2390 01c5 04010000 		.4byte	.LFE396-.Ltext0
 2391 01c9 0400     		.2byte	0x4
 2392 01cb F3       		.byte	0xf3
 2393 01cc 01       		.uleb128 0x1
 2394 01cd 52       		.byte	0x52
 2395 01ce 9F       		.byte	0x9f
 2396 01cf 00000000 		.4byte	0
 2397 01d3 00000000 		.4byte	0
 2398              	.LLST14:
 2399 01d7 B8000000 		.4byte	.LVL19-.Ltext0
 2400 01db FA000000 		.4byte	.LVL25-.Ltext0
 2401 01df 0100     		.2byte	0x1
 2402 01e1 53       		.byte	0x53
 2403 01e2 FA000000 		.4byte	.LVL25-.Ltext0
 2404 01e6 04010000 		.4byte	.LFE396-.Ltext0
 2405 01ea 0400     		.2byte	0x4
 2406 01ec F3       		.byte	0xf3
 2407 01ed 01       		.uleb128 0x1
 2408 01ee 53       		.byte	0x53
 2409 01ef 9F       		.byte	0x9f
 2410 01f0 00000000 		.4byte	0
 2411 01f4 00000000 		.4byte	0
 2412              	.LLST15:
 2413 01f8 DC000000 		.4byte	.LVL22-.Ltext0
 2414 01fc EA000000 		.4byte	.LVL23-.Ltext0
 2415 0200 0100     		.2byte	0x1
 2416 0202 50       		.byte	0x50
 2417 0203 00000000 		.4byte	0
 2418 0207 00000000 		.4byte	0
 2419              	.LLST16:
 2420 020b F2000000 		.4byte	.LVL24-.Ltext0
 2421 020f FE000000 		.4byte	.LVL26-.Ltext0
 2422 0213 0100     		.2byte	0x1
 2423 0215 56       		.byte	0x56
 2424 0216 00000000 		.4byte	0
 2425 021a 00000000 		.4byte	0
 2426              	.LLST17:
 2427 021e 5C010000 		.4byte	.LVL27-.Ltext0
 2428 0222 6C010000 		.4byte	.LVL28-.Ltext0
 2429 0226 0100     		.2byte	0x1
 2430 0228 53       		.byte	0x53
 2431 0229 00000000 		.4byte	0
 2432 022d 00000000 		.4byte	0
 2433              	.LLST18:
 2434 0231 5C010000 		.4byte	.LVL27-.Ltext0
 2435 0235 6C010000 		.4byte	.LVL28-.Ltext0
 2436 0239 0600     		.2byte	0x6
 2437 023b 73       		.byte	0x73
 2438 023c 00       		.sleb128 0
 2439 023d 08       		.byte	0x8
 2440 023e 3F       		.byte	0x3f
 2441 023f 1A       		.byte	0x1a
 2442 0240 9F       		.byte	0x9f
 2443 0241 00000000 		.4byte	0
 2444 0245 00000000 		.4byte	0
 2445              	.LLST19:
 2446 0249 5C010000 		.4byte	.LVL27-.Ltext0
 2447 024d 6C010000 		.4byte	.LVL28-.Ltext0
 2448 0251 0900     		.2byte	0x9
 2449 0253 73       		.byte	0x73
 2450 0254 00       		.sleb128 0
 2451 0255 36       		.byte	0x36
 2452 0256 25       		.byte	0x25
 2453 0257 0A       		.byte	0xa
 2454 0258 FF01     		.2byte	0x1ff
 2455 025a 1A       		.byte	0x1a
 2456 025b 9F       		.byte	0x9f
 2457 025c 00000000 		.4byte	0
 2458 0260 00000000 		.4byte	0
 2459              	.LLST20:
 2460 0264 5C010000 		.4byte	.LVL27-.Ltext0
 2461 0268 6C010000 		.4byte	.LVL28-.Ltext0
 2462 026c 0B00     		.2byte	0xb
 2463 026e 73       		.byte	0x73
 2464 026f 00       		.sleb128 0
 2465 0270 40       		.byte	0x40
 2466 0271 25       		.byte	0x25
 2467 0272 33       		.byte	0x33
 2468 0273 1A       		.byte	0x1a
 2469 0274 23       		.byte	0x23
 2470 0275 01       		.uleb128 0x1
 2471 0276 31       		.byte	0x31
 2472 0277 24       		.byte	0x24
 2473 0278 9F       		.byte	0x9f
 2474 0279 00000000 		.4byte	0
 2475 027d 00000000 		.4byte	0
 2476              	.LLST21:
 2477 0281 5C010000 		.4byte	.LVL27-.Ltext0
 2478 0285 6C010000 		.4byte	.LVL28-.Ltext0
 2479 0289 0700     		.2byte	0x7
 2480 028b 73       		.byte	0x73
 2481 028c 00       		.sleb128 0
 2482 028d 46       		.byte	0x46
 2483 028e 25       		.byte	0x25
 2484 028f 31       		.byte	0x31
 2485 0290 1A       		.byte	0x1a
 2486 0291 9F       		.byte	0x9f
 2487 0292 00000000 		.4byte	0
 2488 0296 00000000 		.4byte	0
 2489              	.LLST22:
 2490 029a C0010000 		.4byte	.LVL30-.Ltext0
 2491 029e C4010000 		.4byte	.LVL31-.Ltext0
 2492 02a2 0700     		.2byte	0x7
 2493 02a4 73       		.byte	0x73
 2494 02a5 00       		.sleb128 0
 2495 02a6 32       		.byte	0x32
 2496 02a7 25       		.byte	0x25
 2497 02a8 33       		.byte	0x33
 2498 02a9 1A       		.byte	0x1a
 2499 02aa 9F       		.byte	0x9f
 2500 02ab 00000000 		.4byte	0
 2501 02af 00000000 		.4byte	0
 2502              	.LLST23:
 2503 02b3 EE010000 		.4byte	.LVL34-.Ltext0
 2504 02b7 F6010000 		.4byte	.LVL35-.Ltext0
 2505 02bb 0100     		.2byte	0x1
 2506 02bd 54       		.byte	0x54
 2507 02be FA010000 		.4byte	.LVL36-.Ltext0
 2508 02c2 02020000 		.4byte	.LVL38-.Ltext0
 2509 02c6 0100     		.2byte	0x1
 2510 02c8 54       		.byte	0x54
 2511 02c9 00000000 		.4byte	0
 2512 02cd 00000000 		.4byte	0
 2513              	.LLST24:
 2514 02d1 12020000 		.4byte	.LVL39-.Ltext0
 2515 02d5 1A020000 		.4byte	.LVL40-.Ltext0
 2516 02d9 0100     		.2byte	0x1
 2517 02db 54       		.byte	0x54
 2518 02dc 1E020000 		.4byte	.LVL41-.Ltext0
 2519 02e0 26020000 		.4byte	.LVL43-.Ltext0
 2520 02e4 0100     		.2byte	0x1
 2521 02e6 54       		.byte	0x54
 2522 02e7 00000000 		.4byte	0
 2523 02eb 00000000 		.4byte	0
 2524              	.LLST25:
 2525 02ef 36020000 		.4byte	.LVL44-.Ltext0
 2526 02f3 3E020000 		.4byte	.LVL45-.Ltext0
 2527 02f7 0100     		.2byte	0x1
 2528 02f9 54       		.byte	0x54
 2529 02fa 42020000 		.4byte	.LVL46-.Ltext0
 2530 02fe 4A020000 		.4byte	.LVL48-.Ltext0
 2531 0302 0100     		.2byte	0x1
 2532 0304 54       		.byte	0x54
 2533 0305 00000000 		.4byte	0
 2534 0309 00000000 		.4byte	0
 2535              	.LLST26:
 2536 030d 5A020000 		.4byte	.LVL49-.Ltext0
 2537 0311 5C020000 		.4byte	.LVL50-.Ltext0
 2538 0315 0100     		.2byte	0x1
 2539 0317 53       		.byte	0x53
 2540 0318 00000000 		.4byte	0
 2541 031c 00000000 		.4byte	0
 2542              	.LLST27:
 2543 0320 7A020000 		.4byte	.LVL53-.Ltext0
 2544 0324 7C020000 		.4byte	.LVL54-.Ltext0
 2545 0328 0100     		.2byte	0x1
 2546 032a 53       		.byte	0x53
 2547 032b 00000000 		.4byte	0
 2548 032f 00000000 		.4byte	0
 2549              		.section	.debug_aranges,"",%progbits
 2550 0000 1C000000 		.4byte	0x1c
 2551 0004 0200     		.2byte	0x2
 2552 0006 00000000 		.4byte	.Ldebug_info0
 2553 000a 04       		.byte	0x4
 2554 000b 00       		.byte	0
 2555 000c 0000     		.2byte	0
 2556 000e 0000     		.2byte	0
 2557 0010 00000000 		.4byte	.Ltext0
 2558 0014 94020000 		.4byte	.Letext0-.Ltext0
 2559 0018 00000000 		.4byte	0
 2560 001c 00000000 		.4byte	0
 2561              		.section	.debug_line,"",%progbits
 2562              	.Ldebug_line0:
 2563 0000 7C010000 		.section	.debug_str,"MS",%progbits,1
 2563      0200A200 
 2563      00000201 
 2563      FB0E0D00 
 2563      01010101 
 2564              	.LASF62:
 2565 0000 504C4C53 		.ascii	"PLLSAICFGR\000"
 2565      41494346 
 2565      475200
 2566              	.LASF103:
 2567 000b 63666772 		.ascii	"cfgr\000"
 2567      00
 2568              	.LASF63:
 2569 0010 44434B43 		.ascii	"DCKCFGR\000"
 2569      46475200 
 2570              	.LASF45:
 2571 0018 41504231 		.ascii	"APB1ENR\000"
 2571      454E5200 
 2572              	.LASF18:
 2573 0020 53575F50 		.ascii	"SW_PLL_P\000"
 2573      4C4C5F50 
 2573      00
 2574              	.LASF19:
 2575 0029 53575F50 		.ascii	"SW_PLL_R\000"
 2575      4C4C5F52 
 2575      00
 2576              	.LASF72:
 2577 0032 42535252 		.ascii	"BSRR\000"
 2577      00
 2578              	.LASF54:
 2579 0037 41504232 		.ascii	"APB2LPENR\000"
 2579      4C50454E 
 2579      5200
 2580              	.LASF38:
 2581 0041 41504232 		.ascii	"APB2RSTR\000"
 2581      52535452 
 2581      00
 2582              	.LASF37:
 2583 004a 41504231 		.ascii	"APB1RSTR\000"
 2583      52535452 
 2583      00
 2584              	.LASF24:
 2585 0053 4D434F31 		.ascii	"MCO1SRC\000"
 2585      53524300 
 2586              	.LASF10:
 2587 005b 756E7369 		.ascii	"unsigned int\000"
 2587      676E6564 
 2587      20696E74 
 2587      00
 2588              	.LASF21:
 2589 0068 4D434F31 		.ascii	"MCO1_LSE\000"
 2589      5F4C5345 
 2589      00
 2590              	.LASF57:
 2591 0071 42444352 		.ascii	"BDCR\000"
 2591      00
 2592              	.LASF5:
 2593 0076 5F5F696E 		.ascii	"__int32_t\000"
 2593      7433325F 
 2593      7400
 2594              	.LASF111:
 2595 0080 7372632F 		.ascii	"src/sys/clock.c\000"
 2595      7379732F 
 2595      636C6F63 
 2595      6B2E6300 
 2596              	.LASF99:
 2597 0090 706C6C63 		.ascii	"pllcfgr\000"
 2597      66677200 
 2598              	.LASF113:
 2599 0098 5F5F4453 		.ascii	"__DSB\000"
 2599      4200
 2600              	.LASF14:
 2601 009e 504C4C53 		.ascii	"PLLSRC_HSE\000"
 2601      52435F48 
 2601      534500
 2602              	.LASF13:
 2603 00a9 504C4C53 		.ascii	"PLLSRC_HSI\000"
 2603      52435F48 
 2603      534900
 2604              	.LASF27:
 2605 00b4 4D434F32 		.ascii	"MCO2_HSE\000"
 2605      5F485345 
 2605      00
 2606              	.LASF66:
 2607 00bd 5243435F 		.ascii	"RCC_registers\000"
 2607      72656769 
 2607      73746572 
 2607      7300
 2608              	.LASF12:
 2609 00cb 75696E74 		.ascii	"uint32_t\000"
 2609      33325F74 
 2609      00
 2610              	.LASF80:
 2611 00d4 7365745F 		.ascii	"set_bus_clock_dividers_exp\000"
 2611      6275735F 
 2611      636C6F63 
 2611      6B5F6469 
 2611      76696465 
 2612              	.LASF23:
 2613 00ef 4D434F31 		.ascii	"MCO1_PLL\000"
 2613      5F504C4C 
 2613      00
 2614              	.LASF41:
 2615 00f8 41484231 		.ascii	"AHB1ENR\000"
 2615      454E5200 
 2616              	.LASF60:
 2617 0100 53534347 		.ascii	"SSCGR\000"
 2617      5200
 2618              	.LASF9:
 2619 0106 6C6F6E67 		.ascii	"long long unsigned int\000"
 2619      206C6F6E 
 2619      6720756E 
 2619      7369676E 
 2619      65642069 
 2620              	.LASF68:
 2621 011d 4D4F4445 		.ascii	"MODER\000"
 2621      5200
 2622              	.LASF75:
 2623 0123 41465248 		.ascii	"AFRH\000"
 2623      00
 2624              	.LASF84:
 2625 0128 48505245 		.ascii	"HPRE\000"
 2625      00
 2626              	.LASF74:
 2627 012d 4146524C 		.ascii	"AFRL\000"
 2627      00
 2628              	.LASF35:
 2629 0132 41484233 		.ascii	"AHB3RSTR\000"
 2629      52535452 
 2629      00
 2630              	.LASF104:
 2631 013b 6765745F 		.ascii	"get_APB1CLK\000"
 2631      41504231 
 2631      434C4B00 
 2632              	.LASF17:
 2633 0147 53575F48 		.ascii	"SW_HSE\000"
 2633      534500
 2634              	.LASF82:
 2635 014e 50505245 		.ascii	"PPRE1_exp\000"
 2635      315F6578 
 2635      7000
 2636              	.LASF16:
 2637 0158 53575F48 		.ascii	"SW_HSI\000"
 2637      534900
 2638              	.LASF85:
 2639 015f 50505245 		.ascii	"PPRE1\000"
 2639      3100
 2640              	.LASF86:
 2641 0165 50505245 		.ascii	"PPRE2\000"
 2641      3200
 2642              	.LASF79:
 2643 016b 7365745F 		.ascii	"set_SYSCLK\000"
 2643      53595343 
 2643      4C4B00
 2644              	.LASF36:
 2645 0176 5F726573 		.ascii	"_reserved_0x1c\000"
 2645      65727665 
 2645      645F3078 
 2645      316300
 2646              	.LASF43:
 2647 0185 41484233 		.ascii	"AHB3ENR\000"
 2647      454E5200 
 2648              	.LASF39:
 2649 018d 5F726573 		.ascii	"_reserved_0x28\000"
 2649      65727665 
 2649      645F3078 
 2649      323800
 2650              	.LASF76:
 2651 019c 656E6162 		.ascii	"enable_GPIOA\000"
 2651      6C655F47 
 2651      50494F41 
 2651      00
 2652              	.LASF71:
 2653 01a9 50555044 		.ascii	"PUPDR\000"
 2653      5200
 2654              	.LASF77:
 2655 01af 656E6162 		.ascii	"enable_GPIOC\000"
 2655      6C655F47 
 2655      50494F43 
 2655      00
 2656              	.LASF26:
 2657 01bc 4D434F32 		.ascii	"MCO2_I2S\000"
 2657      5F493253 
 2657      00
 2658              	.LASF88:
 2659 01c5 53524331 		.ascii	"SRC1\000"
 2659      00
 2660              	.LASF90:
 2661 01ca 53524332 		.ascii	"SRC2\000"
 2661      00
 2662              	.LASF40:
 2663 01cf 5F726573 		.ascii	"_reserved_0x2c\000"
 2663      65727665 
 2663      645F3078 
 2663      326300
 2664              	.LASF78:
 2665 01de 73746172 		.ascii	"start_PLL\000"
 2665      745F504C 
 2665      4C00
 2666              	.LASF89:
 2667 01e8 44495631 		.ascii	"DIV1\000"
 2667      00
 2668              	.LASF91:
 2669 01ed 44495632 		.ascii	"DIV2\000"
 2669      00
 2670              	.LASF95:
 2671 01f2 4D434F32 		.ascii	"MCO2PRE\000"
 2671      50524500 
 2672              	.LASF107:
 2673 01fa 6765745F 		.ascii	"get_APB2TIMCLK\000"
 2673      41504232 
 2673      54494D43 
 2673      4C4B00
 2674              	.LASF44:
 2675 0209 5F726573 		.ascii	"_reserved_0x3c\000"
 2675      65727665 
 2675      645F3078 
 2675      336300
 2676              	.LASF8:
 2677 0218 6C6F6E67 		.ascii	"long long int\000"
 2677      206C6F6E 
 2677      6720696E 
 2677      7400
 2678              	.LASF22:
 2679 0226 4D434F31 		.ascii	"MCO1_HSE\000"
 2679      5F485345 
 2679      00
 2680              	.LASF20:
 2681 022f 4D434F31 		.ascii	"MCO1_HSI\000"
 2681      5F485349 
 2681      00
 2682              	.LASF101:
 2683 0238 6765745F 		.ascii	"get_SYSCLK\000"
 2683      53595343 
 2683      4C4B00
 2684              	.LASF53:
 2685 0243 41504231 		.ascii	"APB1LPENR\000"
 2685      4C50454E 
 2685      5200
 2686              	.LASF47:
 2687 024d 5F726573 		.ascii	"_reserved_0x48\000"
 2687      65727665 
 2687      645F3078 
 2687      343800
 2688              	.LASF97:
 2689 025c 656E6162 		.ascii	"enable_MCO_GPIO\000"
 2689      6C655F4D 
 2689      434F5F47 
 2689      50494F00 
 2690              	.LASF48:
 2691 026c 5F726573 		.ascii	"_reserved_0x4c\000"
 2691      65727665 
 2691      645F3078 
 2691      346300
 2692              	.LASF109:
 2693 027b 4750494F 		.ascii	"GPIOA\000"
 2693      4100
 2694              	.LASF108:
 2695 0281 4750494F 		.ascii	"GPIOC\000"
 2695      4300
 2696              	.LASF46:
 2697 0287 41504232 		.ascii	"APB2ENR\000"
 2697      454E5200 
 2698              	.LASF65:
 2699 028f 44434B43 		.ascii	"DCKCFGR2\000"
 2699      46475232 
 2699      00
 2700              	.LASF49:
 2701 0298 41484231 		.ascii	"AHB1LPENR\000"
 2701      4C50454E 
 2701      5200
 2702              	.LASF70:
 2703 02a2 4F535045 		.ascii	"OSPEEDR\000"
 2703      45445200 
 2704              	.LASF52:
 2705 02aa 5F726573 		.ascii	"_reserved_0x5c\000"
 2705      65727665 
 2705      645F3078 
 2705      356300
 2706              	.LASF34:
 2707 02b9 41484232 		.ascii	"AHB2RSTR\000"
 2707      52535452 
 2707      00
 2708              	.LASF55:
 2709 02c2 5F726573 		.ascii	"_reserved_0x68\000"
 2709      65727665 
 2709      645F3078 
 2709      363800
 2710              	.LASF29:
 2711 02d1 4D434F32 		.ascii	"MCO2SRC\000"
 2711      53524300 
 2712              	.LASF15:
 2713 02d9 504C4C53 		.ascii	"PLLSRC\000"
 2713      524300
 2714              	.LASF2:
 2715 02e0 73686F72 		.ascii	"short int\000"
 2715      7420696E 
 2715      7400
 2716              	.LASF98:
 2717 02ea 6765745F 		.ascii	"get_PLL_PCLK\000"
 2717      504C4C5F 
 2717      50434C4B 
 2717      00
 2718              	.LASF96:
 2719 02f7 73746F70 		.ascii	"stop_PLL\000"
 2719      5F504C4C 
 2719      00
 2720              	.LASF4:
 2721 0300 6C6F6E67 		.ascii	"long int\000"
 2721      20696E74 
 2721      00
 2722              	.LASF56:
 2723 0309 5F726573 		.ascii	"_reserved_0x6c\000"
 2723      65727665 
 2723      645F3078 
 2723      366300
 2724              	.LASF58:
 2725 0318 5F726573 		.ascii	"_reserved_0x78\000"
 2725      65727665 
 2725      645F3078 
 2725      373800
 2726              	.LASF69:
 2727 0327 4F545950 		.ascii	"OTYPER\000"
 2727      455200
 2728              	.LASF32:
 2729 032e 43464752 		.ascii	"CFGR\000"
 2729      00
 2730              	.LASF59:
 2731 0333 5F726573 		.ascii	"_reserved_0x7c\000"
 2731      65727665 
 2731      645F3078 
 2731      376300
 2732              	.LASF87:
 2733 0342 7365745F 		.ascii	"set_MCO\000"
 2733      4D434F00 
 2734              	.LASF31:
 2735 034a 504C4C43 		.ascii	"PLLCFGR\000"
 2735      46475200 
 2736              	.LASF102:
 2737 0352 6765745F 		.ascii	"get_AHBCLK\000"
 2737      41484243 
 2737      4C4B00
 2738              	.LASF51:
 2739 035d 41484233 		.ascii	"AHB3LPENR\000"
 2739      4C50454E 
 2739      5200
 2740              	.LASF30:
 2741 0367 73697A65 		.ascii	"sizetype\000"
 2741      74797065 
 2741      00
 2742              	.LASF7:
 2743 0370 6C6F6E67 		.ascii	"long unsigned int\000"
 2743      20756E73 
 2743      69676E65 
 2743      6420696E 
 2743      7400
 2744              	.LASF92:
 2745 0382 4D434F31 		.ascii	"MCO1\000"
 2745      00
 2746              	.LASF93:
 2747 0387 4D434F32 		.ascii	"MCO2\000"
 2747      00
 2748              	.LASF42:
 2749 038c 41484232 		.ascii	"AHB2ENR\000"
 2749      454E5200 
 2750              	.LASF11:
 2751 0394 696E7433 		.ascii	"int32_t\000"
 2751      325F7400 
 2752              	.LASF61:
 2753 039c 504C4C49 		.ascii	"PLLI2SCFGR\000"
 2753      32534346 
 2753      475200
 2754              	.LASF1:
 2755 03a7 756E7369 		.ascii	"unsigned char\000"
 2755      676E6564 
 2755      20636861 
 2755      7200
 2756              	.LASF100:
 2757 03b5 6765745F 		.ascii	"get_PLL_RCLK\000"
 2757      504C4C5F 
 2757      52434C4B 
 2757      00
 2758              	.LASF6:
 2759 03c2 5F5F7569 		.ascii	"__uint32_t\000"
 2759      6E743332 
 2759      5F7400
 2760              	.LASF112:
 2761 03cd 2F686F6D 		.ascii	"/home/tom/COURS/S6/Projet_boiteMusique/c_project\000"
 2761      652F746F 
 2761      6D2F434F 
 2761      5552532F 
 2761      53362F50 
 2762              	.LASF28:
 2763 03fe 4D434F32 		.ascii	"MCO2_PLL\000"
 2763      5F504C4C 
 2763      00
 2764              	.LASF105:
 2765 0407 6765745F 		.ascii	"get_APB2CLK\000"
 2765      41504232 
 2765      434C4B00 
 2766              	.LASF94:
 2767 0413 4D434F31 		.ascii	"MCO1PRE\000"
 2767      50524500 
 2768              	.LASF0:
 2769 041b 7369676E 		.ascii	"signed char\000"
 2769      65642063 
 2769      68617200 
 2770              	.LASF106:
 2771 0427 6765745F 		.ascii	"get_APB1TIMCLK\000"
 2771      41504231 
 2771      54494D43 
 2771      4C4B00
 2772              	.LASF3:
 2773 0436 73686F72 		.ascii	"short unsigned int\000"
 2773      7420756E 
 2773      7369676E 
 2773      65642069 
 2773      6E7400
 2774              	.LASF25:
 2775 0449 4D434F32 		.ascii	"MCO2_SYS\000"
 2775      5F535953 
 2775      00
 2776              	.LASF67:
 2777 0452 4750494F 		.ascii	"GPIO_registers\000"
 2777      5F726567 
 2777      69737465 
 2777      727300
 2778              	.LASF83:
 2779 0461 50505245 		.ascii	"PPRE2_exp\000"
 2779      325F6578 
 2779      7000
 2780              	.LASF50:
 2781 046b 41484232 		.ascii	"AHB2LPENR\000"
 2781      4C50454E 
 2781      5200
 2782              	.LASF81:
 2783 0475 48505245 		.ascii	"HPRE__exp\000"
 2783      5F5F6578 
 2783      7000
 2784              	.LASF110:
 2785 047f 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mtune=cortex-m4 "
 2785      4320342E 
 2785      392E3320 
 2785      32303135 
 2785      30353239 
 2786 04b2 2D6D7468 		.ascii	"-mthumb -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4"
 2786      756D6220 
 2786      2D6D6172 
 2786      63683D61 
 2786      726D7637 
 2787 04e5 2D73702D 		.ascii	"-sp-d16 -g -O0 -Os -fsingle-precision-constant\000"
 2787      64313620 
 2787      2D67202D 
 2787      4F30202D 
 2787      4F73202D 
 2788              	.LASF33:
 2789 0514 41484231 		.ascii	"AHB1RSTR\000"
 2789      52535452 
 2789      00
 2790              	.LASF73:
 2791 051d 4C434B52 		.ascii	"LCKR\000"
 2791      00
 2792              	.LASF64:
 2793 0522 434B4741 		.ascii	"CKGATENR\000"
 2793      54454E52 
 2793      00
 2794              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 clock.c
     /tmp/cc4tu6v6.s:20     .text:0000000000000000 $t
     /tmp/cc4tu6v6.s:25     .text:0000000000000000 start_PLL
     /tmp/cc4tu6v6.s:75     .text:0000000000000038 $d
     /tmp/cc4tu6v6.s:79     .text:000000000000003c $t
     /tmp/cc4tu6v6.s:84     .text:000000000000003c stop_PLL
     /tmp/cc4tu6v6.s:108    .text:000000000000004c $d
     /tmp/cc4tu6v6.s:114    .text:0000000000000050 $t
     /tmp/cc4tu6v6.s:119    .text:0000000000000050 set_SYSCLK
     /tmp/cc4tu6v6.s:145    .text:000000000000006c $d
     /tmp/cc4tu6v6.s:149    .text:0000000000000070 $t
     /tmp/cc4tu6v6.s:154    .text:0000000000000070 set_bus_clock_dividers_exp
     /tmp/cc4tu6v6.s:212    .text:00000000000000b4 $d
     /tmp/cc4tu6v6.s:216    .text:00000000000000b8 $t
     /tmp/cc4tu6v6.s:221    .text:00000000000000b8 set_MCO
     /tmp/cc4tu6v6.s:279    .text:0000000000000100 $d
     /tmp/cc4tu6v6.s:283    .text:0000000000000104 $t
     /tmp/cc4tu6v6.s:288    .text:0000000000000104 enable_MCO_GPIO
     /tmp/cc4tu6v6.s:359    .text:000000000000014c $d
     /tmp/cc4tu6v6.s:365    .text:0000000000000158 $t
     /tmp/cc4tu6v6.s:370    .text:0000000000000158 get_PLL_PCLK
     /tmp/cc4tu6v6.s:409    .text:0000000000000184 $d
     /tmp/cc4tu6v6.s:414    .text:000000000000018c $t
     /tmp/cc4tu6v6.s:419    .text:000000000000018c get_PLL_RCLK
     /tmp/cc4tu6v6.s:453    .text:00000000000001b4 $d
     /tmp/cc4tu6v6.s:458    .text:00000000000001bc $t
     /tmp/cc4tu6v6.s:463    .text:00000000000001bc get_SYSCLK
     /tmp/cc4tu6v6.s:500    .text:00000000000001e0 $d
     /tmp/cc4tu6v6.s:505    .text:00000000000001e8 $t
     /tmp/cc4tu6v6.s:510    .text:00000000000001e8 get_AHBCLK
     /tmp/cc4tu6v6.s:553    .text:0000000000000208 $d
     /tmp/cc4tu6v6.s:557    .text:000000000000020c $t
     /tmp/cc4tu6v6.s:562    .text:000000000000020c get_APB1CLK
     /tmp/cc4tu6v6.s:605    .text:000000000000022c $d
     /tmp/cc4tu6v6.s:609    .text:0000000000000230 $t
     /tmp/cc4tu6v6.s:614    .text:0000000000000230 get_APB2CLK
     /tmp/cc4tu6v6.s:657    .text:0000000000000250 $d
     /tmp/cc4tu6v6.s:661    .text:0000000000000254 $t
     /tmp/cc4tu6v6.s:666    .text:0000000000000254 get_APB1TIMCLK
     /tmp/cc4tu6v6.s:704    .text:0000000000000270 $d
     /tmp/cc4tu6v6.s:708    .text:0000000000000274 $t
     /tmp/cc4tu6v6.s:713    .text:0000000000000274 get_APB2TIMCLK
     /tmp/cc4tu6v6.s:751    .text:0000000000000290 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC
GPIOA
GPIOC
