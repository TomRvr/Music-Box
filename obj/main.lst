   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.global	SysTick_Handler
  22              		.thumb
  23              		.thumb_func
  24              		.type	SysTick_Handler, %function
  25              	SysTick_Handler:
  26              	.LFB392:
  27              		.file 1 "src/main.c"
   1:src/main.c    **** #include <stdint.h>
   2:src/main.c    **** #include "sys/cm4.h"
   3:src/main.c    **** #include "sys/devices.h"
   4:src/main.c    **** #include "sys/init.h"
   5:src/main.c    **** #include "sys/clock.h"
   6:src/main.c    **** #include "sys/serial_io.h"
   7:src/main.c    **** #include "button.h"
   8:src/main.c    **** #include "systick.h"
   9:src/main.c    **** #include "led.h"
  10:src/main.c    **** #include "fonctions.h"
  11:src/main.c    **** 
  12:src/main.c    **** #define T_pause 10	/*Temps de pause entre les notes en ms*/ 
  13:src/main.c    **** #define T_veille 3	/*Nombre de mélodies avant la mise en veille*/
  14:src/main.c    **** #define Temps 500	/*Base de temps des notes, en ms*/
  15:src/main.c    **** 
  16:src/main.c    **** /*Pointeurs mélodies*/
  17:src/main.c    **** extern uint16_t *ptN_melodie;	/*pointeur sur les notes de la melodie*/
  18:src/main.c    **** extern uint16_t *ptD_melodie;	/*pointeur sur les durees de la melodie*/
  19:src/main.c    **** 
  20:src/main.c    **** extern int8_t modeS;
  21:src/main.c    **** int32_t volatile veille = 0;
  22:src/main.c    **** int16_t volatile CPT = 0;
  23:src/main.c    **** uint8_t volatile flag=0;
  24:src/main.c    **** uint8_t volatile pause=0;
  25:src/main.c    **** uint8_t volatile i=0;	/*Compteur global pour parcourir les tableaux des mélodies*/
  26:src/main.c    **** uint8_t couleur = 0;	/*Couleur de la LED RGB (0,1,2)*/
  27:src/main.c    **** 
  28:src/main.c    **** /* Handler d'interruption systick - duree des notes */
  29:src/main.c    **** void __attribute__((interrupt)) SysTick_Handler() {
  28              		.loc 1 29 0
  29              		.cfi_startproc
  30              		@ Stack Align: May be called with mis-aligned SP.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 6846     		mov	r0, sp
  34              		.cfi_register 13, 0
  35 0002 20F00701 		bic	r1, r0, #7
  36 0006 8D46     		mov	sp, r1
  37 0008 31B5     		push	{r0, r4, r5, lr}
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 13, -16
  40              		.cfi_offset 4, -12
  41              		.cfi_offset 5, -8
  42              		.cfi_offset 14, -4
  30:src/main.c    **** 	if(pause !=1)
  43              		.loc 1 30 0
  44 000a 114C     		ldr	r4, .L6
  45 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  46 000e 012B     		cmp	r3, #1
  31:src/main.c    **** 	{
  32:src/main.c    **** 		CPT++;
  47              		.loc 1 32 0
  48 0010 6388     		ldrh	r3, [r4, #2]
  49 0012 03F10103 		add	r3, r3, #1
  50 0016 9BB2     		uxth	r3, r3
  51 0018 6380     		strh	r3, [r4, #2]	@ movhi
  30:src/main.c    **** 	if(pause !=1)
  52              		.loc 1 30 0
  53 001a 14D1     		bne	.L1
  33:src/main.c    **** 	}	
  34:src/main.c    **** 	else
  35:src/main.c    **** 	{
  36:src/main.c    **** 		CPT++;
  37:src/main.c    **** 		if(CPT>=T_pause){	/*pause finie*/
  54              		.loc 1 37 0
  55 001c 6388     		ldrh	r3, [r4, #2]
  56 001e 1BB2     		sxth	r3, r3
  57 0020 092B     		cmp	r3, #9
  58 0022 10DD     		ble	.L1
  38:src/main.c    **** 			CPT = 0;
  59              		.loc 1 38 0
  60 0024 0025     		movs	r5, #0
  39:src/main.c    **** 			pause =0;
  40:src/main.c    **** 			TIM2.CR1^=1;	/*redemarrage timer*/
  61              		.loc 1 40 0
  62 0026 0B4A     		ldr	r2, .L6+4
  38:src/main.c    **** 			CPT = 0;
  63              		.loc 1 38 0
  64 0028 6580     		strh	r5, [r4, #2]	@ movhi
  39:src/main.c    **** 			pause =0;
  65              		.loc 1 39 0
  66 002a 2570     		strb	r5, [r4]
  67              		.loc 1 40 0
  68 002c 1368     		ldr	r3, [r2]
  41:src/main.c    **** 			led_tri_set(couleur);
  69              		.loc 1 41 0
  70 002e 2079     		ldrb	r0, [r4, #4]	@ zero_extendqisi2
  40:src/main.c    **** 			led_tri_set(couleur);
  71              		.loc 1 40 0
  72 0030 83F00103 		eor	r3, r3, #1
  73 0034 1360     		str	r3, [r2]
  74              		.loc 1 41 0
  75 0036 FFF7FEFF 		bl	led_tri_set
  76              	.LVL0:
  42:src/main.c    **** 			if(couleur>=2)
  77              		.loc 1 42 0
  78 003a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
  79 003c 012B     		cmp	r3, #1
  43:src/main.c    **** 			{
  44:src/main.c    **** 				couleur=0;
  45:src/main.c    **** 			}
  46:src/main.c    **** 			else
  47:src/main.c    **** 			{
  48:src/main.c    **** 				couleur++;
  80              		.loc 1 48 0
  81 003e 96BF     		itet	ls
  82 0040 0133     		addls	r3, r3, #1
  44:src/main.c    **** 			}
  83              		.loc 1 44 0
  84 0042 2571     		strbhi	r5, [r4, #4]
  85              		.loc 1 48 0
  86 0044 2371     		strbls	r3, [r4, #4]
  87              	.L1:
  49:src/main.c    **** 			}
  50:src/main.c    **** 		}
  51:src/main.c    **** 	}
  52:src/main.c    **** }
  88              		.loc 1 52 0
  89 0046 BDE83140 		pop	{r0, r4, r5, lr}
  90              		.cfi_restore 14
  91              		.cfi_restore 5
  92              		.cfi_restore 4
  93              		.cfi_restore 0
  94              		.cfi_def_cfa_offset 0
  95 004a 8546     		mov	sp, r0
  96 004c 7047     		bx	lr
  97              	.L7:
  98 004e 00BF     		.align	2
  99              	.L6:
 100 0050 00000000 		.word	.LANCHOR0
 101 0054 00000000 		.word	TIM2
 102              		.cfi_endproc
 103              	.LFE392:
 104              		.size	SysTick_Handler, .-SysTick_Handler
 105              		.align	1
 106              		.global	EXTI9_5_Handler
 107              		.thumb
 108              		.thumb_func
 109              		.type	EXTI9_5_Handler, %function
 110              	EXTI9_5_Handler:
 111              	.LFB393:
  53:src/main.c    **** 
  54:src/main.c    **** /* Handler d'interruption du bouton sur PB8 - ON/OFF */
  55:src/main.c    **** void __attribute__((interrupt)) EXTI9_5_Handler() 
  56:src/main.c    **** {	
 112              		.loc 1 56 0
 113              		.cfi_startproc
 114              		@ Stack Align: May be called with mis-aligned SP.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
  57:src/main.c    **** 	EXTI.PR |= (1<<8);
 117              		.loc 1 57 0
 118 0058 0E4A     		ldr	r2, .L9
  56:src/main.c    **** 	EXTI.PR |= (1<<8);
 119              		.loc 1 56 0
 120 005a 6846     		mov	r0, sp
 121              		.cfi_register 13, 0
 122              		.loc 1 57 0
 123 005c 5369     		ldr	r3, [r2, #20]
  56:src/main.c    **** 	EXTI.PR |= (1<<8);
 124              		.loc 1 56 0
 125 005e 20F00701 		bic	r1, r0, #7
 126 0062 8D46     		mov	sp, r1
 127              		.loc 1 57 0
 128 0064 43F48073 		orr	r3, r3, #256
  56:src/main.c    **** 	EXTI.PR |= (1<<8);
 129              		.loc 1 56 0
 130 0068 01B5     		push	{r0, lr}
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 13, -8
 133              		.cfi_offset 14, -4
 134              		.loc 1 57 0
 135 006a 5361     		str	r3, [r2, #20]
  58:src/main.c    **** 	TIM2.CR1^=1;	/*inversion du bit d'activation de l'horloge du timer (ON/OFF)*/
 136              		.loc 1 58 0
 137 006c 0A4A     		ldr	r2, .L9+4
 138 006e 1368     		ldr	r3, [r2]
 139 0070 83F00103 		eor	r3, r3, #1
 140 0074 1360     		str	r3, [r2]
  59:src/main.c    **** 	SysTick.CTRL^=1;/*inversion du bit d'activation de l'horloge du systick (ON/OFF)*/
 141              		.loc 1 59 0
 142 0076 094A     		ldr	r2, .L9+8
 143 0078 1368     		ldr	r3, [r2]
  60:src/main.c    **** 	led_tri_set(0);	/*LED Rouge*/
 144              		.loc 1 60 0
 145 007a 0020     		movs	r0, #0
  59:src/main.c    **** 	SysTick.CTRL^=1;/*inversion du bit d'activation de l'horloge du systick (ON/OFF)*/
 146              		.loc 1 59 0
 147 007c 83F00103 		eor	r3, r3, #1
 148 0080 1360     		str	r3, [r2]
 149              		.loc 1 60 0
 150 0082 FFF7FEFF 		bl	led_tri_set
 151              	.LVL1:
  61:src/main.c    **** 	veille = 0;
  62:src/main.c    **** }
 152              		.loc 1 62 0
 153 0086 BDE80140 		pop	{r0, lr}
 154              		.cfi_restore 14
 155              		.cfi_restore 0
 156              		.cfi_def_cfa_offset 0
  61:src/main.c    **** 	veille = 0;
 157              		.loc 1 61 0
 158 008a 054B     		ldr	r3, .L9+12
 159 008c 0022     		movs	r2, #0
 160 008e 9A60     		str	r2, [r3, #8]
 161              		.loc 1 62 0
 162 0090 8546     		mov	sp, r0
 163 0092 7047     		bx	lr
 164              	.L10:
 165              		.align	2
 166              	.L9:
 167 0094 00000000 		.word	EXTI
 168 0098 00000000 		.word	TIM2
 169 009c 00000000 		.word	SysTick
 170 00a0 00000000 		.word	.LANCHOR0
 171              		.cfi_endproc
 172              	.LFE393:
 173              		.size	EXTI9_5_Handler, .-EXTI9_5_Handler
 174              		.section	.text.startup,"ax",%progbits
 175              		.align	1
 176              		.global	main
 177              		.thumb
 178              		.thumb_func
 179              		.type	main, %function
 180              	main:
 181              	.LFB394:
  63:src/main.c    **** 
  64:src/main.c    **** int main() {
 182              		.loc 1 64 0
 183              		.cfi_startproc
 184              		@ Volatile: function does not return.
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              	.LBB26:
 188              	.LBB27:
 189              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 190              		.loc 2 668 0
 191 0000 3E4C     		ldr	r4, .L22
 192              	.LBE27:
 193              	.LBE26:
 194              		.loc 1 64 0
 195 0002 08B5     		push	{r3, lr}
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 199              	.LBB31:
 200              	.LBB30:
 201              		.loc 2 668 0
 202 0004 236B     		ldr	r3, [r4, #48]
 203 0006 43F00103 		orr	r3, r3, #1
 204 000a 2363     		str	r3, [r4, #48]
 205              	.LBB28:
 206              	.LBB29:
 207              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 208              		.loc 3 428 0
 209              	@ 428 "src/sys/cmsis_gcc.h" 1
 210 000c BFF34F8F 		dsb 0xF
 211              	@ 0 "" 2
 212              		.thumb
 213              	.LBE29:
 214              	.LBE28:
 215              	.LBE30:
 216              	.LBE31:
 217              	.LBB32:
 218              	.LBB33:
 667:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 219              		.loc 2 667 0
 220 0010 236B     		ldr	r3, [r4, #48]
 221 0012 43F00203 		orr	r3, r3, #2
 222 0016 2363     		str	r3, [r4, #48]
 223              	.LBB34:
 224              	.LBB35:
 225              		.loc 3 428 0
 226              	@ 428 "src/sys/cmsis_gcc.h" 1
 227 0018 BFF34F8F 		dsb 0xF
 228              	@ 0 "" 2
 229              		.thumb
 230              	.LBE35:
 231              	.LBE34:
 232              	.LBE33:
 233              	.LBE32:
 234              	.LBB36:
 235              	.LBB37:
 666:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 236              		.loc 2 666 0
 237 001c 236B     		ldr	r3, [r4, #48]
 238 001e 43F00403 		orr	r3, r3, #4
 239 0022 2363     		str	r3, [r4, #48]
 240              	.LBB38:
 241              	.LBB39:
 242              		.loc 3 428 0
 243              	@ 428 "src/sys/cmsis_gcc.h" 1
 244 0024 BFF34F8F 		dsb 0xF
 245              	@ 0 "" 2
 246              		.thumb
 247              	.LBE39:
 248              	.LBE38:
 249              	.LBE37:
 250              	.LBE36:
  65:src/main.c    **** 	
  66:src/main.c    **** 	/*Initialisation des ports utiles */
  67:src/main.c    **** 	enable_GPIOA();
  68:src/main.c    **** 	enable_GPIOB(); 
  69:src/main.c    **** 	enable_GPIOC();
  70:src/main.c    **** 	
  71:src/main.c    **** 	/*Activation du potentiometre pour regler le volume*/
  72:src/main.c    **** 	configuration_potentiometre();
 251              		.loc 1 72 0
 252 0028 FFF7FEFF 		bl	configuration_potentiometre
 253              	.LVL2:
 254              	.LBB40:
 255              	.LBB41:
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 256              		.loc 2 676 0
 257 002c 636C     		ldr	r3, [r4, #68]
 258 002e 43F48043 		orr	r3, r3, #16384
 259 0032 6364     		str	r3, [r4, #68]
 260              	.LBB42:
 261              	.LBB43:
 262              		.loc 3 428 0
 263              	@ 428 "src/sys/cmsis_gcc.h" 1
 264 0034 BFF34F8F 		dsb 0xF
 265              	@ 0 "" 2
 266              		.thumb
 267              	.LBE43:
 268              	.LBE42:
 269              	.LBE41:
 270              	.LBE40:
  73:src/main.c    **** 	enable_SYSCFG();
  74:src/main.c    **** 	
  75:src/main.c    **** 	/*Bouton ON/OFF - bouton carte fille*/
  76:src/main.c    **** 	button_init();
 271              		.loc 1 76 0
 272 0038 FFF7FEFF 		bl	button_init
 273              	.LVL3:
  77:src/main.c    **** 	button_irq_init();	/* Enable interrupts (user button PB8)*/
 274              		.loc 1 77 0
 275 003c FFF7FEFF 		bl	button_irq_init
 276              	.LVL4:
  78:src/main.c    **** 	
  79:src/main.c    **** 	/*Lecture des switchs au demarrage pour selectionner la melodie*/
  80:src/main.c    **** 	select_melodie();	
 277              		.loc 1 80 0
 278 0040 FFF7FEFF 		bl	select_melodie
 279              	.LVL5:
  81:src/main.c    **** 	
  82:src/main.c    **** 	/*Initialisation des registres du timer 2*/
  83:src/main.c    **** 	init_timer();
 280              		.loc 1 83 0
 281 0044 FFF7FEFF 		bl	init_timer
 282              	.LVL6:
  84:src/main.c    **** 	
  85:src/main.c    **** 	/*Initialisation du carré de LEDs et LED RGB*/
  86:src/main.c    **** 	led_init();
 283              		.loc 1 86 0
 284 0048 FFF7FEFF 		bl	led_init
 285              	.LVL7:
  87:src/main.c    **** 	
  88:src/main.c    **** 	/* Initialisation des switchs */
  89:src/main.c    **** 	init_switchs();
 286              		.loc 1 89 0
 287 004c FFF7FEFF 		bl	init_switchs
 288              	.LVL8:
  90:src/main.c    **** 	
  91:src/main.c    **** 	/* Enable Systick 1000 Hz, IT toutes les 1ms */
  92:src/main.c    **** 	SysTick_init(1000);
 289              		.loc 1 92 0
 290 0050 4FF47A70 		mov	r0, #1000
 291 0054 FFF7FEFF 		bl	SysTick_init
 292              	.LVL9:
 293              	.L21:
  93:src/main.c    **** 
  94:src/main.c    **** 	while (1)
  95:src/main.c    **** 	{
  96:src/main.c    **** 		if(pause !=1)
 294              		.loc 1 96 0
 295 0058 294C     		ldr	r4, .L22+4
 296 005a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 297 005c 012B     		cmp	r3, #1
 298 005e 32D0     		beq	.L13
  97:src/main.c    **** 		{
  98:src/main.c    **** 			TIM2.ARR=ARR_Freq(*(ptN_melodie+i));/*Ajustement de la fréquence de la note a jouer*/
 299              		.loc 1 98 0
 300 0060 284B     		ldr	r3, .L22+8
 301 0062 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2
 302 0064 1B68     		ldr	r3, [r3]
 303 0066 284D     		ldr	r5, .L22+12
 304 0068 33F81200 		ldrh	r0, [r3, r2, lsl #1]
 305 006c FFF7FEFF 		bl	ARR_Freq
 306              	.LVL10:
 307 0070 E862     		str	r0, [r5, #44]
  99:src/main.c    **** 			if(veille>=T_veille){
 308              		.loc 1 99 0
 309 0072 A368     		ldr	r3, [r4, #8]
 310 0074 022B     		cmp	r3, #2
 311 0076 11DD     		ble	.L15
 100:src/main.c    **** 				veille = 0;
 101:src/main.c    **** 				if(modeS == 1){
 312              		.loc 1 101 0
 313 0078 244B     		ldr	r3, .L22+16
 314 007a 93F90030 		ldrsb	r3, [r3]
 100:src/main.c    **** 				veille = 0;
 315              		.loc 1 100 0
 316 007e 0020     		movs	r0, #0
 317              		.loc 1 101 0
 318 0080 012B     		cmp	r3, #1
 100:src/main.c    **** 				veille = 0;
 319              		.loc 1 100 0
 320 0082 A060     		str	r0, [r4, #8]
 321              		.loc 1 101 0
 322 0084 0AD1     		bne	.L15
 102:src/main.c    **** 					TIM2.CR1 ^=1;		/*Arret timer*/
 323              		.loc 1 102 0
 324 0086 2B68     		ldr	r3, [r5]
 103:src/main.c    **** 					SysTick.CTRL^=1;	/*Arrêt systick*/
 325              		.loc 1 103 0
 326 0088 214A     		ldr	r2, .L22+20
 102:src/main.c    **** 					TIM2.CR1 ^=1;		/*Arret timer*/
 327              		.loc 1 102 0
 328 008a 83F00103 		eor	r3, r3, #1
 329 008e 2B60     		str	r3, [r5]
 330              		.loc 1 103 0
 331 0090 1368     		ldr	r3, [r2]
 332 0092 83F00103 		eor	r3, r3, #1
 333 0096 1360     		str	r3, [r2]
 104:src/main.c    **** 					led_tri_set(0);		/*LED Rouge*/
 334              		.loc 1 104 0
 335 0098 FFF7FEFF 		bl	led_tri_set
 336              	.LVL11:
 337              	.L15:
 105:src/main.c    **** 				}
 106:src/main.c    **** 			}
 107:src/main.c    **** 			if(CPT>=(Temps *(*(ptD_melodie + i))))	/*prise en compte de la duree de la note*/
 338              		.loc 1 107 0
 339 009c 1D4A     		ldr	r2, .L22+24
 340 009e 6188     		ldrh	r1, [r4, #2]
 341 00a0 1268     		ldr	r2, [r2]
 342 00a2 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 343 00a4 164B     		ldr	r3, .L22+4
 344 00a6 32F81000 		ldrh	r0, [r2, r0, lsl #1]
 345 00aa 4FF4FA72 		mov	r2, #500
 346 00ae 09B2     		sxth	r1, r1
 347 00b0 4243     		muls	r2, r0, r2
 348 00b2 9142     		cmp	r1, r2
 349 00b4 07DB     		blt	.L13
 108:src/main.c    **** 			{	
 109:src/main.c    **** 				flag=1;
 350              		.loc 1 109 0
 351 00b6 0121     		movs	r1, #1
 110:src/main.c    **** 				CPT = 0;
 352              		.loc 1 110 0
 353 00b8 0022     		movs	r2, #0
 109:src/main.c    **** 				CPT = 0;
 354              		.loc 1 109 0
 355 00ba 5973     		strb	r1, [r3, #13]
 356              		.loc 1 110 0
 357 00bc 5A80     		strh	r2, [r3, #2]	@ movhi
 111:src/main.c    **** 				TIM2.CR1^=1;	/*arret timer*/
 358              		.loc 1 111 0
 359 00be 2A68     		ldr	r2, [r5]
 360 00c0 4A40     		eors	r2, r2, r1
 361 00c2 2A60     		str	r2, [r5]
 112:src/main.c    **** 				pause =1;		/*Note finie, pause avant note suivante*/
 362              		.loc 1 112 0
 363 00c4 1970     		strb	r1, [r3]
 364              	.L13:
 113:src/main.c    **** 			}
 114:src/main.c    **** 		}
 115:src/main.c    **** 		if(flag==1)
 365              		.loc 1 115 0
 366 00c6 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 367 00c8 0D4B     		ldr	r3, .L22+4
 368 00ca 012A     		cmp	r2, #1
 369 00cc 10D1     		bne	.L18
 116:src/main.c    **** 		{
 117:src/main.c    **** 			if(*(ptN_melodie + i) == 0)	/*Si fin de la melodie*/
 370              		.loc 1 117 0
 371 00ce 0D4A     		ldr	r2, .L22+8
 372 00d0 197B     		ldrb	r1, [r3, #12]	@ zero_extendqisi2
 373 00d2 1268     		ldr	r2, [r2]
 374 00d4 32F81120 		ldrh	r2, [r2, r1, lsl #1]
 375 00d8 22B9     		cbnz	r2, .L19
 118:src/main.c    **** 			{	
 119:src/main.c    **** 				i=0;	/*Retour au debut*/
 376              		.loc 1 119 0
 377 00da 1A73     		strb	r2, [r3, #12]
 120:src/main.c    **** 				veille++;
 378              		.loc 1 120 0
 379 00dc 9A68     		ldr	r2, [r3, #8]
 380 00de 0132     		adds	r2, r2, #1
 381 00e0 9A60     		str	r2, [r3, #8]
 382 00e2 03E0     		b	.L20
 383              	.L19:
 121:src/main.c    **** 			}
 122:src/main.c    **** 			else
 123:src/main.c    **** 			{
 124:src/main.c    **** 				i++;	/*Note suivante*/
 384              		.loc 1 124 0
 385 00e4 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 386 00e6 0132     		adds	r2, r2, #1
 387 00e8 D2B2     		uxtb	r2, r2
 388 00ea 1A73     		strb	r2, [r3, #12]
 389              	.L20:
 125:src/main.c    **** 			}
 126:src/main.c    **** 			flag = 0;
 390              		.loc 1 126 0
 391 00ec 0023     		movs	r3, #0
 392 00ee 6373     		strb	r3, [r4, #13]
 393              	.L18:
 127:src/main.c    **** 		}
 128:src/main.c    **** 		select_melodie();	/*Scrutation des switchs pour selectionner la melodie*/
 394              		.loc 1 128 0
 395 00f0 FFF7FEFF 		bl	select_melodie
 396              	.LVL12:
 129:src/main.c    **** 		volume();	/*Reglage du volume et affichage sur les LEDs*/
 397              		.loc 1 129 0
 398 00f4 FFF7FEFF 		bl	volume
 399              	.LVL13:
 130:src/main.c    **** 	}
 400              		.loc 1 130 0
 401 00f8 AEE7     		b	.L21
 402              	.L23:
 403 00fa 00BF     		.align	2
 404              	.L22:
 405 00fc 00000000 		.word	RCC
 406 0100 00000000 		.word	.LANCHOR0
 407 0104 00000000 		.word	ptN_melodie
 408 0108 00000000 		.word	TIM2
 409 010c 00000000 		.word	modeS
 410 0110 00000000 		.word	SysTick
 411 0114 00000000 		.word	ptD_melodie
 412              		.cfi_endproc
 413              	.LFE394:
 414              		.size	main, .-main
 415              		.global	couleur
 416              		.global	i
 417              		.global	pause
 418              		.global	flag
 419              		.global	CPT
 420              		.global	veille
 421              		.bss
 422              		.align	2
 423              		.set	.LANCHOR0,. + 0
 424              		.type	pause, %object
 425              		.size	pause, 1
 426              	pause:
 427 0000 00       		.space	1
 428 0001 00       		.space	1
 429              		.type	CPT, %object
 430              		.size	CPT, 2
 431              	CPT:
 432 0002 0000     		.space	2
 433              		.type	couleur, %object
 434              		.size	couleur, 1
 435              	couleur:
 436 0004 00       		.space	1
 437 0005 000000   		.space	3
 438              		.type	veille, %object
 439              		.size	veille, 4
 440              	veille:
 441 0008 00000000 		.space	4
 442              		.type	i, %object
 443              		.size	i, 1
 444              	i:
 445 000c 00       		.space	1
 446              		.type	flag, %object
 447              		.size	flag, 1
 448              	flag:
 449 000d 00       		.space	1
 450              		.text
 451              	.Letext0:
 452              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 453              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 454              		.file 6 "src/fonctions.h"
 455              		.file 7 "src/button.h"
 456              		.file 8 "src/led.h"
 457              		.file 9 "src/systick.h"
 458              		.section	.debug_info,"",%progbits
 459              	.Ldebug_info0:
 460 0000 8B070000 		.4byte	0x78b
 461 0004 0400     		.2byte	0x4
 462 0006 00000000 		.4byte	.Ldebug_abbrev0
 463 000a 04       		.byte	0x4
 464 000b 01       		.uleb128 0x1
 465 000c 6B040000 		.4byte	.LASF103
 466 0010 01       		.byte	0x1
 467 0011 2C040000 		.4byte	.LASF104
 468 0015 CF030000 		.4byte	.LASF105
 469 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 470 001d 00000000 		.4byte	0
 471 0021 00000000 		.4byte	.Ldebug_line0
 472 0025 02       		.uleb128 0x2
 473 0026 93020000 		.4byte	.LASF0
 474 002a 04       		.byte	0x4
 475 002b 1B       		.byte	0x1b
 476 002c 30000000 		.4byte	0x30
 477 0030 03       		.uleb128 0x3
 478 0031 01       		.byte	0x1
 479 0032 06       		.byte	0x6
 480 0033 20040000 		.4byte	.LASF2
 481 0037 02       		.uleb128 0x2
 482 0038 3C030000 		.4byte	.LASF1
 483 003c 04       		.byte	0x4
 484 003d 1D       		.byte	0x1d
 485 003e 42000000 		.4byte	0x42
 486 0042 03       		.uleb128 0x3
 487 0043 01       		.byte	0x1
 488 0044 08       		.byte	0x8
 489 0045 A2030000 		.4byte	.LASF3
 490 0049 02       		.uleb128 0x2
 491 004a 22020000 		.4byte	.LASF4
 492 004e 04       		.byte	0x4
 493 004f 29       		.byte	0x29
 494 0050 54000000 		.4byte	0x54
 495 0054 03       		.uleb128 0x3
 496 0055 02       		.byte	0x2
 497 0056 05       		.byte	0x5
 498 0057 E7020000 		.4byte	.LASF5
 499 005b 02       		.uleb128 0x2
 500 005c FD000000 		.4byte	.LASF6
 501 0060 04       		.byte	0x4
 502 0061 2B       		.byte	0x2b
 503 0062 66000000 		.4byte	0x66
 504 0066 03       		.uleb128 0x3
 505 0067 02       		.byte	0x2
 506 0068 07       		.byte	0x7
 507 0069 37040000 		.4byte	.LASF7
 508 006d 02       		.uleb128 0x2
 509 006e 4A000000 		.4byte	.LASF8
 510 0072 04       		.byte	0x4
 511 0073 3F       		.byte	0x3f
 512 0074 78000000 		.4byte	0x78
 513 0078 03       		.uleb128 0x3
 514 0079 04       		.byte	0x4
 515 007a 05       		.byte	0x5
 516 007b F1020000 		.4byte	.LASF9
 517 007f 02       		.uleb128 0x2
 518 0080 BF030000 		.4byte	.LASF10
 519 0084 04       		.byte	0x4
 520 0085 41       		.byte	0x41
 521 0086 8A000000 		.4byte	0x8a
 522 008a 03       		.uleb128 0x3
 523 008b 04       		.byte	0x4
 524 008c 07       		.byte	0x7
 525 008d 70030000 		.4byte	.LASF11
 526 0091 03       		.uleb128 0x3
 527 0092 08       		.byte	0x8
 528 0093 05       		.byte	0x5
 529 0094 FB010000 		.4byte	.LASF12
 530 0098 03       		.uleb128 0x3
 531 0099 08       		.byte	0x8
 532 009a 07       		.byte	0x7
 533 009b DE000000 		.4byte	.LASF13
 534 009f 04       		.uleb128 0x4
 535 00a0 04       		.byte	0x4
 536 00a1 05       		.byte	0x5
 537 00a2 696E7400 		.ascii	"int\000"
 538 00a6 03       		.uleb128 0x3
 539 00a7 04       		.byte	0x4
 540 00a8 07       		.byte	0x7
 541 00a9 2E000000 		.4byte	.LASF14
 542 00ad 02       		.uleb128 0x2
 543 00ae 7E000000 		.4byte	.LASF15
 544 00b2 05       		.byte	0x5
 545 00b3 13       		.byte	0x13
 546 00b4 25000000 		.4byte	0x25
 547 00b8 02       		.uleb128 0x2
 548 00b9 DF010000 		.4byte	.LASF16
 549 00bd 05       		.byte	0x5
 550 00be 14       		.byte	0x14
 551 00bf 37000000 		.4byte	0x37
 552 00c3 02       		.uleb128 0x2
 553 00c4 D6000000 		.4byte	.LASF17
 554 00c8 05       		.byte	0x5
 555 00c9 19       		.byte	0x19
 556 00ca 49000000 		.4byte	0x49
 557 00ce 02       		.uleb128 0x2
 558 00cf B5020000 		.4byte	.LASF18
 559 00d3 05       		.byte	0x5
 560 00d4 1A       		.byte	0x1a
 561 00d5 5B000000 		.4byte	0x5b
 562 00d9 02       		.uleb128 0x2
 563 00da 8F030000 		.4byte	.LASF19
 564 00de 05       		.byte	0x5
 565 00df 1F       		.byte	0x1f
 566 00e0 6D000000 		.4byte	0x6d
 567 00e4 02       		.uleb128 0x2
 568 00e5 75000000 		.4byte	.LASF20
 569 00e9 05       		.byte	0x5
 570 00ea 20       		.byte	0x20
 571 00eb 7F000000 		.4byte	0x7f
 572 00ef 03       		.uleb128 0x3
 573 00f0 04       		.byte	0x4
 574 00f1 07       		.byte	0x7
 575 00f2 67030000 		.4byte	.LASF21
 576 00f6 05       		.uleb128 0x5
 577 00f7 3A010000 		.4byte	.LASF25
 578 00fb 10       		.byte	0x10
 579 00fc 02       		.byte	0x2
 580 00fd 40       		.byte	0x40
 581 00fe 33010000 		.4byte	0x133
 582 0102 06       		.uleb128 0x6
 583 0103 09050000 		.4byte	.LASF22
 584 0107 02       		.byte	0x2
 585 0108 41       		.byte	0x41
 586 0109 E4000000 		.4byte	0xe4
 587 010d 00       		.byte	0
 588 010e 06       		.uleb128 0x6
 589 010f 3B000000 		.4byte	.LASF23
 590 0113 02       		.byte	0x2
 591 0114 42       		.byte	0x42
 592 0115 E4000000 		.4byte	0xe4
 593 0119 04       		.byte	0x4
 594 011a 07       		.uleb128 0x7
 595 011b 56414C00 		.ascii	"VAL\000"
 596 011f 02       		.byte	0x2
 597 0120 43       		.byte	0x43
 598 0121 E4000000 		.4byte	0xe4
 599 0125 08       		.byte	0x8
 600 0126 06       		.uleb128 0x6
 601 0127 54000000 		.4byte	.LASF24
 602 012b 02       		.byte	0x2
 603 012c 44       		.byte	0x44
 604 012d E4000000 		.4byte	0xe4
 605 0131 0C       		.byte	0xc
 606 0132 00       		.byte	0
 607 0133 05       		.uleb128 0x5
 608 0134 9F000000 		.4byte	.LASF26
 609 0138 98       		.byte	0x98
 610 0139 02       		.byte	0x2
 611 013a 68       		.byte	0x68
 612 013b 07030000 		.4byte	0x307
 613 013f 07       		.uleb128 0x7
 614 0140 435200   		.ascii	"CR\000"
 615 0143 02       		.byte	0x2
 616 0144 69       		.byte	0x69
 617 0145 E4000000 		.4byte	0xe4
 618 0149 00       		.byte	0
 619 014a 06       		.uleb128 0x6
 620 014b 55030000 		.4byte	.LASF27
 621 014f 02       		.byte	0x2
 622 0150 6A       		.byte	0x6a
 623 0151 E4000000 		.4byte	0xe4
 624 0155 04       		.byte	0x4
 625 0156 06       		.uleb128 0x6
 626 0157 2B030000 		.4byte	.LASF28
 627 015b 02       		.byte	0x2
 628 015c 6B       		.byte	0x6b
 629 015d E4000000 		.4byte	0xe4
 630 0161 08       		.byte	0x8
 631 0162 07       		.uleb128 0x7
 632 0163 43495200 		.ascii	"CIR\000"
 633 0167 02       		.byte	0x2
 634 0168 6C       		.byte	0x6c
 635 0169 E4000000 		.4byte	0xe4
 636 016d 0C       		.byte	0xc
 637 016e 06       		.uleb128 0x6
 638 016f 00050000 		.4byte	.LASF29
 639 0173 02       		.byte	0x2
 640 0174 6D       		.byte	0x6d
 641 0175 E4000000 		.4byte	0xe4
 642 0179 10       		.byte	0x10
 643 017a 06       		.uleb128 0x6
 644 017b C7020000 		.4byte	.LASF30
 645 017f 02       		.byte	0x2
 646 0180 6E       		.byte	0x6e
 647 0181 E4000000 		.4byte	0xe4
 648 0185 14       		.byte	0x14
 649 0186 06       		.uleb128 0x6
 650 0187 24010000 		.4byte	.LASF31
 651 018b 02       		.byte	0x2
 652 018c 6F       		.byte	0x6f
 653 018d E4000000 		.4byte	0xe4
 654 0191 18       		.byte	0x18
 655 0192 06       		.uleb128 0x6
 656 0193 4F010000 		.4byte	.LASF32
 657 0197 02       		.byte	0x2
 658 0198 70       		.byte	0x70
 659 0199 E4000000 		.4byte	0xe4
 660 019d 1C       		.byte	0x1c
 661 019e 06       		.uleb128 0x6
 662 019f A7010000 		.4byte	.LASF33
 663 01a3 02       		.byte	0x2
 664 01a4 71       		.byte	0x71
 665 01a5 E4000000 		.4byte	0xe4
 666 01a9 20       		.byte	0x20
 667 01aa 06       		.uleb128 0x6
 668 01ab 25000000 		.4byte	.LASF34
 669 01af 02       		.byte	0x2
 670 01b0 72       		.byte	0x72
 671 01b1 E4000000 		.4byte	0xe4
 672 01b5 24       		.byte	0x24
 673 01b6 06       		.uleb128 0x6
 674 01b7 71010000 		.4byte	.LASF35
 675 01bb 02       		.byte	0x2
 676 01bc 73       		.byte	0x73
 677 01bd E4000000 		.4byte	0xe4
 678 01c1 28       		.byte	0x28
 679 01c2 06       		.uleb128 0x6
 680 01c3 CA010000 		.4byte	.LASF36
 681 01c7 02       		.byte	0x2
 682 01c8 74       		.byte	0x74
 683 01c9 E4000000 		.4byte	0xe4
 684 01cd 2C       		.byte	0x2c
 685 01ce 06       		.uleb128 0x6
 686 01cf AD000000 		.4byte	.LASF37
 687 01d3 02       		.byte	0x2
 688 01d4 75       		.byte	0x75
 689 01d5 E4000000 		.4byte	0xe4
 690 01d9 30       		.byte	0x30
 691 01da 06       		.uleb128 0x6
 692 01db 87030000 		.4byte	.LASF38
 693 01df 02       		.byte	0x2
 694 01e0 76       		.byte	0x76
 695 01e1 E4000000 		.4byte	0xe4
 696 01e5 34       		.byte	0x34
 697 01e6 06       		.uleb128 0x6
 698 01e7 69010000 		.4byte	.LASF39
 699 01eb 02       		.byte	0x2
 700 01ec 77       		.byte	0x77
 701 01ed E4000000 		.4byte	0xe4
 702 01f1 38       		.byte	0x38
 703 01f2 06       		.uleb128 0x6
 704 01f3 EC010000 		.4byte	.LASF40
 705 01f7 02       		.byte	0x2
 706 01f8 78       		.byte	0x78
 707 01f9 E4000000 		.4byte	0xe4
 708 01fd 3C       		.byte	0x3c
 709 01fe 06       		.uleb128 0x6
 710 01ff 13000000 		.4byte	.LASF41
 711 0203 02       		.byte	0x2
 712 0204 79       		.byte	0x79
 713 0205 E4000000 		.4byte	0xe4
 714 0209 40       		.byte	0x40
 715 020a 06       		.uleb128 0x6
 716 020b 72020000 		.4byte	.LASF42
 717 020f 02       		.byte	0x2
 718 0210 7A       		.byte	0x7a
 719 0211 E4000000 		.4byte	0xe4
 720 0215 44       		.byte	0x44
 721 0216 06       		.uleb128 0x6
 722 0217 13020000 		.4byte	.LASF43
 723 021b 02       		.byte	0x2
 724 021c 7B       		.byte	0x7b
 725 021d E4000000 		.4byte	0xe4
 726 0221 48       		.byte	0x48
 727 0222 06       		.uleb128 0x6
 728 0223 47020000 		.4byte	.LASF44
 729 0227 02       		.byte	0x2
 730 0228 7C       		.byte	0x7c
 731 0229 E4000000 		.4byte	0xe4
 732 022d 4C       		.byte	0x4c
 733 022e 06       		.uleb128 0x6
 734 022f 9C020000 		.4byte	.LASF45
 735 0233 02       		.byte	0x2
 736 0234 7D       		.byte	0x7d
 737 0235 E4000000 		.4byte	0xe4
 738 0239 50       		.byte	0x50
 739 023a 06       		.uleb128 0x6
 740 023b 6B000000 		.4byte	.LASF46
 741 023f 02       		.byte	0x2
 742 0240 7E       		.byte	0x7e
 743 0241 E4000000 		.4byte	0xe4
 744 0245 54       		.byte	0x54
 745 0246 06       		.uleb128 0x6
 746 0247 5D030000 		.4byte	.LASF47
 747 024b 02       		.byte	0x2
 748 024c 7F       		.byte	0x7f
 749 024d E4000000 		.4byte	0xe4
 750 0251 58       		.byte	0x58
 751 0252 06       		.uleb128 0x6
 752 0253 A6020000 		.4byte	.LASF48
 753 0257 02       		.byte	0x2
 754 0258 80       		.byte	0x80
 755 0259 E4000000 		.4byte	0xe4
 756 025d 5C       		.byte	0x5c
 757 025e 06       		.uleb128 0x6
 758 025f 09020000 		.4byte	.LASF49
 759 0263 02       		.byte	0x2
 760 0264 81       		.byte	0x81
 761 0265 E4000000 		.4byte	0xe4
 762 0269 60       		.byte	0x60
 763 026a 06       		.uleb128 0x6
 764 026b 1B000000 		.4byte	.LASF50
 765 026f 02       		.byte	0x2
 766 0270 82       		.byte	0x82
 767 0271 E4000000 		.4byte	0xe4
 768 0275 64       		.byte	0x64
 769 0276 06       		.uleb128 0x6
 770 0277 D0020000 		.4byte	.LASF51
 771 027b 02       		.byte	0x2
 772 027c 83       		.byte	0x83
 773 027d E4000000 		.4byte	0xe4
 774 0281 68       		.byte	0x68
 775 0282 06       		.uleb128 0x6
 776 0283 FA020000 		.4byte	.LASF52
 777 0287 02       		.byte	0x2
 778 0288 84       		.byte	0x84
 779 0289 E4000000 		.4byte	0xe4
 780 028d 6C       		.byte	0x6c
 781 028e 06       		.uleb128 0x6
 782 028f 45000000 		.4byte	.LASF53
 783 0293 02       		.byte	0x2
 784 0294 85       		.byte	0x85
 785 0295 E4000000 		.4byte	0xe4
 786 0299 70       		.byte	0x70
 787 029a 07       		.uleb128 0x7
 788 029b 43535200 		.ascii	"CSR\000"
 789 029f 02       		.byte	0x2
 790 02a0 86       		.byte	0x86
 791 02a1 E4000000 		.4byte	0xe4
 792 02a5 74       		.byte	0x74
 793 02a6 06       		.uleb128 0x6
 794 02a7 12030000 		.4byte	.LASF54
 795 02ab 02       		.byte	0x2
 796 02ac 87       		.byte	0x87
 797 02ad E4000000 		.4byte	0xe4
 798 02b1 78       		.byte	0x78
 799 02b2 06       		.uleb128 0x6
 800 02b3 46030000 		.4byte	.LASF55
 801 02b7 02       		.byte	0x2
 802 02b8 88       		.byte	0x88
 803 02b9 E4000000 		.4byte	0xe4
 804 02bd 7C       		.byte	0x7c
 805 02be 06       		.uleb128 0x6
 806 02bf BA000000 		.4byte	.LASF56
 807 02c3 02       		.byte	0x2
 808 02c4 89       		.byte	0x89
 809 02c5 E4000000 		.4byte	0xe4
 810 02c9 80       		.byte	0x80
 811 02ca 06       		.uleb128 0x6
 812 02cb 97030000 		.4byte	.LASF57
 813 02cf 02       		.byte	0x2
 814 02d0 8A       		.byte	0x8a
 815 02d1 E4000000 		.4byte	0xe4
 816 02d5 84       		.byte	0x84
 817 02d6 06       		.uleb128 0x6
 818 02d7 00000000 		.4byte	.LASF58
 819 02db 02       		.byte	0x2
 820 02dc 8B       		.byte	0x8b
 821 02dd E4000000 		.4byte	0xe4
 822 02e1 88       		.byte	0x88
 823 02e2 06       		.uleb128 0x6
 824 02e3 0B000000 		.4byte	.LASF59
 825 02e7 02       		.byte	0x2
 826 02e8 8C       		.byte	0x8c
 827 02e9 E4000000 		.4byte	0xe4
 828 02ed 8C       		.byte	0x8c
 829 02ee 06       		.uleb128 0x6
 830 02ef 62040000 		.4byte	.LASF60
 831 02f3 02       		.byte	0x2
 832 02f4 8D       		.byte	0x8d
 833 02f5 E4000000 		.4byte	0xe4
 834 02f9 90       		.byte	0x90
 835 02fa 06       		.uleb128 0x6
 836 02fb 8A020000 		.4byte	.LASF61
 837 02ff 02       		.byte	0x2
 838 0300 8E       		.byte	0x8e
 839 0301 E4000000 		.4byte	0xe4
 840 0305 94       		.byte	0x94
 841 0306 00       		.byte	0
 842 0307 05       		.uleb128 0x5
 843 0308 B0030000 		.4byte	.LASF62
 844 030c 18       		.byte	0x18
 845 030d 02       		.byte	0x2
 846 030e C1       		.byte	0xc1
 847 030f 5B030000 		.4byte	0x35b
 848 0313 07       		.uleb128 0x7
 849 0314 494D5200 		.ascii	"IMR\000"
 850 0318 02       		.byte	0x2
 851 0319 C2       		.byte	0xc2
 852 031a E4000000 		.4byte	0xe4
 853 031e 00       		.byte	0
 854 031f 07       		.uleb128 0x7
 855 0320 454D5200 		.ascii	"EMR\000"
 856 0324 02       		.byte	0x2
 857 0325 C3       		.byte	0xc3
 858 0326 E4000000 		.4byte	0xe4
 859 032a 04       		.byte	0x4
 860 032b 06       		.uleb128 0x6
 861 032c 26030000 		.4byte	.LASF63
 862 0330 02       		.byte	0x2
 863 0331 C4       		.byte	0xc4
 864 0332 E4000000 		.4byte	0xe4
 865 0336 08       		.byte	0x8
 866 0337 06       		.uleb128 0x6
 867 0338 82030000 		.4byte	.LASF64
 868 033c 02       		.byte	0x2
 869 033d C5       		.byte	0xc5
 870 033e E4000000 		.4byte	0xe4
 871 0342 0C       		.byte	0xc
 872 0343 06       		.uleb128 0x6
 873 0344 D9010000 		.4byte	.LASF65
 874 0348 02       		.byte	0x2
 875 0349 C6       		.byte	0xc6
 876 034a E4000000 		.4byte	0xe4
 877 034e 10       		.byte	0x10
 878 034f 07       		.uleb128 0x7
 879 0350 505200   		.ascii	"PR\000"
 880 0353 02       		.byte	0x2
 881 0354 C7       		.byte	0xc7
 882 0355 E4000000 		.4byte	0xe4
 883 0359 14       		.byte	0x14
 884 035a 00       		.byte	0
 885 035b 08       		.uleb128 0x8
 886 035c 2C020000 		.4byte	.LASF66
 887 0360 54       		.byte	0x54
 888 0361 02       		.byte	0x2
 889 0362 3C01     		.2byte	0x13c
 890 0364 78040000 		.4byte	0x478
 891 0368 09       		.uleb128 0x9
 892 0369 43523100 		.ascii	"CR1\000"
 893 036d 02       		.byte	0x2
 894 036e 3D01     		.2byte	0x13d
 895 0370 E4000000 		.4byte	0xe4
 896 0374 00       		.byte	0
 897 0375 09       		.uleb128 0x9
 898 0376 43523200 		.ascii	"CR2\000"
 899 037a 02       		.byte	0x2
 900 037b 3E01     		.2byte	0x13e
 901 037d E4000000 		.4byte	0xe4
 902 0381 04       		.byte	0x4
 903 0382 0A       		.uleb128 0xa
 904 0383 E7010000 		.4byte	.LASF67
 905 0387 02       		.byte	0x2
 906 0388 3F01     		.2byte	0x13f
 907 038a E4000000 		.4byte	0xe4
 908 038e 08       		.byte	0x8
 909 038f 0A       		.uleb128 0xa
 910 0390 5E010000 		.4byte	.LASF68
 911 0394 02       		.byte	0x2
 912 0395 4001     		.2byte	0x140
 913 0397 E4000000 		.4byte	0xe4
 914 039b 0C       		.byte	0xc
 915 039c 09       		.uleb128 0x9
 916 039d 535200   		.ascii	"SR\000"
 917 03a0 02       		.byte	0x2
 918 03a1 4101     		.2byte	0x141
 919 03a3 E4000000 		.4byte	0xe4
 920 03a7 10       		.byte	0x10
 921 03a8 09       		.uleb128 0x9
 922 03a9 45475200 		.ascii	"EGR\000"
 923 03ad 02       		.byte	0x2
 924 03ae 4201     		.2byte	0x142
 925 03b0 E4000000 		.4byte	0xe4
 926 03b4 14       		.byte	0x14
 927 03b5 0A       		.uleb128 0xa
 928 03b6 CA000000 		.4byte	.LASF69
 929 03ba 02       		.byte	0x2
 930 03bb 4301     		.2byte	0x143
 931 03bd E4000000 		.4byte	0xe4
 932 03c1 18       		.byte	0x18
 933 03c2 0A       		.uleb128 0xa
 934 03c3 D0000000 		.4byte	.LASF70
 935 03c7 02       		.byte	0x2
 936 03c8 4401     		.2byte	0x144
 937 03ca E4000000 		.4byte	0xe4
 938 03ce 1C       		.byte	0x1c
 939 03cf 0A       		.uleb128 0xa
 940 03d0 B0010000 		.4byte	.LASF71
 941 03d4 02       		.byte	0x2
 942 03d5 4501     		.2byte	0x145
 943 03d7 E4000000 		.4byte	0xe4
 944 03db 20       		.byte	0x20
 945 03dc 09       		.uleb128 0x9
 946 03dd 434E5400 		.ascii	"CNT\000"
 947 03e1 02       		.byte	0x2
 948 03e2 4601     		.2byte	0x146
 949 03e4 E4000000 		.4byte	0xe4
 950 03e8 24       		.byte	0x24
 951 03e9 09       		.uleb128 0x9
 952 03ea 50534300 		.ascii	"PSC\000"
 953 03ee 02       		.byte	0x2
 954 03ef 4701     		.2byte	0x147
 955 03f1 E4000000 		.4byte	0xe4
 956 03f5 28       		.byte	0x28
 957 03f6 09       		.uleb128 0x9
 958 03f7 41525200 		.ascii	"ARR\000"
 959 03fb 02       		.byte	0x2
 960 03fc 4801     		.2byte	0x148
 961 03fe E4000000 		.4byte	0xe4
 962 0402 2C       		.byte	0x2c
 963 0403 09       		.uleb128 0x9
 964 0404 52435200 		.ascii	"RCR\000"
 965 0408 02       		.byte	0x2
 966 0409 4901     		.2byte	0x149
 967 040b E4000000 		.4byte	0xe4
 968 040f 30       		.byte	0x30
 969 0410 0A       		.uleb128 0xa
 970 0411 B5000000 		.4byte	.LASF72
 971 0415 02       		.byte	0x2
 972 0416 4A01     		.2byte	0x14a
 973 0418 E4000000 		.4byte	0xe4
 974 041c 34       		.byte	0x34
 975 041d 0A       		.uleb128 0xa
 976 041e CA030000 		.4byte	.LASF73
 977 0422 02       		.byte	0x2
 978 0423 4B01     		.2byte	0x14b
 979 0425 E4000000 		.4byte	0xe4
 980 0429 38       		.byte	0x38
 981 042a 0A       		.uleb128 0xa
 982 042b C0000000 		.4byte	.LASF74
 983 042f 02       		.byte	0x2
 984 0430 4C01     		.2byte	0x14c
 985 0432 E4000000 		.4byte	0xe4
 986 0436 3C       		.byte	0x3c
 987 0437 0A       		.uleb128 0xa
 988 0438 C5000000 		.4byte	.LASF75
 989 043c 02       		.byte	0x2
 990 043d 4D01     		.2byte	0x14d
 991 043f E4000000 		.4byte	0xe4
 992 0443 40       		.byte	0x40
 993 0444 0A       		.uleb128 0xa
 994 0445 93000000 		.4byte	.LASF76
 995 0449 02       		.byte	0x2
 996 044a 4E01     		.2byte	0x14e
 997 044c E4000000 		.4byte	0xe4
 998 0450 44       		.byte	0x44
 999 0451 09       		.uleb128 0x9
 1000 0452 44435200 		.ascii	"DCR\000"
 1001 0456 02       		.byte	0x2
 1002 0457 4F01     		.2byte	0x14f
 1003 0459 E4000000 		.4byte	0xe4
 1004 045d 48       		.byte	0x48
 1005 045e 0A       		.uleb128 0xa
 1006 045f C5010000 		.4byte	.LASF77
 1007 0463 02       		.byte	0x2
 1008 0464 5001     		.2byte	0x150
 1009 0466 E4000000 		.4byte	0xe4
 1010 046a 4C       		.byte	0x4c
 1011 046b 09       		.uleb128 0x9
 1012 046c 4F5200   		.ascii	"OR\000"
 1013 046f 02       		.byte	0x2
 1014 0470 5101     		.2byte	0x151
 1015 0472 E4000000 		.4byte	0xe4
 1016 0476 50       		.byte	0x50
 1017 0477 00       		.byte	0
 1018 0478 0B       		.uleb128 0xb
 1019 0479 65000000 		.4byte	.LASF106
 1020 047d 03       		.byte	0x3
 1021 047e AA01     		.2byte	0x1aa
 1022 0480 03       		.byte	0x3
 1023 0481 0C       		.uleb128 0xc
 1024 0482 80010000 		.4byte	.LASF78
 1025 0486 02       		.byte	0x2
 1026 0487 9C02     		.2byte	0x29c
 1027 0489 03       		.byte	0x3
 1028 048a 0C       		.uleb128 0xc
 1029 048b 8D010000 		.4byte	.LASF79
 1030 048f 02       		.byte	0x2
 1031 0490 9B02     		.2byte	0x29b
 1032 0492 03       		.byte	0x3
 1033 0493 0C       		.uleb128 0xc
 1034 0494 9A010000 		.4byte	.LASF80
 1035 0498 02       		.byte	0x2
 1036 0499 9A02     		.2byte	0x29a
 1037 049b 03       		.byte	0x3
 1038 049c 0C       		.uleb128 0xc
 1039 049d 85000000 		.4byte	.LASF81
 1040 04a1 02       		.byte	0x2
 1041 04a2 A402     		.2byte	0x2a4
 1042 04a4 03       		.byte	0x3
 1043 04a5 0D       		.uleb128 0xd
 1044 04a6 7A020000 		.4byte	.LASF82
 1045 04aa 01       		.byte	0x1
 1046 04ab 1D       		.byte	0x1d
 1047 04ac 00000000 		.4byte	.LFB392
 1048 04b0 58000000 		.4byte	.LFE392-.LFB392
 1049 04b4 01       		.uleb128 0x1
 1050 04b5 9C       		.byte	0x9c
 1051 04b6 C4040000 		.4byte	0x4c4
 1052 04ba 0E       		.uleb128 0xe
 1053 04bb 3A000000 		.4byte	.LVL0
 1054 04bf F3060000 		.4byte	0x6f3
 1055 04c3 00       		.byte	0
 1056 04c4 0D       		.uleb128 0xd
 1057 04c5 62020000 		.4byte	.LASF83
 1058 04c9 01       		.byte	0x1
 1059 04ca 37       		.byte	0x37
 1060 04cb 58000000 		.4byte	.LFB393
 1061 04cf 4C000000 		.4byte	.LFE393-.LFB393
 1062 04d3 01       		.uleb128 0x1
 1063 04d4 9C       		.byte	0x9c
 1064 04d5 E9040000 		.4byte	0x4e9
 1065 04d9 0F       		.uleb128 0xf
 1066 04da 86000000 		.4byte	.LVL1
 1067 04de F3060000 		.4byte	0x6f3
 1068 04e2 10       		.uleb128 0x10
 1069 04e3 01       		.uleb128 0x1
 1070 04e4 50       		.byte	0x50
 1071 04e5 01       		.uleb128 0x1
 1072 04e6 30       		.byte	0x30
 1073 04e7 00       		.byte	0
 1074 04e8 00       		.byte	0
 1075 04e9 11       		.uleb128 0x11
 1076 04ea 4A040000 		.4byte	.LASF107
 1077 04ee 01       		.byte	0x1
 1078 04ef 40       		.byte	0x40
 1079 04f0 9F000000 		.4byte	0x9f
 1080 04f4 00000000 		.4byte	.LFB394
 1081 04f8 18010000 		.4byte	.LFE394-.LFB394
 1082 04fc 01       		.uleb128 0x1
 1083 04fd 9C       		.byte	0x9c
 1084 04fe 15060000 		.4byte	0x615
 1085 0502 12       		.uleb128 0x12
 1086 0503 81040000 		.4byte	0x481
 1087 0507 00000000 		.4byte	.LBB26
 1088 050b 00000000 		.4byte	.Ldebug_ranges0+0
 1089 050f 01       		.byte	0x1
 1090 0510 43       		.byte	0x43
 1091 0511 26050000 		.4byte	0x526
 1092 0515 13       		.uleb128 0x13
 1093 0516 78040000 		.4byte	0x478
 1094 051a 0C000000 		.4byte	.LBB28
 1095 051e 04000000 		.4byte	.LBE28-.LBB28
 1096 0522 02       		.byte	0x2
 1097 0523 9C02     		.2byte	0x29c
 1098 0525 00       		.byte	0
 1099 0526 14       		.uleb128 0x14
 1100 0527 8A040000 		.4byte	0x48a
 1101 052b 10000000 		.4byte	.LBB32
 1102 052f 0C000000 		.4byte	.LBE32-.LBB32
 1103 0533 01       		.byte	0x1
 1104 0534 44       		.byte	0x44
 1105 0535 4A050000 		.4byte	0x54a
 1106 0539 13       		.uleb128 0x13
 1107 053a 78040000 		.4byte	0x478
 1108 053e 18000000 		.4byte	.LBB34
 1109 0542 04000000 		.4byte	.LBE34-.LBB34
 1110 0546 02       		.byte	0x2
 1111 0547 9B02     		.2byte	0x29b
 1112 0549 00       		.byte	0
 1113 054a 14       		.uleb128 0x14
 1114 054b 93040000 		.4byte	0x493
 1115 054f 1C000000 		.4byte	.LBB36
 1116 0553 0C000000 		.4byte	.LBE36-.LBB36
 1117 0557 01       		.byte	0x1
 1118 0558 45       		.byte	0x45
 1119 0559 6E050000 		.4byte	0x56e
 1120 055d 13       		.uleb128 0x13
 1121 055e 78040000 		.4byte	0x478
 1122 0562 24000000 		.4byte	.LBB38
 1123 0566 04000000 		.4byte	.LBE38-.LBB38
 1124 056a 02       		.byte	0x2
 1125 056b 9A02     		.2byte	0x29a
 1126 056d 00       		.byte	0
 1127 056e 14       		.uleb128 0x14
 1128 056f 9C040000 		.4byte	0x49c
 1129 0573 2C000000 		.4byte	.LBB40
 1130 0577 0C000000 		.4byte	.LBE40-.LBB40
 1131 057b 01       		.byte	0x1
 1132 057c 49       		.byte	0x49
 1133 057d 92050000 		.4byte	0x592
 1134 0581 13       		.uleb128 0x13
 1135 0582 78040000 		.4byte	0x478
 1136 0586 34000000 		.4byte	.LBB42
 1137 058a 04000000 		.4byte	.LBE42-.LBB42
 1138 058e 02       		.byte	0x2
 1139 058f A402     		.2byte	0x2a4
 1140 0591 00       		.byte	0
 1141 0592 0E       		.uleb128 0xe
 1142 0593 2C000000 		.4byte	.LVL2
 1143 0597 04070000 		.4byte	0x704
 1144 059b 0E       		.uleb128 0xe
 1145 059c 3C000000 		.4byte	.LVL3
 1146 05a0 11070000 		.4byte	0x711
 1147 05a4 0E       		.uleb128 0xe
 1148 05a5 40000000 		.4byte	.LVL4
 1149 05a9 1E070000 		.4byte	0x71e
 1150 05ad 0E       		.uleb128 0xe
 1151 05ae 44000000 		.4byte	.LVL5
 1152 05b2 2B070000 		.4byte	0x72b
 1153 05b6 0E       		.uleb128 0xe
 1154 05b7 48000000 		.4byte	.LVL6
 1155 05bb 38070000 		.4byte	0x738
 1156 05bf 0E       		.uleb128 0xe
 1157 05c0 4C000000 		.4byte	.LVL7
 1158 05c4 45070000 		.4byte	0x745
 1159 05c8 0E       		.uleb128 0xe
 1160 05c9 50000000 		.4byte	.LVL8
 1161 05cd 52070000 		.4byte	0x752
 1162 05d1 15       		.uleb128 0x15
 1163 05d2 58000000 		.4byte	.LVL9
 1164 05d6 5F070000 		.4byte	0x75f
 1165 05da E6050000 		.4byte	0x5e6
 1166 05de 10       		.uleb128 0x10
 1167 05df 01       		.uleb128 0x1
 1168 05e0 50       		.byte	0x50
 1169 05e1 03       		.uleb128 0x3
 1170 05e2 0A       		.byte	0xa
 1171 05e3 E803     		.2byte	0x3e8
 1172 05e5 00       		.byte	0
 1173 05e6 0E       		.uleb128 0xe
 1174 05e7 70000000 		.4byte	.LVL10
 1175 05eb 70070000 		.4byte	0x770
 1176 05ef 15       		.uleb128 0x15
 1177 05f0 9C000000 		.4byte	.LVL11
 1178 05f4 F3060000 		.4byte	0x6f3
 1179 05f8 02060000 		.4byte	0x602
 1180 05fc 10       		.uleb128 0x10
 1181 05fd 01       		.uleb128 0x1
 1182 05fe 50       		.byte	0x50
 1183 05ff 01       		.uleb128 0x1
 1184 0600 30       		.byte	0x30
 1185 0601 00       		.byte	0
 1186 0602 0E       		.uleb128 0xe
 1187 0603 F4000000 		.4byte	.LVL12
 1188 0607 2B070000 		.4byte	0x72b
 1189 060b 0E       		.uleb128 0xe
 1190 060c F8000000 		.4byte	.LVL13
 1191 0610 85070000 		.4byte	0x785
 1192 0614 00       		.byte	0
 1193 0615 16       		.uleb128 0x16
 1194 0616 DF020000 		.4byte	.LASF84
 1195 061a 02       		.byte	0x2
 1196 061b 2F02     		.2byte	0x22f
 1197 061d 21060000 		.4byte	0x621
 1198 0621 17       		.uleb128 0x17
 1199 0622 F6000000 		.4byte	0xf6
 1200 0626 18       		.uleb128 0x18
 1201 0627 52434300 		.ascii	"RCC\000"
 1202 062b 02       		.byte	0x2
 1203 062c 3D02     		.2byte	0x23d
 1204 062e 32060000 		.4byte	0x632
 1205 0632 17       		.uleb128 0x17
 1206 0633 33010000 		.4byte	0x133
 1207 0637 16       		.uleb128 0x16
 1208 0638 00040000 		.4byte	.LASF85
 1209 063c 02       		.byte	0x2
 1210 063d 4E02     		.2byte	0x24e
 1211 063f 43060000 		.4byte	0x643
 1212 0643 17       		.uleb128 0x17
 1213 0644 07030000 		.4byte	0x307
 1214 0648 16       		.uleb128 0x16
 1215 0649 40000000 		.4byte	.LASF86
 1216 064d 02       		.byte	0x2
 1217 064e 7702     		.2byte	0x277
 1218 0650 54060000 		.4byte	0x654
 1219 0654 17       		.uleb128 0x17
 1220 0655 5B030000 		.4byte	0x35b
 1221 0659 19       		.uleb128 0x19
 1222 065a 30030000 		.4byte	.LASF87
 1223 065e 01       		.byte	0x1
 1224 065f 11       		.byte	0x11
 1225 0660 64060000 		.4byte	0x664
 1226 0664 1A       		.uleb128 0x1a
 1227 0665 04       		.byte	0x4
 1228 0666 CE000000 		.4byte	0xce
 1229 066a 19       		.uleb128 0x19
 1230 066b 05040000 		.4byte	.LASF88
 1231 066f 01       		.byte	0x1
 1232 0670 12       		.byte	0x12
 1233 0671 64060000 		.4byte	0x664
 1234 0675 19       		.uleb128 0x19
 1235 0676 63010000 		.4byte	.LASF89
 1236 067a 01       		.byte	0x1
 1237 067b 14       		.byte	0x14
 1238 067c AD000000 		.4byte	0xad
 1239 0680 1B       		.uleb128 0x1b
 1240 0681 48010000 		.4byte	.LASF90
 1241 0685 01       		.byte	0x1
 1242 0686 15       		.byte	0x15
 1243 0687 91060000 		.4byte	0x691
 1244 068b 05       		.uleb128 0x5
 1245 068c 03       		.byte	0x3
 1246 068d 00000000 		.4byte	veille
 1247 0691 17       		.uleb128 0x17
 1248 0692 D9000000 		.4byte	0xd9
 1249 0696 1C       		.uleb128 0x1c
 1250 0697 43505400 		.ascii	"CPT\000"
 1251 069b 01       		.byte	0x1
 1252 069c 16       		.byte	0x16
 1253 069d A7060000 		.4byte	0x6a7
 1254 06a1 05       		.uleb128 0x5
 1255 06a2 03       		.byte	0x3
 1256 06a3 00000000 		.4byte	CPT
 1257 06a7 17       		.uleb128 0x17
 1258 06a8 C3000000 		.4byte	0xc3
 1259 06ac 1B       		.uleb128 0x1b
 1260 06ad 21030000 		.4byte	.LASF91
 1261 06b1 01       		.byte	0x1
 1262 06b2 17       		.byte	0x17
 1263 06b3 BD060000 		.4byte	0x6bd
 1264 06b7 05       		.uleb128 0x5
 1265 06b8 03       		.byte	0x3
 1266 06b9 00000000 		.4byte	flag
 1267 06bd 17       		.uleb128 0x17
 1268 06be B8000000 		.4byte	0xb8
 1269 06c2 1B       		.uleb128 0x1b
 1270 06c3 5C040000 		.4byte	.LASF92
 1271 06c7 01       		.byte	0x1
 1272 06c8 18       		.byte	0x18
 1273 06c9 BD060000 		.4byte	0x6bd
 1274 06cd 05       		.uleb128 0x5
 1275 06ce 03       		.byte	0x3
 1276 06cf 00000000 		.4byte	pause
 1277 06d3 1C       		.uleb128 0x1c
 1278 06d4 6900     		.ascii	"i\000"
 1279 06d6 01       		.byte	0x1
 1280 06d7 19       		.byte	0x19
 1281 06d8 BD060000 		.4byte	0x6bd
 1282 06dc 05       		.uleb128 0x5
 1283 06dd 03       		.byte	0x3
 1284 06de 00000000 		.4byte	i
 1285 06e2 1B       		.uleb128 0x1b
 1286 06e3 F5000000 		.4byte	.LASF93
 1287 06e7 01       		.byte	0x1
 1288 06e8 1A       		.byte	0x1a
 1289 06e9 B8000000 		.4byte	0xb8
 1290 06ed 05       		.uleb128 0x5
 1291 06ee 03       		.byte	0x3
 1292 06ef 00000000 		.4byte	couleur
 1293 06f3 1D       		.uleb128 0x1d
 1294 06f4 56020000 		.4byte	.LASF101
 1295 06f8 08       		.byte	0x8
 1296 06f9 04       		.byte	0x4
 1297 06fa 04070000 		.4byte	0x704
 1298 06fe 1E       		.uleb128 0x1e
 1299 06ff E4000000 		.4byte	0xe4
 1300 0703 00       		.byte	0
 1301 0704 1F       		.uleb128 0x1f
 1302 0705 08010000 		.4byte	.LASF94
 1303 0709 06       		.byte	0x6
 1304 070a 03       		.byte	0x3
 1305 070b 11070000 		.4byte	0x711
 1306 070f 20       		.uleb128 0x20
 1307 0710 00       		.byte	0
 1308 0711 1F       		.uleb128 0x1f
 1309 0712 3B020000 		.4byte	.LASF95
 1310 0716 07       		.byte	0x7
 1311 0717 05       		.byte	0x5
 1312 0718 1E070000 		.4byte	0x71e
 1313 071c 20       		.uleb128 0x20
 1314 071d 00       		.byte	0
 1315 071e 1F       		.uleb128 0x1f
 1316 071f B5010000 		.4byte	.LASF96
 1317 0723 07       		.byte	0x7
 1318 0724 06       		.byte	0x6
 1319 0725 2B070000 		.4byte	0x72b
 1320 0729 20       		.uleb128 0x20
 1321 072a 00       		.byte	0
 1322 072b 1F       		.uleb128 0x1f
 1323 072c 11040000 		.4byte	.LASF97
 1324 0730 06       		.byte	0x6
 1325 0731 06       		.byte	0x6
 1326 0732 38070000 		.4byte	0x738
 1327 0736 20       		.uleb128 0x20
 1328 0737 00       		.byte	0
 1329 0738 1F       		.uleb128 0x1f
 1330 0739 5A000000 		.4byte	.LASF98
 1331 073d 06       		.byte	0x6
 1332 073e 02       		.byte	0x2
 1333 073f 45070000 		.4byte	0x745
 1334 0743 20       		.uleb128 0x20
 1335 0744 00       		.byte	0
 1336 0745 1F       		.uleb128 0x1f
 1337 0746 BE020000 		.4byte	.LASF99
 1338 074a 08       		.byte	0x8
 1339 074b 03       		.byte	0x3
 1340 074c 52070000 		.4byte	0x752
 1341 0750 20       		.uleb128 0x20
 1342 0751 00       		.byte	0
 1343 0752 1F       		.uleb128 0x1f
 1344 0753 2D010000 		.4byte	.LASF100
 1345 0757 06       		.byte	0x6
 1346 0758 05       		.byte	0x5
 1347 0759 5F070000 		.4byte	0x75f
 1348 075d 20       		.uleb128 0x20
 1349 075e 00       		.byte	0
 1350 075f 1D       		.uleb128 0x1d
 1351 0760 4F040000 		.4byte	.LASF102
 1352 0764 09       		.byte	0x9
 1353 0765 02       		.byte	0x2
 1354 0766 70070000 		.4byte	0x770
 1355 076a 1E       		.uleb128 0x1e
 1356 076b E4000000 		.4byte	0xe4
 1357 076f 00       		.byte	0
 1358 0770 21       		.uleb128 0x21
 1359 0771 09030000 		.4byte	.LASF108
 1360 0775 06       		.byte	0x6
 1361 0776 01       		.byte	0x1
 1362 0777 E4000000 		.4byte	0xe4
 1363 077b 85070000 		.4byte	0x785
 1364 077f 1E       		.uleb128 0x1e
 1365 0780 CE000000 		.4byte	0xce
 1366 0784 00       		.byte	0
 1367 0785 22       		.uleb128 0x22
 1368 0786 98000000 		.4byte	.LASF109
 1369 078a 06       		.byte	0x6
 1370 078b 07       		.byte	0x7
 1371 078c 20       		.uleb128 0x20
 1372 078d 00       		.byte	0
 1373 078e 00       		.byte	0
 1374              		.section	.debug_abbrev,"",%progbits
 1375              	.Ldebug_abbrev0:
 1376 0000 01       		.uleb128 0x1
 1377 0001 11       		.uleb128 0x11
 1378 0002 01       		.byte	0x1
 1379 0003 25       		.uleb128 0x25
 1380 0004 0E       		.uleb128 0xe
 1381 0005 13       		.uleb128 0x13
 1382 0006 0B       		.uleb128 0xb
 1383 0007 03       		.uleb128 0x3
 1384 0008 0E       		.uleb128 0xe
 1385 0009 1B       		.uleb128 0x1b
 1386 000a 0E       		.uleb128 0xe
 1387 000b 55       		.uleb128 0x55
 1388 000c 17       		.uleb128 0x17
 1389 000d 11       		.uleb128 0x11
 1390 000e 01       		.uleb128 0x1
 1391 000f 10       		.uleb128 0x10
 1392 0010 17       		.uleb128 0x17
 1393 0011 00       		.byte	0
 1394 0012 00       		.byte	0
 1395 0013 02       		.uleb128 0x2
 1396 0014 16       		.uleb128 0x16
 1397 0015 00       		.byte	0
 1398 0016 03       		.uleb128 0x3
 1399 0017 0E       		.uleb128 0xe
 1400 0018 3A       		.uleb128 0x3a
 1401 0019 0B       		.uleb128 0xb
 1402 001a 3B       		.uleb128 0x3b
 1403 001b 0B       		.uleb128 0xb
 1404 001c 49       		.uleb128 0x49
 1405 001d 13       		.uleb128 0x13
 1406 001e 00       		.byte	0
 1407 001f 00       		.byte	0
 1408 0020 03       		.uleb128 0x3
 1409 0021 24       		.uleb128 0x24
 1410 0022 00       		.byte	0
 1411 0023 0B       		.uleb128 0xb
 1412 0024 0B       		.uleb128 0xb
 1413 0025 3E       		.uleb128 0x3e
 1414 0026 0B       		.uleb128 0xb
 1415 0027 03       		.uleb128 0x3
 1416 0028 0E       		.uleb128 0xe
 1417 0029 00       		.byte	0
 1418 002a 00       		.byte	0
 1419 002b 04       		.uleb128 0x4
 1420 002c 24       		.uleb128 0x24
 1421 002d 00       		.byte	0
 1422 002e 0B       		.uleb128 0xb
 1423 002f 0B       		.uleb128 0xb
 1424 0030 3E       		.uleb128 0x3e
 1425 0031 0B       		.uleb128 0xb
 1426 0032 03       		.uleb128 0x3
 1427 0033 08       		.uleb128 0x8
 1428 0034 00       		.byte	0
 1429 0035 00       		.byte	0
 1430 0036 05       		.uleb128 0x5
 1431 0037 13       		.uleb128 0x13
 1432 0038 01       		.byte	0x1
 1433 0039 03       		.uleb128 0x3
 1434 003a 0E       		.uleb128 0xe
 1435 003b 0B       		.uleb128 0xb
 1436 003c 0B       		.uleb128 0xb
 1437 003d 3A       		.uleb128 0x3a
 1438 003e 0B       		.uleb128 0xb
 1439 003f 3B       		.uleb128 0x3b
 1440 0040 0B       		.uleb128 0xb
 1441 0041 01       		.uleb128 0x1
 1442 0042 13       		.uleb128 0x13
 1443 0043 00       		.byte	0
 1444 0044 00       		.byte	0
 1445 0045 06       		.uleb128 0x6
 1446 0046 0D       		.uleb128 0xd
 1447 0047 00       		.byte	0
 1448 0048 03       		.uleb128 0x3
 1449 0049 0E       		.uleb128 0xe
 1450 004a 3A       		.uleb128 0x3a
 1451 004b 0B       		.uleb128 0xb
 1452 004c 3B       		.uleb128 0x3b
 1453 004d 0B       		.uleb128 0xb
 1454 004e 49       		.uleb128 0x49
 1455 004f 13       		.uleb128 0x13
 1456 0050 38       		.uleb128 0x38
 1457 0051 0B       		.uleb128 0xb
 1458 0052 00       		.byte	0
 1459 0053 00       		.byte	0
 1460 0054 07       		.uleb128 0x7
 1461 0055 0D       		.uleb128 0xd
 1462 0056 00       		.byte	0
 1463 0057 03       		.uleb128 0x3
 1464 0058 08       		.uleb128 0x8
 1465 0059 3A       		.uleb128 0x3a
 1466 005a 0B       		.uleb128 0xb
 1467 005b 3B       		.uleb128 0x3b
 1468 005c 0B       		.uleb128 0xb
 1469 005d 49       		.uleb128 0x49
 1470 005e 13       		.uleb128 0x13
 1471 005f 38       		.uleb128 0x38
 1472 0060 0B       		.uleb128 0xb
 1473 0061 00       		.byte	0
 1474 0062 00       		.byte	0
 1475 0063 08       		.uleb128 0x8
 1476 0064 13       		.uleb128 0x13
 1477 0065 01       		.byte	0x1
 1478 0066 03       		.uleb128 0x3
 1479 0067 0E       		.uleb128 0xe
 1480 0068 0B       		.uleb128 0xb
 1481 0069 0B       		.uleb128 0xb
 1482 006a 3A       		.uleb128 0x3a
 1483 006b 0B       		.uleb128 0xb
 1484 006c 3B       		.uleb128 0x3b
 1485 006d 05       		.uleb128 0x5
 1486 006e 01       		.uleb128 0x1
 1487 006f 13       		.uleb128 0x13
 1488 0070 00       		.byte	0
 1489 0071 00       		.byte	0
 1490 0072 09       		.uleb128 0x9
 1491 0073 0D       		.uleb128 0xd
 1492 0074 00       		.byte	0
 1493 0075 03       		.uleb128 0x3
 1494 0076 08       		.uleb128 0x8
 1495 0077 3A       		.uleb128 0x3a
 1496 0078 0B       		.uleb128 0xb
 1497 0079 3B       		.uleb128 0x3b
 1498 007a 05       		.uleb128 0x5
 1499 007b 49       		.uleb128 0x49
 1500 007c 13       		.uleb128 0x13
 1501 007d 38       		.uleb128 0x38
 1502 007e 0B       		.uleb128 0xb
 1503 007f 00       		.byte	0
 1504 0080 00       		.byte	0
 1505 0081 0A       		.uleb128 0xa
 1506 0082 0D       		.uleb128 0xd
 1507 0083 00       		.byte	0
 1508 0084 03       		.uleb128 0x3
 1509 0085 0E       		.uleb128 0xe
 1510 0086 3A       		.uleb128 0x3a
 1511 0087 0B       		.uleb128 0xb
 1512 0088 3B       		.uleb128 0x3b
 1513 0089 05       		.uleb128 0x5
 1514 008a 49       		.uleb128 0x49
 1515 008b 13       		.uleb128 0x13
 1516 008c 38       		.uleb128 0x38
 1517 008d 0B       		.uleb128 0xb
 1518 008e 00       		.byte	0
 1519 008f 00       		.byte	0
 1520 0090 0B       		.uleb128 0xb
 1521 0091 2E       		.uleb128 0x2e
 1522 0092 00       		.byte	0
 1523 0093 03       		.uleb128 0x3
 1524 0094 0E       		.uleb128 0xe
 1525 0095 3A       		.uleb128 0x3a
 1526 0096 0B       		.uleb128 0xb
 1527 0097 3B       		.uleb128 0x3b
 1528 0098 05       		.uleb128 0x5
 1529 0099 27       		.uleb128 0x27
 1530 009a 19       		.uleb128 0x19
 1531 009b 20       		.uleb128 0x20
 1532 009c 0B       		.uleb128 0xb
 1533 009d 00       		.byte	0
 1534 009e 00       		.byte	0
 1535 009f 0C       		.uleb128 0xc
 1536 00a0 2E       		.uleb128 0x2e
 1537 00a1 00       		.byte	0
 1538 00a2 03       		.uleb128 0x3
 1539 00a3 0E       		.uleb128 0xe
 1540 00a4 3A       		.uleb128 0x3a
 1541 00a5 0B       		.uleb128 0xb
 1542 00a6 3B       		.uleb128 0x3b
 1543 00a7 05       		.uleb128 0x5
 1544 00a8 20       		.uleb128 0x20
 1545 00a9 0B       		.uleb128 0xb
 1546 00aa 00       		.byte	0
 1547 00ab 00       		.byte	0
 1548 00ac 0D       		.uleb128 0xd
 1549 00ad 2E       		.uleb128 0x2e
 1550 00ae 01       		.byte	0x1
 1551 00af 3F       		.uleb128 0x3f
 1552 00b0 19       		.uleb128 0x19
 1553 00b1 03       		.uleb128 0x3
 1554 00b2 0E       		.uleb128 0xe
 1555 00b3 3A       		.uleb128 0x3a
 1556 00b4 0B       		.uleb128 0xb
 1557 00b5 3B       		.uleb128 0x3b
 1558 00b6 0B       		.uleb128 0xb
 1559 00b7 11       		.uleb128 0x11
 1560 00b8 01       		.uleb128 0x1
 1561 00b9 12       		.uleb128 0x12
 1562 00ba 06       		.uleb128 0x6
 1563 00bb 40       		.uleb128 0x40
 1564 00bc 18       		.uleb128 0x18
 1565 00bd 9742     		.uleb128 0x2117
 1566 00bf 19       		.uleb128 0x19
 1567 00c0 01       		.uleb128 0x1
 1568 00c1 13       		.uleb128 0x13
 1569 00c2 00       		.byte	0
 1570 00c3 00       		.byte	0
 1571 00c4 0E       		.uleb128 0xe
 1572 00c5 898201   		.uleb128 0x4109
 1573 00c8 00       		.byte	0
 1574 00c9 11       		.uleb128 0x11
 1575 00ca 01       		.uleb128 0x1
 1576 00cb 31       		.uleb128 0x31
 1577 00cc 13       		.uleb128 0x13
 1578 00cd 00       		.byte	0
 1579 00ce 00       		.byte	0
 1580 00cf 0F       		.uleb128 0xf
 1581 00d0 898201   		.uleb128 0x4109
 1582 00d3 01       		.byte	0x1
 1583 00d4 11       		.uleb128 0x11
 1584 00d5 01       		.uleb128 0x1
 1585 00d6 31       		.uleb128 0x31
 1586 00d7 13       		.uleb128 0x13
 1587 00d8 00       		.byte	0
 1588 00d9 00       		.byte	0
 1589 00da 10       		.uleb128 0x10
 1590 00db 8A8201   		.uleb128 0x410a
 1591 00de 00       		.byte	0
 1592 00df 02       		.uleb128 0x2
 1593 00e0 18       		.uleb128 0x18
 1594 00e1 9142     		.uleb128 0x2111
 1595 00e3 18       		.uleb128 0x18
 1596 00e4 00       		.byte	0
 1597 00e5 00       		.byte	0
 1598 00e6 11       		.uleb128 0x11
 1599 00e7 2E       		.uleb128 0x2e
 1600 00e8 01       		.byte	0x1
 1601 00e9 3F       		.uleb128 0x3f
 1602 00ea 19       		.uleb128 0x19
 1603 00eb 03       		.uleb128 0x3
 1604 00ec 0E       		.uleb128 0xe
 1605 00ed 3A       		.uleb128 0x3a
 1606 00ee 0B       		.uleb128 0xb
 1607 00ef 3B       		.uleb128 0x3b
 1608 00f0 0B       		.uleb128 0xb
 1609 00f1 49       		.uleb128 0x49
 1610 00f2 13       		.uleb128 0x13
 1611 00f3 11       		.uleb128 0x11
 1612 00f4 01       		.uleb128 0x1
 1613 00f5 12       		.uleb128 0x12
 1614 00f6 06       		.uleb128 0x6
 1615 00f7 40       		.uleb128 0x40
 1616 00f8 18       		.uleb128 0x18
 1617 00f9 9742     		.uleb128 0x2117
 1618 00fb 19       		.uleb128 0x19
 1619 00fc 01       		.uleb128 0x1
 1620 00fd 13       		.uleb128 0x13
 1621 00fe 00       		.byte	0
 1622 00ff 00       		.byte	0
 1623 0100 12       		.uleb128 0x12
 1624 0101 1D       		.uleb128 0x1d
 1625 0102 01       		.byte	0x1
 1626 0103 31       		.uleb128 0x31
 1627 0104 13       		.uleb128 0x13
 1628 0105 52       		.uleb128 0x52
 1629 0106 01       		.uleb128 0x1
 1630 0107 55       		.uleb128 0x55
 1631 0108 17       		.uleb128 0x17
 1632 0109 58       		.uleb128 0x58
 1633 010a 0B       		.uleb128 0xb
 1634 010b 59       		.uleb128 0x59
 1635 010c 0B       		.uleb128 0xb
 1636 010d 01       		.uleb128 0x1
 1637 010e 13       		.uleb128 0x13
 1638 010f 00       		.byte	0
 1639 0110 00       		.byte	0
 1640 0111 13       		.uleb128 0x13
 1641 0112 1D       		.uleb128 0x1d
 1642 0113 00       		.byte	0
 1643 0114 31       		.uleb128 0x31
 1644 0115 13       		.uleb128 0x13
 1645 0116 11       		.uleb128 0x11
 1646 0117 01       		.uleb128 0x1
 1647 0118 12       		.uleb128 0x12
 1648 0119 06       		.uleb128 0x6
 1649 011a 58       		.uleb128 0x58
 1650 011b 0B       		.uleb128 0xb
 1651 011c 59       		.uleb128 0x59
 1652 011d 05       		.uleb128 0x5
 1653 011e 00       		.byte	0
 1654 011f 00       		.byte	0
 1655 0120 14       		.uleb128 0x14
 1656 0121 1D       		.uleb128 0x1d
 1657 0122 01       		.byte	0x1
 1658 0123 31       		.uleb128 0x31
 1659 0124 13       		.uleb128 0x13
 1660 0125 11       		.uleb128 0x11
 1661 0126 01       		.uleb128 0x1
 1662 0127 12       		.uleb128 0x12
 1663 0128 06       		.uleb128 0x6
 1664 0129 58       		.uleb128 0x58
 1665 012a 0B       		.uleb128 0xb
 1666 012b 59       		.uleb128 0x59
 1667 012c 0B       		.uleb128 0xb
 1668 012d 01       		.uleb128 0x1
 1669 012e 13       		.uleb128 0x13
 1670 012f 00       		.byte	0
 1671 0130 00       		.byte	0
 1672 0131 15       		.uleb128 0x15
 1673 0132 898201   		.uleb128 0x4109
 1674 0135 01       		.byte	0x1
 1675 0136 11       		.uleb128 0x11
 1676 0137 01       		.uleb128 0x1
 1677 0138 31       		.uleb128 0x31
 1678 0139 13       		.uleb128 0x13
 1679 013a 01       		.uleb128 0x1
 1680 013b 13       		.uleb128 0x13
 1681 013c 00       		.byte	0
 1682 013d 00       		.byte	0
 1683 013e 16       		.uleb128 0x16
 1684 013f 34       		.uleb128 0x34
 1685 0140 00       		.byte	0
 1686 0141 03       		.uleb128 0x3
 1687 0142 0E       		.uleb128 0xe
 1688 0143 3A       		.uleb128 0x3a
 1689 0144 0B       		.uleb128 0xb
 1690 0145 3B       		.uleb128 0x3b
 1691 0146 05       		.uleb128 0x5
 1692 0147 49       		.uleb128 0x49
 1693 0148 13       		.uleb128 0x13
 1694 0149 3F       		.uleb128 0x3f
 1695 014a 19       		.uleb128 0x19
 1696 014b 3C       		.uleb128 0x3c
 1697 014c 19       		.uleb128 0x19
 1698 014d 00       		.byte	0
 1699 014e 00       		.byte	0
 1700 014f 17       		.uleb128 0x17
 1701 0150 35       		.uleb128 0x35
 1702 0151 00       		.byte	0
 1703 0152 49       		.uleb128 0x49
 1704 0153 13       		.uleb128 0x13
 1705 0154 00       		.byte	0
 1706 0155 00       		.byte	0
 1707 0156 18       		.uleb128 0x18
 1708 0157 34       		.uleb128 0x34
 1709 0158 00       		.byte	0
 1710 0159 03       		.uleb128 0x3
 1711 015a 08       		.uleb128 0x8
 1712 015b 3A       		.uleb128 0x3a
 1713 015c 0B       		.uleb128 0xb
 1714 015d 3B       		.uleb128 0x3b
 1715 015e 05       		.uleb128 0x5
 1716 015f 49       		.uleb128 0x49
 1717 0160 13       		.uleb128 0x13
 1718 0161 3F       		.uleb128 0x3f
 1719 0162 19       		.uleb128 0x19
 1720 0163 3C       		.uleb128 0x3c
 1721 0164 19       		.uleb128 0x19
 1722 0165 00       		.byte	0
 1723 0166 00       		.byte	0
 1724 0167 19       		.uleb128 0x19
 1725 0168 34       		.uleb128 0x34
 1726 0169 00       		.byte	0
 1727 016a 03       		.uleb128 0x3
 1728 016b 0E       		.uleb128 0xe
 1729 016c 3A       		.uleb128 0x3a
 1730 016d 0B       		.uleb128 0xb
 1731 016e 3B       		.uleb128 0x3b
 1732 016f 0B       		.uleb128 0xb
 1733 0170 49       		.uleb128 0x49
 1734 0171 13       		.uleb128 0x13
 1735 0172 3F       		.uleb128 0x3f
 1736 0173 19       		.uleb128 0x19
 1737 0174 3C       		.uleb128 0x3c
 1738 0175 19       		.uleb128 0x19
 1739 0176 00       		.byte	0
 1740 0177 00       		.byte	0
 1741 0178 1A       		.uleb128 0x1a
 1742 0179 0F       		.uleb128 0xf
 1743 017a 00       		.byte	0
 1744 017b 0B       		.uleb128 0xb
 1745 017c 0B       		.uleb128 0xb
 1746 017d 49       		.uleb128 0x49
 1747 017e 13       		.uleb128 0x13
 1748 017f 00       		.byte	0
 1749 0180 00       		.byte	0
 1750 0181 1B       		.uleb128 0x1b
 1751 0182 34       		.uleb128 0x34
 1752 0183 00       		.byte	0
 1753 0184 03       		.uleb128 0x3
 1754 0185 0E       		.uleb128 0xe
 1755 0186 3A       		.uleb128 0x3a
 1756 0187 0B       		.uleb128 0xb
 1757 0188 3B       		.uleb128 0x3b
 1758 0189 0B       		.uleb128 0xb
 1759 018a 49       		.uleb128 0x49
 1760 018b 13       		.uleb128 0x13
 1761 018c 3F       		.uleb128 0x3f
 1762 018d 19       		.uleb128 0x19
 1763 018e 02       		.uleb128 0x2
 1764 018f 18       		.uleb128 0x18
 1765 0190 00       		.byte	0
 1766 0191 00       		.byte	0
 1767 0192 1C       		.uleb128 0x1c
 1768 0193 34       		.uleb128 0x34
 1769 0194 00       		.byte	0
 1770 0195 03       		.uleb128 0x3
 1771 0196 08       		.uleb128 0x8
 1772 0197 3A       		.uleb128 0x3a
 1773 0198 0B       		.uleb128 0xb
 1774 0199 3B       		.uleb128 0x3b
 1775 019a 0B       		.uleb128 0xb
 1776 019b 49       		.uleb128 0x49
 1777 019c 13       		.uleb128 0x13
 1778 019d 3F       		.uleb128 0x3f
 1779 019e 19       		.uleb128 0x19
 1780 019f 02       		.uleb128 0x2
 1781 01a0 18       		.uleb128 0x18
 1782 01a1 00       		.byte	0
 1783 01a2 00       		.byte	0
 1784 01a3 1D       		.uleb128 0x1d
 1785 01a4 2E       		.uleb128 0x2e
 1786 01a5 01       		.byte	0x1
 1787 01a6 3F       		.uleb128 0x3f
 1788 01a7 19       		.uleb128 0x19
 1789 01a8 03       		.uleb128 0x3
 1790 01a9 0E       		.uleb128 0xe
 1791 01aa 3A       		.uleb128 0x3a
 1792 01ab 0B       		.uleb128 0xb
 1793 01ac 3B       		.uleb128 0x3b
 1794 01ad 0B       		.uleb128 0xb
 1795 01ae 27       		.uleb128 0x27
 1796 01af 19       		.uleb128 0x19
 1797 01b0 3C       		.uleb128 0x3c
 1798 01b1 19       		.uleb128 0x19
 1799 01b2 01       		.uleb128 0x1
 1800 01b3 13       		.uleb128 0x13
 1801 01b4 00       		.byte	0
 1802 01b5 00       		.byte	0
 1803 01b6 1E       		.uleb128 0x1e
 1804 01b7 05       		.uleb128 0x5
 1805 01b8 00       		.byte	0
 1806 01b9 49       		.uleb128 0x49
 1807 01ba 13       		.uleb128 0x13
 1808 01bb 00       		.byte	0
 1809 01bc 00       		.byte	0
 1810 01bd 1F       		.uleb128 0x1f
 1811 01be 2E       		.uleb128 0x2e
 1812 01bf 01       		.byte	0x1
 1813 01c0 3F       		.uleb128 0x3f
 1814 01c1 19       		.uleb128 0x19
 1815 01c2 03       		.uleb128 0x3
 1816 01c3 0E       		.uleb128 0xe
 1817 01c4 3A       		.uleb128 0x3a
 1818 01c5 0B       		.uleb128 0xb
 1819 01c6 3B       		.uleb128 0x3b
 1820 01c7 0B       		.uleb128 0xb
 1821 01c8 3C       		.uleb128 0x3c
 1822 01c9 19       		.uleb128 0x19
 1823 01ca 01       		.uleb128 0x1
 1824 01cb 13       		.uleb128 0x13
 1825 01cc 00       		.byte	0
 1826 01cd 00       		.byte	0
 1827 01ce 20       		.uleb128 0x20
 1828 01cf 18       		.uleb128 0x18
 1829 01d0 00       		.byte	0
 1830 01d1 00       		.byte	0
 1831 01d2 00       		.byte	0
 1832 01d3 21       		.uleb128 0x21
 1833 01d4 2E       		.uleb128 0x2e
 1834 01d5 01       		.byte	0x1
 1835 01d6 3F       		.uleb128 0x3f
 1836 01d7 19       		.uleb128 0x19
 1837 01d8 03       		.uleb128 0x3
 1838 01d9 0E       		.uleb128 0xe
 1839 01da 3A       		.uleb128 0x3a
 1840 01db 0B       		.uleb128 0xb
 1841 01dc 3B       		.uleb128 0x3b
 1842 01dd 0B       		.uleb128 0xb
 1843 01de 27       		.uleb128 0x27
 1844 01df 19       		.uleb128 0x19
 1845 01e0 49       		.uleb128 0x49
 1846 01e1 13       		.uleb128 0x13
 1847 01e2 3C       		.uleb128 0x3c
 1848 01e3 19       		.uleb128 0x19
 1849 01e4 01       		.uleb128 0x1
 1850 01e5 13       		.uleb128 0x13
 1851 01e6 00       		.byte	0
 1852 01e7 00       		.byte	0
 1853 01e8 22       		.uleb128 0x22
 1854 01e9 2E       		.uleb128 0x2e
 1855 01ea 01       		.byte	0x1
 1856 01eb 3F       		.uleb128 0x3f
 1857 01ec 19       		.uleb128 0x19
 1858 01ed 03       		.uleb128 0x3
 1859 01ee 0E       		.uleb128 0xe
 1860 01ef 3A       		.uleb128 0x3a
 1861 01f0 0B       		.uleb128 0xb
 1862 01f1 3B       		.uleb128 0x3b
 1863 01f2 0B       		.uleb128 0xb
 1864 01f3 3C       		.uleb128 0x3c
 1865 01f4 19       		.uleb128 0x19
 1866 01f5 00       		.byte	0
 1867 01f6 00       		.byte	0
 1868 01f7 00       		.byte	0
 1869              		.section	.debug_aranges,"",%progbits
 1870 0000 24000000 		.4byte	0x24
 1871 0004 0200     		.2byte	0x2
 1872 0006 00000000 		.4byte	.Ldebug_info0
 1873 000a 04       		.byte	0x4
 1874 000b 00       		.byte	0
 1875 000c 0000     		.2byte	0
 1876 000e 0000     		.2byte	0
 1877 0010 00000000 		.4byte	.Ltext0
 1878 0014 A4000000 		.4byte	.Letext0-.Ltext0
 1879 0018 00000000 		.4byte	.LFB394
 1880 001c 18010000 		.4byte	.LFE394-.LFB394
 1881 0020 00000000 		.4byte	0
 1882 0024 00000000 		.4byte	0
 1883              		.section	.debug_ranges,"",%progbits
 1884              	.Ldebug_ranges0:
 1885 0000 00000000 		.4byte	.LBB26
 1886 0004 02000000 		.4byte	.LBE26
 1887 0008 04000000 		.4byte	.LBB31
 1888 000c 10000000 		.4byte	.LBE31
 1889 0010 00000000 		.4byte	0
 1890 0014 00000000 		.4byte	0
 1891 0018 00000000 		.4byte	.Ltext0
 1892 001c A4000000 		.4byte	.Letext0
 1893 0020 00000000 		.4byte	.LFB394
 1894 0024 18010000 		.4byte	.LFE394
 1895 0028 00000000 		.4byte	0
 1896 002c 00000000 		.4byte	0
 1897              		.section	.debug_line,"",%progbits
 1898              	.Ldebug_line0:
 1899 0000 7B010000 		.section	.debug_str,"MS",%progbits,1
 1899      0200CB00 
 1899      00000201 
 1899      FB0E0D00 
 1899      01010101 
 1900              	.LASF58:
 1901 0000 504C4C53 		.ascii	"PLLSAICFGR\000"
 1901      41494346 
 1901      475200
 1902              	.LASF59:
 1903 000b 44434B43 		.ascii	"DCKCFGR\000"
 1903      46475200 
 1904              	.LASF41:
 1905 0013 41504231 		.ascii	"APB1ENR\000"
 1905      454E5200 
 1906              	.LASF50:
 1907 001b 41504232 		.ascii	"APB2LPENR\000"
 1907      4C50454E 
 1907      5200
 1908              	.LASF34:
 1909 0025 41504232 		.ascii	"APB2RSTR\000"
 1909      52535452 
 1909      00
 1910              	.LASF14:
 1911 002e 756E7369 		.ascii	"unsigned int\000"
 1911      676E6564 
 1911      20696E74 
 1911      00
 1912              	.LASF23:
 1913 003b 4C4F4144 		.ascii	"LOAD\000"
 1913      00
 1914              	.LASF86:
 1915 0040 54494D32 		.ascii	"TIM2\000"
 1915      00
 1916              	.LASF53:
 1917 0045 42444352 		.ascii	"BDCR\000"
 1917      00
 1918              	.LASF8:
 1919 004a 5F5F696E 		.ascii	"__int32_t\000"
 1919      7433325F 
 1919      7400
 1920              	.LASF24:
 1921 0054 43414C49 		.ascii	"CALIB\000"
 1921      4200
 1922              	.LASF98:
 1923 005a 696E6974 		.ascii	"init_timer\000"
 1923      5F74696D 
 1923      657200
 1924              	.LASF106:
 1925 0065 5F5F4453 		.ascii	"__DSB\000"
 1925      4200
 1926              	.LASF46:
 1927 006b 41484232 		.ascii	"AHB2LPENR\000"
 1927      4C50454E 
 1927      5200
 1928              	.LASF20:
 1929 0075 75696E74 		.ascii	"uint32_t\000"
 1929      33325F74 
 1929      00
 1930              	.LASF15:
 1931 007e 696E7438 		.ascii	"int8_t\000"
 1931      5F7400
 1932              	.LASF81:
 1933 0085 656E6162 		.ascii	"enable_SYSCFG\000"
 1933      6C655F53 
 1933      59534346 
 1933      4700
 1934              	.LASF76:
 1935 0093 42445452 		.ascii	"BDTR\000"
 1935      00
 1936              	.LASF109:
 1937 0098 766F6C75 		.ascii	"volume\000"
 1937      6D6500
 1938              	.LASF26:
 1939 009f 5243435F 		.ascii	"RCC_registers\000"
 1939      72656769 
 1939      73746572 
 1939      7300
 1940              	.LASF37:
 1941 00ad 41484231 		.ascii	"AHB1ENR\000"
 1941      454E5200 
 1942              	.LASF72:
 1943 00b5 43435231 		.ascii	"CCR1\000"
 1943      00
 1944              	.LASF56:
 1945 00ba 53534347 		.ascii	"SSCGR\000"
 1945      5200
 1946              	.LASF74:
 1947 00c0 43435233 		.ascii	"CCR3\000"
 1947      00
 1948              	.LASF75:
 1949 00c5 43435234 		.ascii	"CCR4\000"
 1949      00
 1950              	.LASF69:
 1951 00ca 43434D52 		.ascii	"CCMR1\000"
 1951      3100
 1952              	.LASF70:
 1953 00d0 43434D52 		.ascii	"CCMR2\000"
 1953      3200
 1954              	.LASF17:
 1955 00d6 696E7431 		.ascii	"int16_t\000"
 1955      365F7400 
 1956              	.LASF13:
 1957 00de 6C6F6E67 		.ascii	"long long unsigned int\000"
 1957      206C6F6E 
 1957      6720756E 
 1957      7369676E 
 1957      65642069 
 1958              	.LASF93:
 1959 00f5 636F756C 		.ascii	"couleur\000"
 1959      65757200 
 1960              	.LASF6:
 1961 00fd 5F5F7569 		.ascii	"__uint16_t\000"
 1961      6E743136 
 1961      5F7400
 1962              	.LASF94:
 1963 0108 636F6E66 		.ascii	"configuration_potentiometre\000"
 1963      69677572 
 1963      6174696F 
 1963      6E5F706F 
 1963      74656E74 
 1964              	.LASF31:
 1965 0124 41484233 		.ascii	"AHB3RSTR\000"
 1965      52535452 
 1965      00
 1966              	.LASF100:
 1967 012d 696E6974 		.ascii	"init_switchs\000"
 1967      5F737769 
 1967      74636873 
 1967      00
 1968              	.LASF25:
 1969 013a 53544B5F 		.ascii	"STK_registers\000"
 1969      72656769 
 1969      73746572 
 1969      7300
 1970              	.LASF90:
 1971 0148 7665696C 		.ascii	"veille\000"
 1971      6C6500
 1972              	.LASF32:
 1973 014f 5F726573 		.ascii	"_reserved_0x1c\000"
 1973      65727665 
 1973      645F3078 
 1973      316300
 1974              	.LASF68:
 1975 015e 44494552 		.ascii	"DIER\000"
 1975      00
 1976              	.LASF89:
 1977 0163 6D6F6465 		.ascii	"modeS\000"
 1977      5300
 1978              	.LASF39:
 1979 0169 41484233 		.ascii	"AHB3ENR\000"
 1979      454E5200 
 1980              	.LASF35:
 1981 0171 5F726573 		.ascii	"_reserved_0x28\000"
 1981      65727665 
 1981      645F3078 
 1981      323800
 1982              	.LASF78:
 1983 0180 656E6162 		.ascii	"enable_GPIOA\000"
 1983      6C655F47 
 1983      50494F41 
 1983      00
 1984              	.LASF79:
 1985 018d 656E6162 		.ascii	"enable_GPIOB\000"
 1985      6C655F47 
 1985      50494F42 
 1985      00
 1986              	.LASF80:
 1987 019a 656E6162 		.ascii	"enable_GPIOC\000"
 1987      6C655F47 
 1987      50494F43 
 1987      00
 1988              	.LASF33:
 1989 01a7 41504231 		.ascii	"APB1RSTR\000"
 1989      52535452 
 1989      00
 1990              	.LASF71:
 1991 01b0 43434552 		.ascii	"CCER\000"
 1991      00
 1992              	.LASF96:
 1993 01b5 62757474 		.ascii	"button_irq_init\000"
 1993      6F6E5F69 
 1993      72715F69 
 1993      6E697400 
 1994              	.LASF77:
 1995 01c5 444D4152 		.ascii	"DMAR\000"
 1995      00
 1996              	.LASF36:
 1997 01ca 5F726573 		.ascii	"_reserved_0x2c\000"
 1997      65727665 
 1997      645F3078 
 1997      326300
 1998              	.LASF65:
 1999 01d9 53574945 		.ascii	"SWIER\000"
 1999      5200
 2000              	.LASF16:
 2001 01df 75696E74 		.ascii	"uint8_t\000"
 2001      385F7400 
 2002              	.LASF67:
 2003 01e7 534D4352 		.ascii	"SMCR\000"
 2003      00
 2004              	.LASF40:
 2005 01ec 5F726573 		.ascii	"_reserved_0x3c\000"
 2005      65727665 
 2005      645F3078 
 2005      336300
 2006              	.LASF12:
 2007 01fb 6C6F6E67 		.ascii	"long long int\000"
 2007      206C6F6E 
 2007      6720696E 
 2007      7400
 2008              	.LASF49:
 2009 0209 41504231 		.ascii	"APB1LPENR\000"
 2009      4C50454E 
 2009      5200
 2010              	.LASF43:
 2011 0213 5F726573 		.ascii	"_reserved_0x48\000"
 2011      65727665 
 2011      645F3078 
 2011      343800
 2012              	.LASF4:
 2013 0222 5F5F696E 		.ascii	"__int16_t\000"
 2013      7431365F 
 2013      7400
 2014              	.LASF66:
 2015 022c 54494D78 		.ascii	"TIMx_registers\000"
 2015      5F726567 
 2015      69737465 
 2015      727300
 2016              	.LASF95:
 2017 023b 62757474 		.ascii	"button_init\000"
 2017      6F6E5F69 
 2017      6E697400 
 2018              	.LASF44:
 2019 0247 5F726573 		.ascii	"_reserved_0x4c\000"
 2019      65727665 
 2019      645F3078 
 2019      346300
 2020              	.LASF101:
 2021 0256 6C65645F 		.ascii	"led_tri_set\000"
 2021      7472695F 
 2021      73657400 
 2022              	.LASF83:
 2023 0262 45585449 		.ascii	"EXTI9_5_Handler\000"
 2023      395F355F 
 2023      48616E64 
 2023      6C657200 
 2024              	.LASF42:
 2025 0272 41504232 		.ascii	"APB2ENR\000"
 2025      454E5200 
 2026              	.LASF82:
 2027 027a 53797354 		.ascii	"SysTick_Handler\000"
 2027      69636B5F 
 2027      48616E64 
 2027      6C657200 
 2028              	.LASF61:
 2029 028a 44434B43 		.ascii	"DCKCFGR2\000"
 2029      46475232 
 2029      00
 2030              	.LASF0:
 2031 0293 5F5F696E 		.ascii	"__int8_t\000"
 2031      74385F74 
 2031      00
 2032              	.LASF45:
 2033 029c 41484231 		.ascii	"AHB1LPENR\000"
 2033      4C50454E 
 2033      5200
 2034              	.LASF48:
 2035 02a6 5F726573 		.ascii	"_reserved_0x5c\000"
 2035      65727665 
 2035      645F3078 
 2035      356300
 2036              	.LASF18:
 2037 02b5 75696E74 		.ascii	"uint16_t\000"
 2037      31365F74 
 2037      00
 2038              	.LASF99:
 2039 02be 6C65645F 		.ascii	"led_init\000"
 2039      696E6974 
 2039      00
 2040              	.LASF30:
 2041 02c7 41484232 		.ascii	"AHB2RSTR\000"
 2041      52535452 
 2041      00
 2042              	.LASF51:
 2043 02d0 5F726573 		.ascii	"_reserved_0x68\000"
 2043      65727665 
 2043      645F3078 
 2043      363800
 2044              	.LASF84:
 2045 02df 53797354 		.ascii	"SysTick\000"
 2045      69636B00 
 2046              	.LASF5:
 2047 02e7 73686F72 		.ascii	"short int\000"
 2047      7420696E 
 2047      7400
 2048              	.LASF9:
 2049 02f1 6C6F6E67 		.ascii	"long int\000"
 2049      20696E74 
 2049      00
 2050              	.LASF52:
 2051 02fa 5F726573 		.ascii	"_reserved_0x6c\000"
 2051      65727665 
 2051      645F3078 
 2051      366300
 2052              	.LASF108:
 2053 0309 4152525F 		.ascii	"ARR_Freq\000"
 2053      46726571 
 2053      00
 2054              	.LASF54:
 2055 0312 5F726573 		.ascii	"_reserved_0x78\000"
 2055      65727665 
 2055      645F3078 
 2055      373800
 2056              	.LASF91:
 2057 0321 666C6167 		.ascii	"flag\000"
 2057      00
 2058              	.LASF63:
 2059 0326 52545352 		.ascii	"RTSR\000"
 2059      00
 2060              	.LASF28:
 2061 032b 43464752 		.ascii	"CFGR\000"
 2061      00
 2062              	.LASF87:
 2063 0330 70744E5F 		.ascii	"ptN_melodie\000"
 2063      6D656C6F 
 2063      64696500 
 2064              	.LASF1:
 2065 033c 5F5F7569 		.ascii	"__uint8_t\000"
 2065      6E74385F 
 2065      7400
 2066              	.LASF55:
 2067 0346 5F726573 		.ascii	"_reserved_0x7c\000"
 2067      65727665 
 2067      645F3078 
 2067      376300
 2068              	.LASF27:
 2069 0355 504C4C43 		.ascii	"PLLCFGR\000"
 2069      46475200 
 2070              	.LASF47:
 2071 035d 41484233 		.ascii	"AHB3LPENR\000"
 2071      4C50454E 
 2071      5200
 2072              	.LASF21:
 2073 0367 73697A65 		.ascii	"sizetype\000"
 2073      74797065 
 2073      00
 2074              	.LASF11:
 2075 0370 6C6F6E67 		.ascii	"long unsigned int\000"
 2075      20756E73 
 2075      69676E65 
 2075      6420696E 
 2075      7400
 2076              	.LASF64:
 2077 0382 46545352 		.ascii	"FTSR\000"
 2077      00
 2078              	.LASF38:
 2079 0387 41484232 		.ascii	"AHB2ENR\000"
 2079      454E5200 
 2080              	.LASF19:
 2081 038f 696E7433 		.ascii	"int32_t\000"
 2081      325F7400 
 2082              	.LASF57:
 2083 0397 504C4C49 		.ascii	"PLLI2SCFGR\000"
 2083      32534346 
 2083      475200
 2084              	.LASF3:
 2085 03a2 756E7369 		.ascii	"unsigned char\000"
 2085      676E6564 
 2085      20636861 
 2085      7200
 2086              	.LASF62:
 2087 03b0 45585449 		.ascii	"EXTI_registers\000"
 2087      5F726567 
 2087      69737465 
 2087      727300
 2088              	.LASF10:
 2089 03bf 5F5F7569 		.ascii	"__uint32_t\000"
 2089      6E743332 
 2089      5F7400
 2090              	.LASF73:
 2091 03ca 43435232 		.ascii	"CCR2\000"
 2091      00
 2092              	.LASF105:
 2093 03cf 2F686F6D 		.ascii	"/home/tom/COURS/S6/Projet_boiteMusique/c_project\000"
 2093      652F746F 
 2093      6D2F434F 
 2093      5552532F 
 2093      53362F50 
 2094              	.LASF85:
 2095 0400 45585449 		.ascii	"EXTI\000"
 2095      00
 2096              	.LASF88:
 2097 0405 7074445F 		.ascii	"ptD_melodie\000"
 2097      6D656C6F 
 2097      64696500 
 2098              	.LASF97:
 2099 0411 73656C65 		.ascii	"select_melodie\000"
 2099      63745F6D 
 2099      656C6F64 
 2099      696500
 2100              	.LASF2:
 2101 0420 7369676E 		.ascii	"signed char\000"
 2101      65642063 
 2101      68617200 
 2102              	.LASF104:
 2103 042c 7372632F 		.ascii	"src/main.c\000"
 2103      6D61696E 
 2103      2E6300
 2104              	.LASF7:
 2105 0437 73686F72 		.ascii	"short unsigned int\000"
 2105      7420756E 
 2105      7369676E 
 2105      65642069 
 2105      6E7400
 2106              	.LASF107:
 2107 044a 6D61696E 		.ascii	"main\000"
 2107      00
 2108              	.LASF102:
 2109 044f 53797354 		.ascii	"SysTick_init\000"
 2109      69636B5F 
 2109      696E6974 
 2109      00
 2110              	.LASF92:
 2111 045c 70617573 		.ascii	"pause\000"
 2111      6500
 2112              	.LASF60:
 2113 0462 434B4741 		.ascii	"CKGATENR\000"
 2113      54454E52 
 2113      00
 2114              	.LASF103:
 2115 046b 474E5520 		.ascii	"GNU C 4.9.3 20150529 (prerelease) -mtune=cortex-m4 "
 2115      4320342E 
 2115      392E3320 
 2115      32303135 
 2115      30353239 
 2116 049e 2D6D7468 		.ascii	"-mthumb -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4"
 2116      756D6220 
 2116      2D6D6172 
 2116      63683D61 
 2116      726D7637 
 2117 04d1 2D73702D 		.ascii	"-sp-d16 -g -O0 -Os -fsingle-precision-constant\000"
 2117      64313620 
 2117      2D67202D 
 2117      4F30202D 
 2117      4F73202D 
 2118              	.LASF29:
 2119 0500 41484231 		.ascii	"AHB1RSTR\000"
 2119      52535452 
 2119      00
 2120              	.LASF22:
 2121 0509 4354524C 		.ascii	"CTRL\000"
 2121      00
 2122              		.ident	"GCC: (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccxHaYMB.s:20     .text:0000000000000000 $t
     /tmp/ccxHaYMB.s:25     .text:0000000000000000 SysTick_Handler
     /tmp/ccxHaYMB.s:100    .text:0000000000000050 $d
     /tmp/ccxHaYMB.s:105    .text:0000000000000058 $t
     /tmp/ccxHaYMB.s:110    .text:0000000000000058 EXTI9_5_Handler
     /tmp/ccxHaYMB.s:167    .text:0000000000000094 $d
     /tmp/ccxHaYMB.s:175    .text.startup:0000000000000000 $t
     /tmp/ccxHaYMB.s:180    .text.startup:0000000000000000 main
     /tmp/ccxHaYMB.s:405    .text.startup:00000000000000fc $d
     /tmp/ccxHaYMB.s:435    .bss:0000000000000004 couleur
     /tmp/ccxHaYMB.s:444    .bss:000000000000000c i
     /tmp/ccxHaYMB.s:426    .bss:0000000000000000 pause
     /tmp/ccxHaYMB.s:448    .bss:000000000000000d flag
     /tmp/ccxHaYMB.s:431    .bss:0000000000000002 CPT
     /tmp/ccxHaYMB.s:440    .bss:0000000000000008 veille
     /tmp/ccxHaYMB.s:422    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
led_tri_set
TIM2
EXTI
SysTick
configuration_potentiometre
button_init
button_irq_init
select_melodie
init_timer
led_init
init_switchs
SysTick_init
ARR_Freq
volume
RCC
ptN_melodie
modeS
ptD_melodie
